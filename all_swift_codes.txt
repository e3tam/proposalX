
/* ================================================== */
/* File: ./ProposalCRM/App/ContentView.swift */
/* ================================================== */

// ContentView.swift
// Main container view with tab navigation

import SwiftUI

struct ContentView: View {
    @Environment(\.managedObjectContext) private var viewContext
    
    var body: some View {
        TabView {
            NavigationView {
                CustomerListView()
            }
            .tabItem {
                Label("Customers", systemImage: "person.3")
            }
            
            NavigationView {
                CustomProductListView()
            }
            .tabItem {
                Label("Products", systemImage: "cube.box")
            }
            
            NavigationView {
                ProposalListView()
            }
            .tabItem {
                Label("Proposals", systemImage: "doc.text")
            }
            
            NavigationView {
                FinancialSummaryView()
            }
            .tabItem {
                Label("Dashboard", systemImage: "chart.bar")
            }
        }
        .navigationViewStyle(DoubleColumnNavigationViewStyle())
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
            .environment(\.managedObjectContext, PersistenceController.preview.container.viewContext)
    }
}



/* ================================================== */
/* File: ./ProposalCRM/App/ProposalCRMApp.swift */
/* ================================================== */

// ProposalCRMApp.swift
// Main entry point for the application

import SwiftUI

@main
struct ProposalCRMApp: App {
    let persistenceController = PersistenceController.shared
    
    var body: some Scene {
        WindowGroup {
            ContentView()
                .environment(\.managedObjectContext, persistenceController.container.viewContext)
        }
    }
}



/* ================================================== */
/* File: ./ProposalCRM/Models/CoreDataModel.swift */
/* ================================================== */

// CoreDataModel.swift
// This file provides programmatic definitions for the Core Data model entities

import Foundation
import CoreData

// Core Data Model Manager
// COMMENTED OUT TO AVOID DUPLICATION WITH Persistence.swift
/*
// COMMENTED OUT TO AVOID DUPLICATION WITH Persistence.swift
/*
class PersistenceController {
    static let shared = PersistenceController()
    
    let container: NSPersistentContainer
    
    init(inMemory: Bool = false) {
        container = NSPersistentContainer(name: "ProposalCRM")
        
        if inMemory {
            container.persistentStoreDescriptions.first!.url = URL(fileURLWithPath: "/dev/null")
        }
        
        container.loadPersistentStores { (storeDescription, error) in
            if let error = error as NSError? {
                fatalError("Unresolved error \(error), \(error.userInfo)")
            }
        }
        
        container.viewContext.automaticallyMergesChangesFromParent = true
        container.viewContext.mergePolicy = NSMergeByPropertyObjectTrumpMergePolicy
    }
}

// Extension for creating sample data for preview
*/

*/


// MARK: - CoreData entity extensions

// Customer extension
extension Customer {
    var formattedName: String {
        return name ?? "Unknown Customer"
    }
    
    var proposalsArray: [Proposal] {
        let set = proposals as? Set<Proposal> ?? []
        return set.sorted {
            $0.creationDate ?? Date() > $1.creationDate ?? Date()
        }
    }
}

// Product extension
extension Product {
    var formattedCode: String {
        return code ?? "Unknown Code"
    }
    
    var formattedName: String {
        return name ?? "Unknown Product"
    }
    
    var formattedPrice: String {
        return String(format: "%.2f", listPrice)
    }
}

// Proposal extension
extension Proposal {
    var formattedNumber: String {
        return number ?? "New Proposal"
    }
    
    var formattedDate: String {
        guard let date = creationDate else {
            return "Unknown Date"
        }
        
        let formatter = DateFormatter()
        formatter.dateStyle = .medium
        return formatter.string(from: date)
    }
    
    var formattedStatus: String {
        return status ?? "Draft"
    }
    
    var formattedTotal: String {
        return String(format: "%.2f", totalAmount)
    }
    
    var customerName: String {
        return customer?.name ?? "No Customer"
    }
    
    var itemsArray: [ProposalItem] {
        let set = items as? Set<ProposalItem> ?? []
        return set.sorted {
            $0.product?.name ?? "" < $1.product?.name ?? ""
        }
    }
    
    var engineeringArray: [Engineering] {
        let set = engineering as? Set<Engineering> ?? []
        return set.sorted {
            $0.description ?? "" < $1.description ?? ""
        }
    }
    
    var expensesArray: [Expense] {
        let set = expenses as? Set<Expense> ?? []
        return set.sorted {
            $0.description ?? "" < $1.description ?? ""
        }
    }
    
    var taxesArray: [CustomTax] {
        let set = taxes as? Set<CustomTax> ?? []
        return set.sorted {
            $0.name ?? "" < $1.name ?? ""
        }
    }
    
    var subtotalProducts: Double {
        let items = itemsArray
        return items.reduce(0) { $0 + $1.amount }
    }
    
    var subtotalEngineering: Double {
        let engineering = engineeringArray
        return engineering.reduce(0) { $0 + $1.amount }
    }
    
    var subtotalExpenses: Double {
        let expenses = expensesArray
        return expenses.reduce(0) { $0 + $1.amount }
    }
    
    var subtotalTaxes: Double {
        let taxes = taxesArray
        return taxes.reduce(0) { $0 + $1.amount }
    }
    
    var totalCost: Double {
        var cost = 0.0
        for item in itemsArray {
            if let product = item.product {
                cost += product.partnerPrice * item.quantity
            }
        }
        return cost + subtotalExpenses
    }
    
    var grossProfit: Double {
        return totalAmount - totalCost
    }
    
    var profitMargin: Double {
        if totalAmount == 0 {
            return 0
        }
        return (grossProfit / totalAmount) * 100
    }
}

// ProposalItem extension
extension ProposalItem {
    var productName: String {
        return product?.name ?? "Unknown Product"
    }
    
    var productCode: String {
        return product?.code ?? "Unknown Code"
    }
    
    var formattedAmount: String {
        return String(format: "%.2f", amount)
    }
}

// Engineering extension
extension Engineering {
    var formattedAmount: String {
        return String(format: "%.2f", amount)
    }
}

// Expense extension
extension Expense {
    var formattedAmount: String {
        return String(format: "%.2f", amount)
    }
}

// CustomTax extension
extension CustomTax {
    var formattedRate: String {
        return String(format: "%.2f%%", rate)
    }
    
    var formattedAmount: String {
        return String(format: "%.2f", amount)
    }
}



/* ================================================== */
/* File: ./ProposalCRM/Models/FinancialCalculator.swift */
/* ================================================== */

// FinancialCalculator.swift
// Handles complex pricing calculations for proposals

import Foundation
import CoreData

class FinancialCalculator {
    // Calculate pricing with various discount levels
    static func calculatePrice(listPrice: Double, discount: Double) -> Double {
        return listPrice * (1 - discount / 100)
    }
    
    // Calculate profit margin percentage
    static func calculateProfitMargin(revenue: Double, cost: Double) -> Double {
        if revenue == 0 {
            return 0
        }
        return ((revenue - cost) / revenue) * 100
    }
    
    // Calculate break-even discount
    static func calculateBreakEvenDiscount(listPrice: Double, partnerPrice: Double) -> Double {
        if listPrice == 0 {
            return 0
        }
        let breakEvenDiscount = ((listPrice - partnerPrice) / listPrice) * 100
        return breakEvenDiscount
    }
    
    // Calculate tax amount
    static func calculateTaxAmount(amount: Double, taxRate: Double) -> Double {
        return amount * (taxRate / 100)
    }
    
    // Calculate total proposal amount with all components
    static func calculateTotalProposalAmount(proposal: Proposal) -> Double {
        let productsTotal = proposal.subtotalProducts
        let engineeringTotal = proposal.subtotalEngineering
        let expensesTotal = proposal.subtotalExpenses
        let taxesTotal = proposal.subtotalTaxes
        
        return productsTotal + engineeringTotal + expensesTotal + taxesTotal
    }
    
    // Format currency based on locale
    static func formatCurrency(_ amount: Double, currencyCode: String = "USD") -> String {
        let formatter = NumberFormatter()
        formatter.numberStyle = .currency
        formatter.currencyCode = currencyCode
        
        return formatter.string(from: NSNumber(value: amount)) ?? "\(currencyCode) \(String(format: "%.2f", amount))"
    }
}



/* ================================================== */
/* File: ./ProposalCRM/Models/ProposalItemExtentions.swift */
/* ================================================== */

// ProposalItemExtensions.swift
// Extensions for ProposalItem to handle the new calculation fields

import Foundation
import CoreData

extension ProposalItem {
    // MARK: - Dynamic Properties
    // These properties are implemented as computed properties
    // but should be added as actual attributes to the Core Data model
    
    // Multiplier property (default: 1.0)
    var multiplier: Double {
        get {
            return value(forKey: "multiplier") as? Double ?? 1.0
        }
        set {
            setValue(newValue, forKey: "multiplier")
        }
    }
    
    // Partner price property (from the product)
    var partnerPrice: Double {
        get {
            return value(forKey: "partnerPrice") as? Double ?? product?.partnerPrice ?? 0
        }
        set {
            setValue(newValue, forKey: "partnerPrice")
        }
    }
    
    // Apply custom tax flag
    var applyCustomTax: Bool {
        get {
            return value(forKey: "applyCustomTax") as? Bool ?? false
        }
        set {
            setValue(newValue, forKey: "applyCustomTax")
        }
    }
    
    // Custom description
    var customDescription: String {
        get {
            return value(forKey: "customDescription") as? String ?? ""
        }
        set {
            setValue(newValue, forKey: "customDescription")
        }
    }
    
    // Profit
    var profit: Double {
        get {
            return value(forKey: "profit") as? Double ?? 0
        }
        set {
            setValue(newValue, forKey: "profit")
        }
    }
    
    // MARK: - Calculated Properties
    
    // Unit list price (from the product)
    var unitListPrice: Double {
        return product?.listPrice ?? 0
    }
    
    // Extended partner price
    var extendedPartnerPrice: Double {
        return partnerPrice * quantity
    }
    
    // Extended list price
    var extendedListPrice: Double {
        return unitListPrice * quantity
    }
    
    // Extended customer price (with multiplier and discount)
    var extendedCustomerPrice: Double {
        return extendedListPrice * multiplier * (1 - discount / 100)
    }
    
    // Discount ratio (partner/list price)
    var discountRatio: Double {
        if unitListPrice == 0 {
            return 0
        }
        return (partnerPrice / unitListPrice) * 100
    }
    
    // Calculated profit
    var calculatedProfit: Double {
        return extendedCustomerPrice - extendedPartnerPrice
    }
    
    // Profit margin percentage
    var profitMargin: Double {
        if extendedCustomerPrice == 0 {
            return 0
        }
        return (calculatedProfit / extendedCustomerPrice) * 100
    }
    
    // Formatted strings for display
    var formattedUnitListPrice: String {
        return String(format: "%.2f", unitListPrice)
    }
    
    var formattedUnitPartnerPrice: String {
        return String(format: "%.2f", partnerPrice)
    }
    
    var formattedExtendedListPrice: String {
        return String(format: "%.2f", extendedListPrice)
    }
    
    var formattedExtendedPartnerPrice: String {
        return String(format: "%.2f", extendedPartnerPrice)
    }
    
    var formattedExtendedCustomerPrice: String {
        return String(format: "%.2f", extendedCustomerPrice)
    }
    
    var formattedProfit: String {
        return String(format: "%.2f", calculatedProfit)
    }
    
    var formattedProfitMargin: String {
        return String(format: "%.1f%%", profitMargin)
    }
    
    var formattedMultiplier: String {
        return String(format: "%.2fx", multiplier)
    }
}

// MARK: - Core Data Model Extension Guide
/*
 To fully implement these changes, update your Core Data model by:
 
 1. Open ProposalCRM.xcdatamodeld in Xcode
 2. Select the ProposalItem entity
 3. Add the following attributes:
    - multiplier: Double, default: 1.0
    - partnerPrice: Double, default: 0.0
    - applyCustomTax: Boolean, default: false
    - customDescription: String, optional
    - profit: Double, default: 0.0
 
 Note: Until you can update the Core Data model directly, this extension
 provides computed properties that use Core Data's dynamic features to
 store and retrieve these values. This is a temporary solution that will
 work but is not optimal for performance.
 
 For a production app, you should properly update the Core Data model
 and run the migration process.
 */



/* ================================================== */
/* File: ./ProposalCRM/Persistence.swift */
/* ================================================== */

//
//  Persistence.swift
//  ProposalCRM
//
//  Created by Ali Sami Gözükırmızı on 16.04.2025.
//

import CoreData

struct PersistenceController {
    static let shared = PersistenceController()

    @MainActor
    static let preview: PersistenceController = {
        let result = PersistenceController(inMemory: true)
        let viewContext = result.container.viewContext
        for _ in 0..<10 {
            let newItem = Item(context: viewContext)
            newItem.timestamp = Date()
        }
        do {
            try viewContext.save()
        } catch {
            // Replace this implementation with code to handle the error appropriately.
            // fatalError() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.
            let nsError = error as NSError
            fatalError("Unresolved error \(nsError), \(nsError.userInfo)")
        }
        return result
    }()

    let container: NSPersistentCloudKitContainer

    init(inMemory: Bool = false) {
        container = NSPersistentCloudKitContainer(name: "ProposalCRM")
        if inMemory {
            container.persistentStoreDescriptions.first!.url = URL(fileURLWithPath: "/dev/null")
        }
        container.loadPersistentStores(completionHandler: { (storeDescription, error) in
            if let error = error as NSError? {
                // Replace this implementation with code to handle the error appropriately.
                // fatalError() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.

                /*
                 Typical reasons for an error here include:
                 * The parent directory does not exist, cannot be created, or disallows writing.
                 * The persistent store is not accessible, due to permissions or data protection when the device is locked.
                 * The device is out of space.
                 * The store could not be migrated to the current model version.
                 Check the error message to determine what the actual problem was.
                 */
                fatalError("Unresolved error \(error), \(error.userInfo)")
            }
        })
        container.viewContext.automaticallyMergesChangesFromParent = true
    }
}



/* ================================================== */
/* File: ./ProposalCRM/Utilities/CSVParser.swift */
/* ================================================== */

// CSVParser.swift
// Utilities for handling CSV file imports and exports

import Foundation
import CoreData

class CSVParser {
    
    enum CSVError: Error {
        case invalidFormat
        case invalidData
        case emptyFile
        case missingHeaders
        case fileSaveError
    }
    
    // Parse CSV string into array of dictionaries
    static func parseCSV(string: String) throws -> [[String: String]] {
        // Split into lines
        var lines = string.components(separatedBy: .newlines)
        
        // Remove empty lines
        lines = lines.filter { !$0.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty }
        
        guard !lines.isEmpty else {
            throw CSVError.emptyFile
        }
        
        // Extract headers from first line
        let headers = lines[0].components(separatedBy: ",").map {
            $0.trimmingCharacters(in: .whitespacesAndNewlines)
        }
        
        guard !headers.isEmpty else {
            throw CSVError.missingHeaders
        }
        
        // Parse each remaining line into a dictionary
        var result: [[String: String]] = []
        
        for i in 1..<lines.count {
            let line = lines[i]
            let values = line.components(separatedBy: ",").map {
                $0.trimmingCharacters(in: .whitespacesAndNewlines)
            }
            
            // Skip if line doesn't match header count
            if values.count != headers.count {
                continue
            }
            
            var entry: [String: String] = [:]
            
            for (index, header) in headers.enumerated() {
                entry[header] = values[index]
            }
            
            result.append(entry)
        }
        
        return result
    }
    
    // Specifically parse product CSV
    static func parseProductsCSV(string: String) throws -> [ProductData] {
        let rows = try parseCSV(string: string)
        var products: [ProductData] = []
        
        for row in rows {
            guard let code = row["code"],
                  let name = row["name"],
                  let description = row["description"],
                  let category = row["category"],
                  let listPriceStr = row["listPrice"],
                  let partnerPriceStr = row["partnerPrice"],
                  let listPrice = Double(listPriceStr),
                  let partnerPrice = Double(partnerPriceStr) else {
                continue
            }
            
            let product = ProductData(
                code: code,
                name: name,
                description: description,
                category: category,
                listPrice: listPrice,
                partnerPrice: partnerPrice
            )
            
            products.append(product)
        }
        
        return products
    }
    
    // Import products from CSV into Core Data
    static func importProductsFromCSV(csvString: String, context: NSManagedObjectContext) throws -> Int {
        let productDataArray = try parseProductsCSV(string: csvString)
        var importedCount = 0
        
        for productData in productDataArray {
            // Check if product with same code already exists
            let fetchRequest: NSFetchRequest<Product> = Product.fetchRequest()
            fetchRequest.predicate = NSPredicate(format: "code == %@", productData.code)
            
            let existingProducts = try context.fetch(fetchRequest)
            
            if let existingProduct = existingProducts.first {
                // Update existing product
                existingProduct.name = productData.name
                
                // Fix: Use setValue(_:forKey:) instead of direct assignment for the description property
                existingProduct.setValue(productData.description, forKey: "desc")
                
                existingProduct.category = productData.category
                existingProduct.listPrice = productData.listPrice
                existingProduct.partnerPrice = productData.partnerPrice
            } else {
                // Create new product
                let product = Product(context: context)
                product.id = UUID()
                product.code = productData.code
                product.name = productData.name
                
                // Fix: Use setValue(_:forKey:) instead of direct assignment for the description property
                product.setValue(productData.description, forKey: "desc")
                
                product.category = productData.category
                product.listPrice = productData.listPrice
                product.partnerPrice = productData.partnerPrice
            }
            
            importedCount += 1
        }
        
        try context.save()
        return importedCount
    }
    
    // Export products to CSV
    static func exportProductsToCSV(products: [Product]) -> String {
        var csvString = "code,name,description,category,listPrice,partnerPrice\n"
        
        for product in products {
            let code = product.code ?? ""
            let name = product.name ?? ""
            
            // Fix: Use value(forKey:) to get the description property
            let description = product.value(forKey: "desc") as? String ?? ""
            
            let category = product.category ?? ""
            let listPrice = String(format: "%.2f", product.listPrice)
            let partnerPrice = String(format: "%.2f", product.partnerPrice)
            
            // Escape fields if they contain commas or quotes
            let escapedCode = escapeCSVField(code)
            let escapedName = escapeCSVField(name)
            let escapedDescription = escapeCSVField(description)
            let escapedCategory = escapeCSVField(category)
            
            let line = "\(escapedCode),\(escapedName),\(escapedDescription),\(escapedCategory),\(listPrice),\(partnerPrice)\n"
            csvString.append(line)
        }
        
        return csvString
    }
    
    // Helper function to escape CSV fields
    private static func escapeCSVField(_ field: String) -> String {
        if field.contains(",") || field.contains("\"") || field.contains("\n") {
            let escapedField = field.replacingOccurrences(of: "\"", with: "\"\"")
            return "\"\(escapedField)\""
        }
        return field
    }
}

// Struct to hold product data from CSV
struct ProductData {
    let code: String
    let name: String
    let description: String
    let category: String
    let listPrice: Double
    let partnerPrice: Double
}



/* ================================================== */
/* File: ./ProposalCRM/Utilities/PDFGenerator.swift */
/* ================================================== */

// PDFGenerator.swift
// Generate PDF proposals for sharing and printing

import Foundation
import UIKit
import CoreData
import PDFKit

class PDFGenerator {
    // Main function to generate a PDF from a proposal
    static func generateProposalPDF(from proposal: Proposal) -> Data? {
        let pdfMetaData = [
            kCGPDFContextCreator: "ProposalCRM App",
            kCGPDFContextAuthor: "Generated on \(Date().formatted())"
        ]
        let format = UIGraphicsPDFRendererFormat()
        format.documentInfo = pdfMetaData as [String: Any]
        
        // Use A4 page size
        let pageWidth = 8.27 * 72.0
        let pageHeight = 11.69 * 72.0
        let pageRect = CGRect(x: 0, y: 0, width: pageWidth, height: pageHeight)
        
        let renderer = UIGraphicsPDFRenderer(bounds: pageRect, format: format)
        
        let data = renderer.pdfData { (context) in
            // First page with header and customer information
            context.beginPage()
            
            // Draw company logo or name
            let titleFont = UIFont.systemFont(ofSize: 28, weight: .bold)
            let titleAttributes: [NSAttributedString.Key: Any] = [
                .font: titleFont,
                .foregroundColor: UIColor.black
            ]
            let companyName = "Your Company Name"
            let companyNameSize = companyName.size(withAttributes: titleAttributes)
            let companyRect = CGRect(x: 30, y: 30, width: companyNameSize.width, height: companyNameSize.height)
            companyName.draw(in: companyRect, withAttributes: titleAttributes)
            
            // Draw proposal title
            let proposalFont = UIFont.systemFont(ofSize: 24, weight: .semibold)
            let proposalAttributes: [NSAttributedString.Key: Any] = [
                .font: proposalFont,
                .foregroundColor: UIColor.black
            ]
            let proposalTitle = "PROPOSAL"
            let proposalTitleSize = proposalTitle.size(withAttributes: proposalAttributes)
            let proposalRect = CGRect(x: 30, y: 70, width: proposalTitleSize.width, height: proposalTitleSize.height)
            proposalTitle.draw(in: proposalRect, withAttributes: proposalAttributes)
            
            // Draw proposal number and date
            let detailFont = UIFont.systemFont(ofSize: 12)
            let detailAttributes: [NSAttributedString.Key: Any] = [
                .font: detailFont,
                .foregroundColor: UIColor.black
            ]
            
            let proposalNumber = "Proposal Number: \(proposal.formattedNumber)"
            let proposalNumberSize = proposalNumber.size(withAttributes: detailAttributes)
            let proposalNumberRect = CGRect(x: 30, y: 110, width: proposalNumberSize.width, height: proposalNumberSize.height)
            proposalNumber.draw(in: proposalNumberRect, withAttributes: detailAttributes)
            
            let dateFormatter = DateFormatter()
            dateFormatter.dateStyle = .long
            let dateString = "Date: \(dateFormatter.string(from: proposal.creationDate ?? Date()))"
            let dateStringSize = dateString.size(withAttributes: detailAttributes)
            let dateRect = CGRect(x: 30, y: 130, width: dateStringSize.width, height: dateStringSize.height)
            dateString.draw(in: dateRect, withAttributes: detailAttributes)
            
            // Draw customer information
            let sectionFont = UIFont.systemFont(ofSize: 16, weight: .semibold)
            let sectionAttributes: [NSAttributedString.Key: Any] = [
                .font: sectionFont,
                .foregroundColor: UIColor.black
            ]
            
            let customerTitle = "Customer Information"
            let customerTitleSize = customerTitle.size(withAttributes: sectionAttributes)
            let customerTitleRect = CGRect(x: 30, y: 190, width: customerTitleSize.width, height: customerTitleSize.height)
            customerTitle.draw(in: customerTitleRect, withAttributes: sectionAttributes)
            
            // Basic PDF content implementation - would be expanded in real app
            // ...
        }
        
        return data
    }
    
    // Save PDF to Files app
    static func savePDF(_ pdfData: Data, fileName: String) -> URL? {
        let documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0]
        let url = documentsDirectory.appendingPathComponent(fileName)
        
        do {
            try pdfData.write(to: url)
            return url
        } catch {
            print("Error saving PDF: \(error)")
            return nil
        }
    }
    
    // Preview PDF
    static func previewPDF(_ url: URL) -> UIViewController {
        let pdfView = PDFView()
        pdfView.autoScales = true
        
        if let document = PDFDocument(url: url) {
            pdfView.document = document
        }
        
        let viewController = UIViewController()
        viewController.view = pdfView
        viewController.title = "Proposal Preview"
        
        return viewController
    }
}



/* ================================================== */
/* File: ./ProposalCRM/Views/Components/CustomTaxEditMenu.swift */
/* ================================================== */

//
//  CustomTaxEditMenu.swift
//  ProposalCRM
//
//  Created by Ali Sami Gözükırmızı on 19.04.2025.
//


// CustomTaxEditMenu.swift
// Popup menu for editing custom tax entries inline

import SwiftUI
import CoreData

struct CustomTaxEditMenu: View {
    @Environment(\.managedObjectContext) private var viewContext
    @ObservedObject var customTax: CustomTax
    @Binding var isPresented: Bool
    var onSave: () -> Void
    
    @State private var name: String
    @State private var rate: Double
    
    @ObservedObject var proposal: Proposal
    
    // Initialize with the current values
    init(customTax: CustomTax, proposal: Proposal, isPresented: Binding<Bool>, onSave: @escaping () -> Void) {
        self.customTax = customTax
        self.proposal = proposal
        self._isPresented = isPresented
        self.onSave = onSave
        
        _name = State(initialValue: customTax.name ?? "")
        _rate = State(initialValue: customTax.rate)
    }
    
    // Calculate the base amount on which tax applies
    private var subtotal: Double {
        return proposal.subtotalProducts + proposal.subtotalEngineering + proposal.subtotalExpenses
    }
    
    // Calculate the tax amount
    private var amount: Double {
        return subtotal * (rate / 100)
    }
    
    var body: some View {
        VStack(spacing: 0) {
            // Header
            HStack {
                Text("Edit Custom Tax")
                    .font(.headline)
                    .foregroundColor(.white)
                
                Spacer()
                
                Button(action: {
                    isPresented = false
                }) {
                    Image(systemName: "xmark.circle.fill")
                        .foregroundColor(.gray)
                }
            }
            .padding()
            .background(Color.black.opacity(0.8))
            
            // Tax name field
            VStack(alignment: .leading, spacing: 8) {
                Text("Tax Name:")
                    .foregroundColor(.white)
                
                TextField("", text: $name)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
                    .padding(.bottom, 10)
            }
            .padding(.horizontal)
            .padding(.top)
            
            // Tax presets
            ScrollView(.horizontal, showsIndicators: false) {
                HStack(spacing: 10) {
                    ForEach(["VAT", "GST", "Sales Tax", "Service Tax", "Import Tax"], id: \.self) { preset in
                        Button(action: {
                            name = preset
                        }) {
                            Text(preset)
                                .padding(.horizontal, 12)
                                .padding(.vertical, 6)
                                .background(name == preset ? Color.blue : Color.gray.opacity(0.3))
                                .foregroundColor(.white)
                                .cornerRadius(8)
                        }
                    }
                }
            }
            .padding(.horizontal)
            .padding(.vertical, 5)
            
            // Rate slider
            VStack(spacing: 5) {
                HStack {
                    Text("Rate:")
                        .foregroundColor(.white)
                    
                    Spacer()
                    
                    Text(String(format: "%.1f%%", rate))
                        .foregroundColor(.white)
                }
                
                Slider(value: $rate, in: 0...30, step: 0.5)
                    .accentColor(.blue)
            }
            .padding()
            
            // Common rates
            ScrollView(.horizontal, showsIndicators: false) {
                HStack(spacing: 10) {
                    ForEach([5.0, 10.0, 15.0, 18.0, 20.0], id: \.self) { preset in
                        Button(action: {
                            rate = preset
                        }) {
                            Text(String(format: "%.1f%%", preset))
                                .padding(.horizontal, 12)
                                .padding(.vertical, 6)
                                .background(rate == preset ? Color.blue : Color.gray.opacity(0.3))
                                .foregroundColor(.white)
                                .cornerRadius(8)
                        }
                    }
                }
            }
            .padding(.horizontal)
            
            // Base amount and calculated tax
            VStack(spacing: 10) {
                HStack {
                    Text("Subtotal:")
                        .foregroundColor(.white)
                    
                    Spacer()
                    
                    Text(String(format: "%.2f", subtotal))
                        .foregroundColor(.white)
                }
                
                HStack {
                    Text("Tax Amount:")
                        .foregroundColor(.white)
                        .fontWeight(.bold)
                    
                    Spacer()
                    
                    Text(String(format: "%.2f", amount))
                        .foregroundColor(.white)
                        .fontWeight(.bold)
                }
            }
            .padding()
            
            // Action buttons
            HStack {
                Button(action: {
                    isPresented = false
                }) {
                    Text("Cancel")
                        .foregroundColor(.white)
                        .padding(.vertical, 10)
                        .padding(.horizontal, 20)
                        .background(Color.gray.opacity(0.5))
                        .cornerRadius(8)
                }
                
                Spacer()
                
                Button(action: {
                    saveChanges()
                }) {
                    Text("Save")
                        .foregroundColor(.white)
                        .padding(.vertical, 10)
                        .padding(.horizontal, 20)
                        .background(Color.blue)
                        .cornerRadius(8)
                }
            }
            .padding()
        }
        .frame(width: 350)
        .background(Color.black.opacity(0.8))
        .cornerRadius(16)
        .shadow(radius: 10)
    }
    
    private func saveChanges() {
        customTax.name = name
        customTax.rate = rate
        customTax.amount = amount
        
        do {
            try viewContext.save()
            onSave()
            isPresented = false
        } catch {
            print("Error saving changes: \(error)")
        }
    }
}


/* ================================================== */
/* File: ./ProposalCRM/Views/Components/CustomTaxView.swift */
/* ================================================== */

// CustomTaxView.swift
// Add custom taxes to a proposal

import SwiftUI

struct CustomTaxView: View {
    @Environment(\.managedObjectContext) private var viewContext
    @Environment(\.presentationMode) var presentationMode
    
    @ObservedObject var proposal: Proposal
    
    @State private var name = ""
    @State private var rate = 0.0
    
    var subtotal: Double {
        return proposal.subtotalProducts + proposal.subtotalEngineering + proposal.subtotalExpenses
    }
    
    var amount: Double {
        return subtotal * (rate / 100)
    }
    
    var body: some View {
        NavigationView {
            Form {
                Section(header: Text("Custom Tax Details")) {
                    TextField("Tax Name", text: $name)
                    
                    HStack {
                        Text("Rate (%)")
                        Spacer()
                        Slider(value: $rate, in: 0...30, step: 0.5)
                        Text("\(rate, specifier: "%.1f")%")
                            .frame(width: 50)
                    }
                    
                    HStack {
                        Text("Subtotal")
                        Spacer()
                        Text(String(format: "%.2f", subtotal))
                    }
                    
                    HStack {
                        Text("Tax Amount")
                            .font(.headline)
                        Spacer()
                        Text(String(format: "%.2f", amount))
                            .font(.headline)
                    }
                }
            }
            .navigationTitle("Add Custom Tax")
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("Cancel") {
                        presentationMode.wrappedValue.dismiss()
                    }
                }
                
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Add") {
                        addCustomTax()
                    }
                    .disabled(name.isEmpty || rate <= 0)
                }
            }
        }
    }
    
    private func addCustomTax() {
        let tax = CustomTax(context: viewContext)
        tax.id = UUID()
        tax.name = name
        tax.rate = rate
        tax.amount = amount
        tax.proposal = proposal
        
        do {
            try viewContext.save()
            
            // Update proposal total
            updateProposalTotal()
            
            presentationMode.wrappedValue.dismiss()
        } catch {
            let nsError = error as NSError
            print("Error adding custom tax: \(nsError), \(nsError.userInfo)")
        }
    }
    
    private func updateProposalTotal() {
        // Calculate total amount
        let productsTotal = proposal.subtotalProducts
        let engineeringTotal = proposal.subtotalEngineering
        let expensesTotal = proposal.subtotalExpenses
        let taxesTotal = proposal.subtotalTaxes
        
        proposal.totalAmount = productsTotal + engineeringTotal + expensesTotal + taxesTotal
        
        do {
            try viewContext.save()
        } catch {
            let nsError = error as NSError
            print("Error updating proposal total: \(nsError), \(nsError.userInfo)")
        }
    }
}



/* ================================================== */
/* File: ./ProposalCRM/Views/Components/EditCustomTaxView.swift */
/* ================================================== */

//
//  EditCustomTaxView.swift
//  ProposalCRM
//
//  Created by Ali Sami Gözükırmızı on 19.04.2025.
//


// EditCustomTaxView.swift
// Edit view for custom tax entries

import SwiftUI
import CoreData

struct EditCustomTaxView: View {
    @Environment(\.managedObjectContext) private var viewContext
    @Environment(\.presentationMode) var presentationMode
    @ObservedObject var customTax: CustomTax
    @ObservedObject var proposal: Proposal
    
    @State private var name: String
    @State private var rate: Double
    
    init(customTax: CustomTax, proposal: Proposal) {
        self.customTax = customTax
        self.proposal = proposal
        _name = State(initialValue: customTax.name ?? "")
        _rate = State(initialValue: customTax.rate)
    }
    
    private var subtotal: Double {
        return proposal.subtotalProducts + proposal.subtotalEngineering + proposal.subtotalExpenses
    }
    
    private var amount: Double {
        return subtotal * (rate / 100)
    }
    
    var body: some View {
        Form {
            Section(header: Text("Tax Details")) {
                TextField("Tax Name", text: $name)
                
                // Common tax presets
                ScrollView(.horizontal, showsIndicators: false) {
                    HStack(spacing: 10) {
                        ForEach(["VAT", "GST", "Sales Tax", "Service Tax", "Import Tax"], id: \.self) { preset in
                            Button(action: {
                                name = preset
                            }) {
                                Text(preset)
                                    .padding(.horizontal, 10)
                                    .padding(.vertical, 5)
                                    .background(name == preset ? Color.blue : Color.gray.opacity(0.3))
                                    .foregroundColor(.white)
                                    .cornerRadius(8)
                            }
                        }
                    }
                }
                
                HStack {
                    Text("Rate (%)")
                    Spacer()
                    Slider(value: $rate, in: 0...30, step: 0.5)
                    Text("\(rate, specifier: "%.1f")%")
                        .frame(width: 50)
                }
                
                // Common rates
                ScrollView(.horizontal, showsIndicators: false) {
                    HStack(spacing: 10) {
                        ForEach([5.0, 7.5, 10.0, 15.0, 20.0], id: \.self) { preset in
                            Button(action: {
                                rate = preset
                            }) {
                                Text("\(preset, specifier: "%.1f")%")
                                    .padding(.horizontal, 10)
                                    .padding(.vertical, 5)
                                    .background(rate == preset ? Color.blue : Color.gray.opacity(0.3))
                                    .foregroundColor(.white)
                                    .cornerRadius(8)
                            }
                        }
                    }
                }
                
                HStack {
                    Text("Subtotal")
                    Spacer()
                    Text(String(format: "%.2f", subtotal))
                }
                
                HStack {
                    Text("Tax Amount")
                        .font(.headline)
                    Spacer()
                    Text(String(format: "%.2f", amount))
                        .font(.headline)
                }
            }
            
            Button("Save Changes") {
                saveChanges()
            }
            .frame(maxWidth: .infinity, alignment: .center)
        }
    }
    
    private func saveChanges() {
        customTax.name = name
        customTax.rate = rate
        customTax.amount = amount
        
        do {
            try viewContext.save()
            presentationMode.wrappedValue.dismiss()
        } catch {
            print("Error saving changes: \(error)")
        }
    }
}


/* ================================================== */
/* File: ./ProposalCRM/Views/Components/EditEngineeringView.swift */
/* ================================================== */

//
//  EditEngineeringView.swift
//  ProposalCRM
//
//  Created by Ali Sami Gözükırmızı on 19.04.2025.
//


// EditEngineeringView.swift
// Edit view for engineering entries

import SwiftUI
import CoreData

struct EditEngineeringView: View {
    @Environment(\.managedObjectContext) private var viewContext
    @Environment(\.presentationMode) var presentationMode
    @ObservedObject var engineering: Engineering
    
    @State private var description: String
    @State private var days: Double
    @State private var rate: Double
    
    init(engineering: Engineering) {
        self.engineering = engineering
        _description = State(initialValue: engineering.desc ?? "")
        _days = State(initialValue: engineering.days)
        _rate = State(initialValue: engineering.rate)
    }
    
    var amount: Double {
        return days * rate
    }
    
    var body: some View {
        Form {
            Section(header: Text("Engineering Details")) {
                TextField("Description", text: $description)
                
                Stepper(value: $days, in: 0.5...100, step: 0.5) {
                    HStack {
                        Text("Days")
                        Spacer()
                        Text(String(format: "%.1f", days))
                    }
                }
                
                HStack {
                    Text("Day Rate")
                    Spacer()
                    TextField("Rate", value: $rate, formatter: NumberFormatter())
                        .keyboardType(.decimalPad)
                        .multilineTextAlignment(.trailing)
                        .frame(width: 100)
                }
                
                HStack {
                    Text("Total Amount")
                        .font(.headline)
                    Spacer()
                    Text(String(format: "%.2f", amount))
                        .font(.headline)
                }
            }
            
            Button("Save Changes") {
                saveChanges()
            }
            .frame(maxWidth: .infinity, alignment: .center)
        }
    }
    
    private func saveChanges() {
        engineering.desc = description
        engineering.days = days
        engineering.rate = rate
        engineering.amount = amount
        
        do {
            try viewContext.save()
            presentationMode.wrappedValue.dismiss()
        } catch {
            print("Error saving changes: \(error)")
        }
    }
}


/* ================================================== */
/* File: ./ProposalCRM/Views/Components/EditExpenseView.swift */
/* ================================================== */

//
//  EditExpenseView.swift
//  ProposalCRM
//
//  Created by Ali Sami Gözükırmızı on 19.04.2025.
//


// EditExpenseView.swift
// Edit view for expense entries

import SwiftUI
import CoreData

struct EditExpenseView: View {
    @Environment(\.managedObjectContext) private var viewContext
    @Environment(\.presentationMode) var presentationMode
    @ObservedObject var expense: Expense
    
    @State private var description: String
    @State private var amount: Double
    
    init(expense: Expense) {
        self.expense = expense
        _description = State(initialValue: expense.desc ?? "")
        _amount = State(initialValue: expense.amount)
    }
    
    var body: some View {
        Form {
            Section(header: Text("Expense Details")) {
                TextField("Description", text: $description)
                
                HStack {
                    Text("Amount")
                    Spacer()
                    TextField("Amount", value: $amount, formatter: NumberFormatter())
                        .keyboardType(.decimalPad)
                        .multilineTextAlignment(.trailing)
                        .frame(width: 100)
                }
                
                // Common expense presets
                ScrollView(.horizontal, showsIndicators: false) {
                    HStack(spacing: 10) {
                        ForEach([100.0, 200.0, 500.0, 1000.0, 1500.0], id: \.self) { preset in
                            Button(action: {
                                amount = preset
                            }) {
                                Text(String(format: "%.0f", preset))
                                    .padding(.horizontal, 12)
                                    .padding(.vertical, 6)
                                    .background(amount == preset ? Color.blue : Color.gray.opacity(0.3))
                                    .foregroundColor(.white)
                                    .cornerRadius(8)
                            }
                        }
                    }
                }
            }
            
            Button("Save Changes") {
                saveChanges()
            }
            .frame(maxWidth: .infinity, alignment: .center)
        }
    }
    
    private func saveChanges() {
        expense.desc = description
        expense.amount = amount
        
        do {
            try viewContext.save()
            presentationMode.wrappedValue.dismiss()
        } catch {
            print("Error saving changes: \(error)")
        }
    }
}


/* ================================================== */
/* File: ./ProposalCRM/Views/Components/EngineeringEditMenu.swift */
/* ================================================== */

//
//  EngineeringEditMenu.swift
//  ProposalCRM
//
//  Created by Ali Sami Gözükırmızı on 19.04.2025.
//


// EngineeringEditMenu.swift
// Popup menu for editing engineering entries inline

import SwiftUI
import CoreData

struct EngineeringEditMenu: View {
    @Environment(\.managedObjectContext) private var viewContext
    @ObservedObject var engineering: Engineering
    @Binding var isPresented: Bool
    var onSave: () -> Void
    
    @State private var description: String
    @State private var days: Double
    @State private var rate: Double
    
    // Initialize with the current values
    init(engineering: Engineering, isPresented: Binding<Bool>, onSave: @escaping () -> Void) {
        self.engineering = engineering
        self._isPresented = isPresented
        self.onSave = onSave
        
        _description = State(initialValue: engineering.desc ?? "")
        _days = State(initialValue: engineering.days)
        _rate = State(initialValue: engineering.rate)
    }
    
    private var amount: Double {
        return days * rate
    }
    
    var body: some View {
        VStack(spacing: 0) {
            // Header
            HStack {
                Text("Edit Engineering")
                    .font(.headline)
                    .foregroundColor(.white)
                
                Spacer()
                
                Button(action: {
                    isPresented = false
                }) {
                    Image(systemName: "xmark.circle.fill")
                        .foregroundColor(.gray)
                }
            }
            .padding()
            .background(Color.black.opacity(0.8))
            
            // Description field
            VStack(alignment: .leading, spacing: 8) {
                Text("Description:")
                    .foregroundColor(.white)
                
                TextField("", text: $description)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
                    .padding(.bottom, 10)
            }
            .padding(.horizontal)
            .padding(.top)
            
            // Days control
            HStack {
                Text("Days:")
                    .foregroundColor(.white)
                
                Spacer()
                
                HStack(spacing: 15) {
                    Button(action: {
                        if days > 0.5 {
                            days -= 0.5
                        }
                    }) {
                        Image(systemName: "minus.circle")
                            .foregroundColor(.white)
                            .font(.title3)
                    }
                    
                    Text(String(format: "%.1f", days))
                        .foregroundColor(.white)
                        .font(.title3)
                        .frame(minWidth: 40)
                    
                    Button(action: {
                        days += 0.5
                    }) {
                        Image(systemName: "plus.circle")
                            .foregroundColor(.white)
                            .font(.title3)
                    }
                }
            }
            .padding()
            
            // Rate field
            HStack {
                Text("Daily Rate:")
                    .foregroundColor(.white)
                
                Spacer()
                
                TextField("", value: $rate, formatter: NumberFormatter())
                    .keyboardType(.decimalPad)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
                    .frame(width: 100)
            }
            .padding(.horizontal)
            
            // Amount (calculated)
            HStack {
                Text("Total Amount:")
                    .foregroundColor(.white)
                    .fontWeight(.bold)
                
                Spacer()
                
                Text(String(format: "%.2f", amount))
                    .foregroundColor(.white)
                    .fontWeight(.bold)
            }
            .padding()
            
            // Action buttons
            HStack {
                Button(action: {
                    isPresented = false
                }) {
                    Text("Cancel")
                        .foregroundColor(.white)
                        .padding(.vertical, 10)
                        .padding(.horizontal, 20)
                        .background(Color.gray.opacity(0.5))
                        .cornerRadius(8)
                }
                
                Spacer()
                
                Button(action: {
                    saveChanges()
                }) {
                    Text("Save")
                        .foregroundColor(.white)
                        .padding(.vertical, 10)
                        .padding(.horizontal, 20)
                        .background(Color.blue)
                        .cornerRadius(8)
                }
            }
            .padding()
        }
        .frame(width: 350)
        .background(Color.black.opacity(0.8))
        .cornerRadius(16)
        .shadow(radius: 10)
    }
    
    private func saveChanges() {
        engineering.desc = description
        engineering.days = days
        engineering.rate = rate
        engineering.amount = amount
        
        do {
            try viewContext.save()
            onSave()
            isPresented = false
        } catch {
            print("Error saving changes: \(error)")
        }
    }
}


/* ================================================== */
/* File: ./ProposalCRM/Views/Components/EngineeringView.swift */
/* ================================================== */

//
//  EngineeringView.swift
//  ProposalCRM
//
//  Created by Ali Sami Gözükırmızı on 19.04.2025.
//


// EngineeringView.swift
// View for adding new engineering entries

import SwiftUI
import CoreData

struct EngineeringView: View {
    @Environment(\.managedObjectContext) private var viewContext
    @Environment(\.presentationMode) var presentationMode
    
    @ObservedObject var proposal: Proposal
    
    @State private var description = ""
    @State private var days = 1.0
    @State private var rate = 800.0
    
    var amount: Double {
        return days * rate
    }
    
    var body: some View {
        NavigationView {
            Form {
                Section(header: Text("Engineering Details")) {
                    TextField("Description", text: $description)
                    
                    // Fixed Days control with proper state updates
                    HStack {
                        Text("Days")
                        Spacer()
                        
                        // Improve button hit targets and add state update
                        HStack(spacing: 12) {
                            Button(action: {
                                withAnimation {
                                    if days > 0.5 {
                                        days -= 0.5
                                    }
                                }
                            }) {
                                Image(systemName: "minus")
                                    .frame(width: 32, height: 32)
                                    .background(Color.gray.opacity(0.2))
                                    .clipShape(Circle())
                            }
                            .buttonStyle(BorderlessButtonStyle()) // Important for nested buttons
                            
                            Text(String(format: "%.1f", days))
                                .frame(minWidth: 40, alignment: .center)
                            
                            Button(action: {
                                withAnimation {
                                    days += 0.5
                                }
                            }) {
                                Image(systemName: "plus")
                                    .frame(width: 32, height: 32)
                                    .background(Color.gray.opacity(0.2))
                                    .clipShape(Circle())
                            }
                            .buttonStyle(BorderlessButtonStyle()) // Important for nested buttons
                        }
                    }
                    
                    HStack {
                        Text("Day Rate")
                        Spacer()
                        TextField("Rate", value: $rate, formatter: NumberFormatter())
                            .keyboardType(.decimalPad)
                            .multilineTextAlignment(.trailing)
                            .frame(width: 100)
                    }
                    
                    HStack {
                        Text("Total Amount")
                            .font(.headline)
                        Spacer()
                        Text(String(format: "%.2f", amount))
                            .font(.headline)
                    }
                }
            }
            .navigationTitle("Add Engineering")
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("Cancel") {
                        presentationMode.wrappedValue.dismiss()
                    }
                }
                
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Add") {
                        addEngineering()
                    }
                    .disabled(days <= 0 || rate <= 0)
                }
            }
        }
    }
    
    private func addEngineering() {
        let engineering = Engineering(context: viewContext)
        engineering.id = UUID()
        engineering.desc = description
        engineering.days = days
        engineering.rate = rate
        engineering.amount = amount
        engineering.proposal = proposal
        
        do {
            try viewContext.save()
            updateProposalTotal()
            presentationMode.wrappedValue.dismiss()
        } catch {
            let nsError = error as NSError
            print("Error adding engineering: \(nsError), \(nsError.userInfo)")
        }
    }
    
    private func updateProposalTotal() {
        let productsTotal = proposal.subtotalProducts
        let engineeringTotal = proposal.subtotalEngineering
        let expensesTotal = proposal.subtotalExpenses
        let taxesTotal = proposal.subtotalTaxes
        
        proposal.totalAmount = productsTotal + engineeringTotal + expensesTotal + taxesTotal
        
        do {
            try viewContext.save()
        } catch {
            let nsError = error as NSError
            print("Error updating proposal total: \(nsError), \(nsError.userInfo)")
        }
    }
}



/* ================================================== */
/* File: ./ProposalCRM/Views/Components/ExpensesEditMenu.swift */
/* ================================================== */

//
//  ExpensesEditMenu.swift
//  ProposalCRM
//
//  Created by Ali Sami Gözükırmızı on 19.04.2025.
//


// ExpensesEditMenu.swift
// Popup menu for editing expense entries inline

import SwiftUI
import CoreData

struct ExpensesEditMenu: View {
    @Environment(\.managedObjectContext) private var viewContext
    @ObservedObject var expense: Expense
    @Binding var isPresented: Bool
    var onSave: () -> Void
    
    @State private var description: String
    @State private var amount: Double
    
    // Initialize with the current values
    init(expense: Expense, isPresented: Binding<Bool>, onSave: @escaping () -> Void) {
        self.expense = expense
        self._isPresented = isPresented
        self.onSave = onSave
        
        _description = State(initialValue: expense.desc ?? "")
        _amount = State(initialValue: expense.amount)
    }
    
    var body: some View {
        VStack(spacing: 0) {
            // Header
            HStack {
                Text("Edit Expense")
                    .font(.headline)
                    .foregroundColor(.white)
                
                Spacer()
                
                Button(action: {
                    isPresented = false
                }) {
                    Image(systemName: "xmark.circle.fill")
                        .foregroundColor(.gray)
                }
            }
            .padding()
            .background(Color.black.opacity(0.8))
            
            // Description field
            VStack(alignment: .leading, spacing: 8) {
                Text("Description:")
                    .foregroundColor(.white)
                
                TextField("", text: $description)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
                    .padding(.bottom, 10)
            }
            .padding(.horizontal)
            .padding(.top)
            
            // Common expense presets
            ScrollView(.horizontal, showsIndicators: false) {
                HStack(spacing: 10) {
                    ForEach(["Travel", "Accommodation", "Food", "Equipment", "Supplies"], id: \.self) { preset in
                        Button(action: {
                            description = preset
                        }) {
                            Text(preset)
                                .padding(.horizontal, 12)
                                .padding(.vertical, 6)
                                .background(description == preset ? Color.blue : Color.gray.opacity(0.3))
                                .foregroundColor(.white)
                                .cornerRadius(8)
                        }
                    }
                }
            }
            .padding(.horizontal)
            .padding(.vertical, 5)
            
            // Amount field
            HStack {
                Text("Amount:")
                    .foregroundColor(.white)
                
                Spacer()
                
                TextField("", value: $amount, formatter: NumberFormatter())
                    .keyboardType(.decimalPad)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
                    .frame(width: 100)
            }
            .padding()
            
            // Common amounts
            ScrollView(.horizontal, showsIndicators: false) {
                HStack(spacing: 10) {
                    ForEach([100.0, 200.0, 500.0, 1000.0, 1500.0], id: \.self) { preset in
                        Button(action: {
                            amount = preset
                        }) {
                            Text(String(format: "%.0f", preset))
                                .padding(.horizontal, 12)
                                .padding(.vertical, 6)
                                .background(amount == preset ? Color.blue : Color.gray.opacity(0.3))
                                .foregroundColor(.white)
                                .cornerRadius(8)
                        }
                    }
                }
            }
            .padding(.horizontal)
            
            // Action buttons
            HStack {
                Button(action: {
                    isPresented = false
                }) {
                    Text("Cancel")
                        .foregroundColor(.white)
                        .padding(.vertical, 10)
                        .padding(.horizontal, 20)
                        .background(Color.gray.opacity(0.5))
                        .cornerRadius(8)
                }
                
                Spacer()
                
                Button(action: {
                    saveChanges()
                }) {
                    Text("Save")
                        .foregroundColor(.white)
                        .padding(.vertical, 10)
                        .padding(.horizontal, 20)
                        .background(Color.blue)
                        .cornerRadius(8)
                }
            }
            .padding()
        }
        .frame(width: 350)
        .background(Color.black.opacity(0.8))
        .cornerRadius(16)
        .shadow(radius: 10)
    }
    
    private func saveChanges() {
        expense.desc = description
        expense.amount = amount
        
        do {
            try viewContext.save()
            onSave()
            isPresented = false
        } catch {
            print("Error saving changes: \(error)")
        }
    }
}


/* ================================================== */
/* File: ./ProposalCRM/Views/Components/ExpensesView.swift */
/* ================================================== */

import SwiftUI

struct ExpensesView: View {
    @Environment(\.managedObjectContext) private var viewContext
    @Environment(\.presentationMode) var presentationMode
    
    @ObservedObject var proposal: Proposal
    
    @State private var description = ""
    @State private var amount = 0.0
    @State private var showingPresets = false
    
    // Common expense presets
    let expensePresets = [
        "Accommodation",
        "Food",
        "Travel",
        "Hotel Night",
        "Transportation",
        "Equipment Rental",
        "Office Supplies",
        "Meeting Room",
        "Internet/Communication",
        "Marketing Materials"
    ]
    
    var body: some View {
        NavigationView {
            Form {
                Section(header: Text("EXPENSE DETAILS")) {
                    TextField("Description", text: $description)
                        .overlay(
                            Button(action: {
                                showingPresets.toggle()
                            }) {
                                Image(systemName: "chevron.down")
                                    .foregroundColor(.gray)
                            }
                            .padding(.trailing, 8),
                            alignment: .trailing
                        )
                    
                    if showingPresets {
                        ScrollView {
                            VStack(alignment: .leading, spacing: 12) {
                                ForEach(expensePresets, id: \.self) { preset in
                                    Button(action: {
                                        description = preset
                                        showingPresets = false
                                    }) {
                                        HStack {
                                            Image(systemName: "tag")
                                                .foregroundColor(.blue)
                                            Text(preset)
                                                .foregroundColor(.primary)
                                            Spacer()
                                        }
                                        .padding(.vertical, 8)
                                        .padding(.horizontal, 12)
                                        .background(Color.gray.opacity(0.1))
                                        .cornerRadius(8)
                                    }
                                }
                            }
                            .padding(.vertical, 8)
                        }
                        .frame(height: 200)
                    }
                    
                    HStack {
                        Text("Amount")
                        Spacer()
                        TextField("Amount", value: $amount, formatter: NumberFormatter())
                            .keyboardType(.decimalPad)
                            .multilineTextAlignment(.trailing)
                            .frame(width: 100)
                    }
                    
                    // Common expense amount presets
                    ScrollView(.horizontal, showsIndicators: false) {
                        HStack(spacing: 10) {
                            ForEach([100.0, 150.0, 200.0, 250.0, 300.0, 500.0, 1000.0], id: \.self) { value in
                                Button(action: {
                                    amount = value
                                }) {
                                    Text("\(Int(value))")
                                        .padding(.horizontal, 12)
                                        .padding(.vertical, 6)
                                        .background(amount == value ? Color.blue : Color.gray.opacity(0.2))
                                        .foregroundColor(amount == value ? .white : .primary)
                                        .cornerRadius(12)
                                }
                            }
                        }
                        .padding(.vertical, 8)
                    }
                }
                
                Section(header: Text("Suggested Expenses")) {
                    Button(action: {
                        description = "Accommodation"
                        amount = 200.0
                    }) {
                        HStack {
                            Image(systemName: "bed.double.fill")
                                .foregroundColor(.orange)
                            Text("Accommodation")
                            Spacer()
                            Text("$200.00")
                                .foregroundColor(.secondary)
                        }
                    }
                    
                    Button(action: {
                        description = "Food"
                        amount = 100.0
                    }) {
                        HStack {
                            Image(systemName: "fork.knife")
                                .foregroundColor(.green)
                            Text("Food")
                            Spacer()
                            Text("$100.00")
                                .foregroundColor(.secondary)
                        }
                    }
                    
                    Button(action: {
                        description = "Travel"
                        amount = 300.0
                    }) {
                        HStack {
                            Image(systemName: "airplane")
                                .foregroundColor(.blue)
                            Text("Travel")
                            Spacer()
                            Text("$300.00")
                                .foregroundColor(.secondary)
                        }
                    }
                    
                    Button(action: {
                        description = "Hotel Night"
                        amount = 150.0
                    }) {
                        HStack {
                            Image(systemName: "building.2.fill")
                                .foregroundColor(.purple)
                            Text("Hotel Night")
                            Spacer()
                            Text("$150.00")
                                .foregroundColor(.secondary)
                        }
                    }
                }
            }
            .navigationTitle("Add Expense")
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("Cancel") {
                        presentationMode.wrappedValue.dismiss()
                    }
                }
                
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Add") {
                        addExpense()
                    }
                    .disabled(description.isEmpty || amount <= 0)
                }
            }
        }
    }
    
    private func addExpense() {
        let expense = Expense(context: viewContext)
        expense.id = UUID()
        expense.desc = description
        expense.amount = amount
        expense.proposal = proposal
        
        do {
            try viewContext.save()
            
            // Update proposal total
            updateProposalTotal()
            
            presentationMode.wrappedValue.dismiss()
        } catch {
            let nsError = error as NSError
            print("Error adding expense: \(nsError), \(nsError.userInfo)")
        }
    }
    
    private func updateProposalTotal() {
        // Calculate total amount
        let productsTotal = proposal.subtotalProducts
        let engineeringTotal = proposal.subtotalEngineering
        let expensesTotal = proposal.subtotalExpenses
        let taxesTotal = proposal.subtotalTaxes
        
        proposal.totalAmount = productsTotal + engineeringTotal + expensesTotal + taxesTotal
        
        do {
            try viewContext.save()
        } catch {
            let nsError = error as NSError
            print("Error updating proposal total: \(nsError), \(nsError.userInfo)")
        }
    }
}

// Also update the EditExpenseView to have similar features



/* ================================================== */
/* File: ./ProposalCRM/Views/Components/FinancialSummaryView.swift */
/* ================================================== */

import SwiftUI
import CoreData
import Charts

struct FinancialSummaryView: View {
    @Environment(\.managedObjectContext) private var viewContext
    @FetchRequest(
        sortDescriptors: [NSSortDescriptor(keyPath: \Proposal.creationDate, ascending: false)],
        animation: .default)
    private var proposals: FetchedResults<Proposal>
    
    @State private var selectedTimePeriod = "All Time"
    
    let timePeriods = ["Last Month", "Last 3 Months", "Last 6 Months", "Last Year", "All Time"]
    private let statuses = ["Draft", "Pending", "Sent", "Won", "Lost"]
    
    var body: some View {
        ScrollView {
            VStack(spacing: 20) {
                // Time period picker
                Picker("Time Period", selection: $selectedTimePeriod) {
                    ForEach(timePeriods, id: \.self) { period in
                        Text(period).tag(period)
                    }
                }
                .pickerStyle(SegmentedPickerStyle())
                .padding(.horizontal)
                
                // Chart: Proposal Value by Status
                VStack(alignment: .leading, spacing: 8) {
                    Text("Proposal Value by Status")
                        .font(.headline)
                        .padding(.horizontal)
                    
                    Chart {
                        ForEach(statuses, id: \.self) { status in
                            BarMark(
                                x: .value("Status", status),
                                y: .value("Total Value", proposalValueByStatus(status))
                            )
                        }
                    }
                    .chartYAxis {
                        AxisMarks(position: .leading)
                    }
                    .frame(height: 200)
                    .padding(.horizontal)
                }
                
                // Status Overview Cards
                VStack(alignment: .leading, spacing: 10) {
                    Text("Proposal Status Overview")
                        .font(.title2)
                        .fontWeight(.bold)
                        .padding(.horizontal)
                    
                    ScrollView(.horizontal, showsIndicators: false) {
                        HStack(spacing: 15) {
                            ForEach(statuses, id: \.self) { status in
                                StatusCardView(
                                    title: status,
                                    count: proposalCountByStatus(status),
                                    value: proposalValueByStatus(status),
                                    color: colorForStatus(status)
                                )
                            }
                        }
                        .padding(.horizontal)
                    }
                }
                
                // Financial Summary Cards
                VStack(alignment: .leading, spacing: 10) {
                    Text("Financial Summary")
                        .font(.title2)
                        .fontWeight(.bold)
                        .padding(.horizontal)
                    
                    VStack(spacing: 15) {
                        SummaryCardView(
                            title: "Total Proposed",
                            value: totalProposedAmount(),
                            subtitle: "\(filteredProposals.count) proposals",
                            color: .blue,
                            icon: "doc.text"
                        )
                        
                        SummaryCardView(
                            title: "Won Revenue",
                            value: proposalValueByStatus("Won"),
                            subtitle: "Success Rate: \(String(format: "%.1f%%", successRate()))",
                            color: .green,
                            icon: "checkmark.circle"
                        )
                        
                        SummaryCardView(
                            title: "Average Proposal Value",
                            value: averageProposalValue(),
                            subtitle: "Median: \(String(format: "%.2f", medianProposalValue()))",
                            color: .purple,
                            icon: "chart.bar"
                        )
                        
                        SummaryCardView(
                            title: "Average Profit Margin",
                            value: averageProfitMargin(),
                            valueFormat: "%.1f%%",
                            subtitle: "Total Profit: \(String(format: "%.2f", totalProfit()))",
                            color: .orange,
                            icon: "chart.pie"
                        )
                    }
                    .padding(.horizontal)
                }
            }
            .padding(.vertical)
        }
        .navigationTitle("Financial Dashboard")
    }
    
    // MARK: - Helpers
    
    private func colorForStatus(_ status: String) -> Color {
        switch status {
        case "Draft": return .gray
        case "Pending": return .orange
        case "Sent": return .blue
        case "Won": return .green
        case "Lost": return .red
        default: return .secondary
        }
    }
    
    var filteredProposals: [Proposal] {
        let all = Array(proposals)
        guard selectedTimePeriod != "All Time" else { return all }
        let cal = Calendar.current
        let now = Date()
        let cutoff: Date? = {
            switch selectedTimePeriod {
            case "Last Month":   return cal.date(byAdding: .month, value: -1, to: now)
            case "Last 3 Months":return cal.date(byAdding: .month, value: -3, to: now)
            case "Last 6 Months":return cal.date(byAdding: .month, value: -6, to: now)
            case "Last Year":    return cal.date(byAdding: .year,  value: -1, to: now)
            default: return nil
            }
        }()
        if let cutoff = cutoff {
            return all.filter { $0.creationDate ?? Date() >= cutoff }
        }
        return all
    }
    
    private func proposalCountByStatus(_ status: String) -> Int {
        filteredProposals.filter { $0.status == status }.count
    }
    
    private func proposalValueByStatus(_ status: String) -> Double {
        filteredProposals
            .filter { $0.status == status }
            .reduce(0) { $0 + $1.totalAmount }
    }
    
    private func totalProposedAmount() -> Double {
        filteredProposals.reduce(0) { $0 + $1.totalAmount }
    }
    
    private func averageProposalValue() -> Double {
        let vals = filteredProposals.map { $0.totalAmount }
        guard !vals.isEmpty else { return 0 }
        return vals.reduce(0, +) / Double(vals.count)
    }
    
    private func medianProposalValue() -> Double {
        let vals = filteredProposals.map { $0.totalAmount }.sorted()
        guard !vals.isEmpty else { return 0 }
        let mid = vals.count / 2
        return vals.count.isMultiple(of: 2)
            ? (vals[mid - 1] + vals[mid]) / 2
            : vals[mid]
    }
    
    private func totalProfit() -> Double {
        filteredProposals.reduce(0) {
            $0 + ($1.totalAmount - $1.totalCost)
        }
    }
    
    private func averageProfitMargin() -> Double {
        let margins = filteredProposals.map { $0.profitMargin }
        guard !margins.isEmpty else { return 0 }
        return margins.reduce(0, +) / Double(margins.count)
    }
    
    private func successRate() -> Double {
        guard !filteredProposals.isEmpty else { return 0 }
        let won = proposalCountByStatus("Won")
        return (Double(won) / Double(filteredProposals.count)) * 100
    }
}



/* ================================================== */
/* File: ./ProposalCRM/Views/Components/ItemSelectionView.swift */
/* ================================================== */


// ItemSelectionView.swift
// Select products to add to a proposal with enhanced calculations and search functionality

import SwiftUI
import CoreData

struct ItemSelectionView: View {
    @Environment(\.managedObjectContext) private var viewContext
    @Environment(\.presentationMode) var presentationMode
    
    @ObservedObject var proposal: Proposal
    
    @FetchRequest(
        sortDescriptors: [NSSortDescriptor(keyPath: \Product.name, ascending: true)],
        animation: .default)
    private var products: FetchedResults<Product>
    
    @State private var searchText = ""
    @State private var selectedCategory: String? = nil
    @State private var selectedProducts: Set<UUID> = []
    @State private var quantities: [UUID: Double] = [:]
    @State private var discounts: [UUID: Double] = [:]
    @State private var multipliers: [UUID: Double] = [:]
    @State private var applyCustomTax: [UUID: Bool] = [:]
    @State private var customDescriptions: [UUID: String] = [:]
    
    var categories: [String] {
        let categorySet = Set(products.compactMap { $0.category })
        return Array(categorySet).sorted()
    }
    
    var body: some View {
        NavigationView {
            VStack {
                // Search bar - New addition
                HStack {
                    Image(systemName: "magnifyingglass")
                        .foregroundColor(.secondary)
                    
                    TextField("Search Products", text: $searchText)
                        .textFieldStyle(RoundedBorderTextFieldStyle())
                }
                .padding(.horizontal)
                .padding(.top, 10)
                
                // Category filter
                ScrollView(.horizontal, showsIndicators: false) {
                    HStack {
                        Button(action: { selectedCategory = nil }) {
                            Text("All")
                                .padding(.horizontal, 12)
                                .padding(.vertical, 8)
                                .background(selectedCategory == nil ? Color.blue : Color.gray.opacity(0.2))
                                .foregroundColor(selectedCategory == nil ? .white : .primary)
                                .cornerRadius(20)
                        }
                        
                        ForEach(categories, id: \.self) { category in
                            Button(action: { selectedCategory = category }) {
                                Text(category)
                                    .padding(.horizontal, 12)
                                    .padding(.vertical, 8)
                                    .background(selectedCategory == category ? Color.blue : Color.gray.opacity(0.2))
                                    .foregroundColor(selectedCategory == category ? .white : .primary)
                                    .cornerRadius(20)
                            }
                        }
                    }
                    .padding(.horizontal)
                }
                .padding(.vertical, 8)
                
                List {
                    ForEach(filteredProducts, id: \.self) { product in
                        HStack {
                            Button(action: {
                                toggleProductSelection(product)
                            }) {
                                HStack {
                                    Image(systemName: isSelected(product) ? "checkmark.square.fill" : "square")
                                        .foregroundColor(isSelected(product) ? .blue : .gray)
                                    
                                    VStack(alignment: .leading, spacing: 4) {
                                        Text(product.formattedName)
                                            .font(.headline)
                                            .lineLimit(1)
                                        
                                        // Show product description if available
                                        if let description = product.desc, !description.isEmpty {
                                            Text(description)
                                                .font(.caption)
                                                .foregroundColor(.secondary)
                                                .lineLimit(1)
                                        }
                                        
                                        HStack {
                                            Text(product.formattedCode)
                                                .font(.caption)
                                                .foregroundColor(.secondary)
                                                .padding(3)
                                                .background(Color.gray.opacity(0.1))
                                                .cornerRadius(4)
                                            
                                            Spacer()
                                            
                                            Text(String(format: "%.2f", product.listPrice))
                                                .font(.subheadline)
                                                .foregroundColor(.blue)
                                                .fontWeight(.semibold)
                                        }
                                    }
                                }
                            }
                            .buttonStyle(PlainButtonStyle())
                            
                                                                        if isSelected(product) {
                                HStack {
                                    Text("Qty:")
                                        .foregroundColor(.secondary)
                                        
                                    // Number input field for quantity
                                    TextField("1",
                                        text: Binding(
                                            get: { String(format: "%d", Int(self.quantities[product.id!] ?? 1)) },
                                            set: { if let value = Double($0), value >= 1 && value <= 100 {
                                                self.quantities[product.id!] = value
                                            }}
                                        )
                                    )
                                    .keyboardType(.numberPad)
                                    .multilineTextAlignment(.center)
                                    .frame(width: 50)
                                    .padding(4)
                                    .background(Color(UIColor.secondarySystemBackground))
                                    .cornerRadius(8)
                                    
                                    // Keep the stepper for easy adjustment
                                    Stepper("",
                                        value: Binding(
                                            get: { self.quantities[product.id!] ?? 1 },
                                            set: { self.quantities[product.id!] = $0 }
                                        ),
                                        in: 1...100
                                    )
                                }
                                .frame(width: 150)
                            }
                        }
                    }
                }
                
                // Selected products
                if !selectedProducts.isEmpty {
                    VStack {
                        Text("Selected Products (\(selectedProducts.count))")
                            .font(.headline)
                            .padding(.top)
                        
                        Divider()
                        
                        ScrollView {
                            VStack(spacing: 12) {
                                ForEach(selectedProductsArray(), id: \.self) { product in
                                    VStack {
                                        // Enhanced product name and description display
                                        VStack(alignment: .leading, spacing: 4) {
                                            Text(product.formattedName)
                                                .font(.headline)
                                                .fontWeight(.bold)
                                            
                                            if let description = product.desc, !description.isEmpty {
                                                Text(description)
                                                    .font(.subheadline)
                                                    .foregroundColor(.secondary)
                                                    .lineLimit(2)
                                                    .padding(.bottom, 2)
                                            }
                                        }
                                        .frame(maxWidth: .infinity, alignment: .leading)
                                        
                                        HStack {
                                            Text("Qty:")
                                                .font(.body)
                                                .foregroundColor(.secondary)
                                            
                                            // Number entry for quantity
                                            TextField("1",
                                                text: Binding(
                                                    get: { String(format: "%d", Int(self.quantities[product.id!] ?? 1)) },
                                                    set: { if let value = Double($0), value >= 1 && value <= 100 {
                                                        self.quantities[product.id!] = value
                                                    }}
                                                )
                                            )
                                            .keyboardType(.numberPad)
                                            .multilineTextAlignment(.center)
                                            .frame(width: 50)
                                            .padding(4)
                                            .background(Color(UIColor.secondarySystemBackground))
                                            .cornerRadius(8)
                                            
                                            Spacer()
                                            
                                            Text(product.formattedCode)
                                                .font(.caption)
                                                .foregroundColor(.secondary)
                                                .padding(3)
                                                .background(Color.gray.opacity(0.1))
                                                .cornerRadius(4)
                                        }
                                        
                                        HStack {
                                            Text("Discount %:")
                                            
                                            Slider(
                                                value: Binding(
                                                    get: { self.discounts[product.id!] ?? 0 },
                                                    set: { self.discounts[product.id!] = $0 }
                                                ),
                                                in: 0...50,
                                                step: 1
                                            )
                                            
                                            Text("\(Int(discounts[product.id!] ?? 0))%")
                                                .frame(width: 50, alignment: .trailing)
                                        }
                                        
                                        // Multiplier as number entry box instead of slider
                                        HStack {
                                            Text("Multiplier:")
                                            
                                            Spacer()
                                            
                                            // Number entry box for multiplier
                                            HStack {
                                                TextField("1.00",
                                                    text: Binding(
                                                        get: { String(format: "%.2f", self.multipliers[product.id!] ?? 1.0) },
                                                        set: { if let value = Double($0), value >= 0.5 && value <= 2.0 {
                                                            self.multipliers[product.id!] = value
                                                        }}
                                                    )
                                                )
                                                .keyboardType(.decimalPad)
                                                .multilineTextAlignment(.trailing)
                                                .frame(width: 80)
                                                .padding(6)
                                                .background(Color(UIColor.secondarySystemBackground))
                                                .cornerRadius(8)
                                                
                                                Text("x")
                                                    .foregroundColor(.secondary)
                                            }
                                        }
                                        
                                        // Custom description field
                                        VStack(alignment: .leading) {
                                            Text("Custom Description:")
                                                .font(.caption)
                                                .foregroundColor(.secondary)
                                            
                                            TextField("Enter custom description", text: Binding(
                                                get: { self.customDescriptions[product.id!] ?? "" },
                                                set: { self.customDescriptions[product.id!] = $0 }
                                            ))
                                            .padding(8)
                                            .background(Color(UIColor.secondarySystemBackground))
                                            .cornerRadius(8)
                                        }
                                        
                                        // New custom tax checkbox
                                        Toggle("Apply Custom Tax", isOn: Binding(
                                            get: { self.applyCustomTax[product.id!] ?? false },
                                            set: { self.applyCustomTax[product.id!] = $0 }
                                        ))
                                        
                                        Divider()
                                        
                                        // Pricing summary
                                        Group {
                                            HStack {
                                                Text("Unit List: \(String(format: "%.2f", product.listPrice))")
                                                    .font(.subheadline)
                                                
                                                Spacer()
                                                
                                                Text("Unit Partner: \(String(format: "%.2f", product.partnerPrice))")
                                                    .font(.subheadline)
                                                    .foregroundColor(.blue)
                                            }
                                            
                                            HStack {
                                                Text("Extended List: \(String(format: "%.2f", calculateExtendedListPrice(for: product)))")
                                                    .font(.subheadline)
                                                
                                                Spacer()
                                                
                                                Text("Extended Partner: \(String(format: "%.2f", calculateExtendedPartnerPrice(for: product)))")
                                                    .font(.subheadline)
                                                    .foregroundColor(.blue)
                                            }
                                            
                                            HStack {
                                                Text("Customer Price: \(String(format: "%.2f", calculateExtendedCustomerPrice(for: product)))")
                                                    .font(.headline)
                                                
                                                Spacer()
                                                
                                                Text("Profit: \(String(format: "%.2f", calculateTotalProfit(for: product)))")
                                                    .font(.headline)
                                                    .foregroundColor(calculateTotalProfit(for: product) > 0 ? .green : .red)
                                            }
                                        }
                                    }
                                    .padding()
                                    .background(Color.gray.opacity(0.1))
                                    .cornerRadius(8)
                                }
                            }
                            .padding(.horizontal)
                        }
                        .frame(height: 300)
                        
                        // Summary and add button
                        HStack {
                            VStack(alignment: .leading) {
                                Text("Total: \(String(format: "%.2f", calculateGrandTotalCustomerPrice()))")
                                    .font(.headline)
                                
                                Text("\(selectedProducts.count) products, \(calculateTotalQuantity()) items")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                            }
                            
                            Spacer()
                            
                            Button(action: {
                                addItemsToProposal()
                                presentationMode.wrappedValue.dismiss()
                            }) {
                                Text("Add to Proposal")
                                    .padding()
                                    .background(Color.blue)
                                    .foregroundColor(.white)
                                    .cornerRadius(10)
                            }
                        }
                        .padding()
                    }
                    .background(Color(UIColor.secondarySystemBackground))
                }
            }
            .navigationTitle("Select Products")
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("Cancel") {
                        presentationMode.wrappedValue.dismiss()
                    }
                }
            }
        }
    }
    
    private var filteredProducts: [Product] {
        // Start with converting FetchedResults to Array
        var filtered = Array(products)
        
        // Apply category filter if selected
        if let category = selectedCategory {
            filtered = filtered.filter { $0.category == category }
        }
        
        // Apply search text filter
        if !searchText.isEmpty {
            filtered = filtered.filter { product in
                // Handle optional strings properly without optional chaining on non-optional strings
                let codeMatch = product.code != nil ? product.code!.localizedCaseInsensitiveContains(searchText) : false
                let nameMatch = product.name != nil ? product.name!.localizedCaseInsensitiveContains(searchText) : false
                let descMatch = product.desc != nil ? product.desc!.localizedCaseInsensitiveContains(searchText) : false
                
                return codeMatch || nameMatch || descMatch
            }
        }
        
        return filtered
    }
    
    private func toggleProductSelection(_ product: Product) {
        if let id = product.id {
            if selectedProducts.contains(id) {
                selectedProducts.remove(id)
            } else {
                selectedProducts.insert(id)
                if quantities[id] == nil {
                    quantities[id] = 1
                }
                if discounts[id] == nil {
                    discounts[id] = 0
                }
                if multipliers[id] == nil {
                    multipliers[id] = 1.0
                }
                if applyCustomTax[id] == nil {
                    applyCustomTax[id] = false
                }
                if customDescriptions[id] == nil {
                    customDescriptions[id] = ""
                }
            }
        }
    }
    
    private func isSelected(_ product: Product) -> Bool {
        if let id = product.id {
            return selectedProducts.contains(id)
        }
        return false
    }
    
    private func selectedProductsArray() -> [Product] {
        return Array(products).filter { product in
            if let id = product.id {
                return selectedProducts.contains(id)
            }
            return false
        }
    }
    
    // Calculate extended partner price (unit partner price * quantity)
    private func calculateExtendedPartnerPrice(for product: Product) -> Double {
        guard let id = product.id else { return 0 }
        let quantity = quantities[id] ?? 1
        return product.partnerPrice * quantity
    }
    
    // Calculate extended list price (unit list price * quantity)
    private func calculateExtendedListPrice(for product: Product) -> Double {
        guard let id = product.id else { return 0 }
        let quantity = quantities[id] ?? 1
        return product.listPrice * quantity
    }
    
    // Calculate extended customer price (extended list price * multiplier)
    private func calculateExtendedCustomerPrice(for product: Product) -> Double {
        guard let id = product.id else { return 0 }
        let extendedListPrice = calculateExtendedListPrice(for: product)
        let multiplier = multipliers[id] ?? 1.0
        let discount = discounts[id] ?? 0
        return extendedListPrice * multiplier * (1 - discount / 100)
    }
    
    // Calculate total profit (extended customer price - extended partner price)
    private func calculateTotalProfit(for product: Product) -> Double {
        let extendedCustomerPrice = calculateExtendedCustomerPrice(for: product)
        let extendedPartnerPrice = calculateExtendedPartnerPrice(for: product)
        return extendedCustomerPrice - extendedPartnerPrice
    }
    
    // Calculate grand total for customer price
    private func calculateGrandTotalCustomerPrice() -> Double {
        let selectedProducts = selectedProductsArray()
        return selectedProducts.reduce(0) { total, product in
            return total + calculateExtendedCustomerPrice(for: product)
        }
    }
    
    private func calculateTotalQuantity() -> Int {
        return selectedProducts.reduce(0) { total, id in
            return total + Int(quantities[id] ?? 1)
        }
    }
    
    // COMPLETELY FIXED VERSION - No dynamic property access at all for ProposalItem
    private func addItemsToProposal() {
        for product in selectedProductsArray() {
            guard let productId = product.id else { continue }
            
            let quantity = quantities[productId] ?? 1
            let discount = discounts[productId] ?? 0
            
            // Calculate the final unit price with discount
            let unitPrice = product.listPrice * (1 - discount / 100)
            
            // Calculate the extended amount
            let amount = unitPrice * quantity
            
            // Create proposal item with ONLY the standard attributes
            let proposalItem = ProposalItem(context: viewContext)
            proposalItem.id = UUID()
            proposalItem.product = product
            proposalItem.proposal = proposal
            proposalItem.quantity = quantity
            proposalItem.unitPrice = unitPrice
            proposalItem.discount = discount
            proposalItem.amount = amount
            
            // DO NOT use any setValue or value(forKey) methods here
            // We will use only the properties that already exist in the model
        }
        
        do {
            try viewContext.save()
            
            // Update proposal total
            updateProposalTotal()
        } catch {
            let nsError = error as NSError
            print("Error adding items to proposal: \(nsError), \(nsError.userInfo)")
        }
    }
    
    private func updateProposalTotal() {
        // Calculate total amount
        let productsTotal = proposal.subtotalProducts
        let engineeringTotal = proposal.subtotalEngineering
        let expensesTotal = proposal.subtotalExpenses
        let taxesTotal = proposal.subtotalTaxes
        
        proposal.totalAmount = productsTotal + engineeringTotal + expensesTotal + taxesTotal
        
        do {
            try viewContext.save()
        } catch {
            let nsError = error as NSError
            print("Error updating proposal total: \(nsError), \(nsError.userInfo)")
        }
    }
}



/* ================================================== */
/* File: ./ProposalCRM/Views/Components/StatusCardView.swift */
/* ================================================== */

// StatusCardView.swift
// Card showing proposal status statistics

import SwiftUI

struct StatusCardView: View {
    let title: String
    let count: Int
    let value: Double
    let color: Color
    
    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            Text(title)
                .font(.headline)
                .foregroundColor(color)
            
            Text("\(count)")
                .font(.title)
                .fontWeight(.bold)
            
            Text(String(format: "%.2f", value))
                .font(.subheadline)
        }
        .padding()
        .frame(width: 140, height: 120)
        .background(Color(UIColor.secondarySystemBackground))
        .cornerRadius(10)
    }
}



/* ================================================== */
/* File: ./ProposalCRM/Views/Components/SummaryCardView.swift */
/* ================================================== */

// SummaryCardView.swift
// Card showing a financial metric with icon

import SwiftUI

struct SummaryCardView: View {
    let title: String
    let value: Double
    var valueFormat: String = "%.2f"
    let subtitle: String
    let color: Color
    let icon: String
    
    var body: some View {
        HStack {
            Image(systemName: icon)
                .font(.system(size: 30))
                .foregroundColor(color)
                .frame(width: 60)
            
            VStack(alignment: .leading, spacing: 4) {
                Text(title)
                    .font(.headline)
                    .foregroundColor(.secondary)
                
                Text(String(format: valueFormat, value))
                    .font(.title2)
                    .fontWeight(.bold)
                
                Text(subtitle)
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            
            Spacer()
        }
        .padding()
        .background(Color(UIColor.secondarySystemBackground))
        .cornerRadius(10)
    }
}



/* ================================================== */
/* File: ./ProposalCRM/Views/Customers/AddCustomerView.swift */
/* ================================================== */

// AddCustomerView.swift
// Form for adding a new customer

import SwiftUI

struct AddCustomerView: View {
    @Environment(\.managedObjectContext) private var viewContext
    @Environment(\.presentationMode) var presentationMode
    
    @State private var name = ""
    @State private var email = ""
    @State private var phone = ""
    @State private var address = ""
    
    var body: some View {
        NavigationView {
            Form {
                Section(header: Text("Customer Information")) {
                    TextField("Company Name", text: $name)
                        .autocapitalization(.words)
                    TextField("Email", text: $email)
                        .keyboardType(.emailAddress)
                        .autocapitalization(.none)
                    TextField("Phone", text: $phone)
                        .keyboardType(.phonePad)
                    TextField("Address", text: $address)
                        .autocapitalization(.words)
                }
            }
            .navigationTitle("New Customer")
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("Cancel") {
                        presentationMode.wrappedValue.dismiss()
                    }
                }
                
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Save") {
                        saveCustomer()
                    }
                    .disabled(name.isEmpty)
                }
            }
        }
    }
    
    private func saveCustomer() {
        let newCustomer = Customer(context: viewContext)
        newCustomer.id = UUID()
        newCustomer.name = name
        newCustomer.email = email
        newCustomer.phone = phone
        newCustomer.address = address
        
        do {
            try viewContext.save()
            presentationMode.wrappedValue.dismiss()
        } catch {
            let nsError = error as NSError
            print("Error saving customer: \(nsError), \(nsError.userInfo)")
        }
    }
}



/* ================================================== */
/* File: ./ProposalCRM/Views/Customers/CustomerDetailView.swift */
/* ================================================== */

// CustomerDetailView.swift
// Shows details for a specific customer and their proposals

import SwiftUI

struct CustomerDetailView: View {
    @Environment(\.managedObjectContext) private var viewContext
    @ObservedObject var customer: Customer
    @State private var isEditing = false
    @State private var showingNewProposal = false
    
    var body: some View {
        ScrollView {
            VStack(alignment: .leading, spacing: 20) {
                // Customer Info Card
                VStack(alignment: .leading, spacing: 10) {
                    HStack {
                        Text(customer.formattedName)
                            .font(.title)
                            .fontWeight(.bold)
                        
                        Spacer()
                        
                        Button(action: { isEditing = true }) {
                            Label("Edit", systemImage: "pencil")
                        }
                    }
                    
                    Divider()
                    
                    HStack {
                        Label(customer.email ?? "No Email", systemImage: "envelope")
                    }
                    
                    HStack {
                        Label(customer.phone ?? "No Phone", systemImage: "phone")
                    }
                    
                    HStack {
                        Label(customer.address ?? "No Address", systemImage: "location")
                    }
                }
                .padding()
                .background(Color(UIColor.systemBackground))
                .cornerRadius(10)
                .shadow(color: Color.black.opacity(0.1), radius: 5, x: 0, y: 2)
                
                // Proposals Section
                VStack(alignment: .leading, spacing: 10) {
                    HStack {
                        Text("Proposals")
                            .font(.title2)
                            .fontWeight(.bold)
                        
                        Spacer()
                        
                        Button(action: { showingNewProposal = true }) {
                            Label("New Proposal", systemImage: "plus")
                        }
                    }
                    
                    if customer.proposalsArray.isEmpty {
                        Text("No proposals yet")
                            .foregroundColor(.secondary)
                            .padding()
                    } else {
                        ForEach(customer.proposalsArray, id: \.self) { proposal in
                            NavigationLink(destination: ProposalDetailView(proposal: proposal)) {
                                HStack {
                                    VStack(alignment: .leading) {
                                        Text(proposal.formattedNumber)
                                            .font(.headline)
                                        Text(proposal.formattedDate)
                                            .font(.subheadline)
                                            .foregroundColor(.secondary)
                                    }
                                    
                                    Spacer()
                                    
                                    VStack(alignment: .trailing) {
                                        Text(proposal.formattedTotal)
                                            .font(.headline)
                                        Text(proposal.formattedStatus)
                                            .font(.caption)
                                            .padding(4)
                                            .background(statusColor(for: proposal.formattedStatus))
                                            .foregroundColor(.white)
                                            .cornerRadius(4)
                                    }
                                }
                                .padding(.vertical, 8)
                            }
                            .buttonStyle(PlainButtonStyle())
                            
                            Divider()
                        }
                    }
                }
                .padding()
                .background(Color(UIColor.systemBackground))
                .cornerRadius(10)
                .shadow(color: Color.black.opacity(0.1), radius: 5, x: 0, y: 2)
            }
            .padding()
        }
        .navigationTitle("Customer Details")
        .sheet(isPresented: $isEditing) {
            EditCustomerView(customer: customer)
        }
        .sheet(isPresented: $showingNewProposal) {
            CreateProposalView(customer: customer)
        }
    }
    
    private func statusColor(for status: String) -> Color {
        switch status {
        case "Draft":
            return .gray
        case "Pending":
            return .orange
        case "Sent":
            return .blue
        case "Won":
            return .green
        case "Lost":
            return .red
        case "Expired":
            return .purple
        default:
            return .gray
        }
    }
}



/* ================================================== */
/* File: ./ProposalCRM/Views/Customers/CustomerListView.swift */
/* ================================================== */

// CustomerListView.swift
// Displays a list of customers with search functionality

import SwiftUI
import CoreData

struct CustomerListView: View {
    @Environment(\.managedObjectContext) private var viewContext
    @FetchRequest(
        sortDescriptors: [NSSortDescriptor(keyPath: \Customer.name, ascending: true)],
        animation: .default)
    private var customers: FetchedResults<Customer>
    
    @State private var searchText = ""
    @State private var showingAddCustomer = false
    
    var body: some View {
        List {
            ForEach(filteredCustomers, id: \.self) { customer in
                NavigationLink(destination: CustomerDetailView(customer: customer)) {
                    VStack(alignment: .leading) {
                        Text(customer.formattedName)
                            .font(.headline)
                        Text(customer.email ?? "")
                            .font(.subheadline)
                            .foregroundColor(.secondary)
                    }
                }
            }
            .onDelete(perform: deleteCustomers)
        }
        .searchable(text: $searchText, prompt: "Search Customers")
        .navigationTitle("Customers")
        .toolbar {
            ToolbarItem(placement: .navigationBarTrailing) {
                Button(action: { showingAddCustomer = true }) {
                    Label("Add Customer", systemImage: "plus")
                }
            }
        }
        .sheet(isPresented: $showingAddCustomer) {
            AddCustomerView()
        }
    }
    
    private var filteredCustomers: [Customer] {
        if searchText.isEmpty {
            return Array(customers)
        } else {
            return customers.filter { customer in
                customer.name?.localizedCaseInsensitiveContains(searchText) ?? false ||
                customer.email?.localizedCaseInsensitiveContains(searchText) ?? false ||
                customer.phone?.localizedCaseInsensitiveContains(searchText) ?? false
            }
        }
    }
    
    private func deleteCustomers(offsets: IndexSet) {
        withAnimation {
            offsets.map { filteredCustomers[$0] }.forEach(viewContext.delete)
            
            do {
                try viewContext.save()
            } catch {
                let nsError = error as NSError
                print("Error deleting customer: \(nsError), \(nsError.userInfo)")
            }
        }
    }
}



/* ================================================== */
/* File: ./ProposalCRM/Views/Customers/EditCustomerView.swift */
/* ================================================== */

// EditCustomerView.swift
// Form for editing an existing customer

import SwiftUI

struct EditCustomerView: View {
    @Environment(\.managedObjectContext) private var viewContext
    @Environment(\.presentationMode) var presentationMode
    @ObservedObject var customer: Customer
    
    @State private var name: String
    @State private var email: String
    @State private var phone: String
    @State private var address: String
    
    init(customer: Customer) {
        self.customer = customer
        _name = State(initialValue: customer.name ?? "")
        _email = State(initialValue: customer.email ?? "")
        _phone = State(initialValue: customer.phone ?? "")
        _address = State(initialValue: customer.address ?? "")
    }
    
    var body: some View {
        NavigationView {
            Form {
                Section(header: Text("Customer Information")) {
                    TextField("Company Name", text: $name)
                        .autocapitalization(.words)
                    TextField("Email", text: $email)
                        .keyboardType(.emailAddress)
                        .autocapitalization(.none)
                    TextField("Phone", text: $phone)
                        .keyboardType(.phonePad)
                    TextField("Address", text: $address)
                        .autocapitalization(.words)
                }
            }
            .navigationTitle("Edit Customer")
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("Cancel") {
                        presentationMode.wrappedValue.dismiss()
                    }
                }
                
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Save") {
                        updateCustomer()
                    }
                    .disabled(name.isEmpty)
                }
            }
        }
    }
    
    private func updateCustomer() {
        customer.name = name
        customer.email = email
        customer.phone = phone
        customer.address = address
        
        do {
            try viewContext.save()
            presentationMode.wrappedValue.dismiss()
        } catch {
            let nsError = error as NSError
            print("Error updating customer: \(nsError), \(nsError.userInfo)")
        }
    }
}



/* ================================================== */
/* File: ./ProposalCRM/Views/Products/AddProductView.swift */
/* ================================================== */

// AddProductView.swift
// Form for adding a new product

import SwiftUI

struct AddProductView: View {
    @Environment(\.managedObjectContext) private var viewContext
    @Environment(\.presentationMode) var presentationMode
    
    @State private var code = ""
    @State private var name = ""
    @State private var productDescription = ""
    @State private var category = ""
    @State private var listPrice = ""
    @State private var partnerPrice = ""
    
    var body: some View {
        NavigationView {
            Form {
                Section(header: Text("Product Information")) {
                    TextField("Product Code", text: $code)
                        .autocapitalization(.none)
                    
                    TextField("Product Name", text: $name)
                        .autocapitalization(.words)
                    
                    TextField("Description", text: $productDescription)
                    
                    TextField("Category", text: $category)
                        .autocapitalization(.words)
                }
                
                Section(header: Text("Pricing")) {
                    TextField("List Price", text: $listPrice)
                        .keyboardType(.decimalPad)
                    
                    TextField("Partner Price", text: $partnerPrice)
                        .keyboardType(.decimalPad)
                }
            }
            .navigationTitle("New Product")
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("Cancel") {
                        presentationMode.wrappedValue.dismiss()
                    }
                }
                
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Save") {
                        saveProduct()
                    }
                    .disabled(code.isEmpty || name.isEmpty || listPrice.isEmpty)
                }
            }
        }
    }
    
    private func saveProduct() {
        let product = Product(context: viewContext)
        product.id = UUID()
        product.code = code
        product.name = name
        product.desc = productDescription
        product.category = category
        product.listPrice = Double(listPrice) ?? 0.0
        product.partnerPrice = Double(partnerPrice) ?? 0.0
        
        do {
            try viewContext.save()
            presentationMode.wrappedValue.dismiss()
        } catch {
            let nsError = error as NSError
            print("Error saving product: \(nsError), \(nsError.userInfo)")
        }
    }
}



/* ================================================== */
/* File: ./ProposalCRM/Views/Products/CustomProductTableView.swift */
/* ================================================== */

//
//  CustomProductTableView.swift
//  ProposalCRM
//
//  Created by Ali Sami Gözükırmızı on 17.04.2025.
//


//
//  CustomProductTableView.swift
//  ProposalCRM
//
//  Created by Ali Sami Gözükırmızı on 17.04.2025.
//

// CustomProductTableView.swift
// Enhanced version with proper horizontal scrolling and improved layout

import SwiftUI
import CoreData

struct CustomProductTableView: View {
    let products: [Product]
    @Environment(\.colorScheme) var colorScheme
    
    var body: some View {
        VStack(spacing: 0) {
            // Table header - scrollable
            ScrollView(.horizontal, showsIndicators: true) {
                HStack(spacing: 0) {
                    Text("Code")
                        .font(.caption)
                        .fontWeight(.bold)
                        .frame(width: 90, alignment: .leading)
                        .padding(.horizontal, 5)
                    
                    Divider().frame(height: 36)
                    
                    Text("Name")
                        .font(.caption)
                        .fontWeight(.bold)
                        .frame(width: 180, alignment: .leading)
                        .padding(.horizontal, 5)
                    
                    Divider().frame(height: 36)
                    
                    Text("Category")
                        .font(.caption)
                        .fontWeight(.bold)
                        .frame(width: 120, alignment: .leading)
                        .padding(.horizontal, 5)
                    
                    Divider().frame(height: 36)
                    
                    Text("List Price")
                        .font(.caption)
                        .fontWeight(.bold)
                        .frame(width: 80, alignment: .trailing)
                        .padding(.horizontal, 5)
                    
                    Divider().frame(height: 36)
                    
                    Text("Partner")
                        .font(.caption)
                        .fontWeight(.bold)
                        .frame(width: 80, alignment: .trailing)
                        .padding(.horizontal, 5)
                    
                    Divider().frame(height: 36)
                    
                    Text("Margin")
                        .font(.caption)
                        .fontWeight(.bold)
                        .frame(width: 70, alignment: .trailing)
                        .padding(.horizontal, 5)
                    
                    Divider().frame(height: 36)
                    
                    Text("Status")
                        .font(.caption)
                        .fontWeight(.bold)
                        .frame(width: 80, alignment: .center)
                        .padding(.horizontal, 5)
                }
                .padding(.vertical, 10)
                .background(colorScheme == .dark ? Color(UIColor.systemGray6) : Color(UIColor.systemGray5))
            }
            
            Divider()
            
            // Table rows in scrolling list
            ScrollView {
                LazyVStack(spacing: 0) {
                    if products.isEmpty {
                        Text("No products available")
                            .foregroundColor(.secondary)
                            .padding(20)
                    } else {
                        ForEach(products, id: \.self) { product in
                            NavigationLink(destination: ProductDetailView(product: product)) {
                                ScrollView(.horizontal, showsIndicators: false) {
                                    HStack(spacing: 0) {
                                        Text(product.code ?? "")
                                            .font(.system(size: 14))
                                            .frame(width: 90, alignment: .leading)
                                            .padding(.horizontal, 5)
                                            .lineLimit(1)
                                        
                                        Divider().frame(height: 40)
                                        
                                        Text(product.name ?? "")
                                            .font(.system(size: 14))
                                            .frame(width: 180, alignment: .leading)
                                            .padding(.horizontal, 5)
                                            .lineLimit(1)
                                        
                                        Divider().frame(height: 40)
                                        
                                        Text(product.category ?? "")
                                            .font(.system(size: 14))
                                            .frame(width: 120, alignment: .leading)
                                            .padding(.horizontal, 5)
                                            .lineLimit(1)
                                        
                                        Divider().frame(height: 40)
                                        
                                        Text(formatPrice(product.listPrice))
                                            .font(.system(size: 14))
                                            .frame(width: 80, alignment: .trailing)
                                            .padding(.horizontal, 5)
                                        
                                        Divider().frame(height: 40)
                                        
                                        Text(formatPrice(product.partnerPrice))
                                            .font(.system(size: 14))
                                            .frame(width: 80, alignment: .trailing)
                                            .padding(.horizontal, 5)
                                        
                                        Divider().frame(height: 40)
                                        
                                        let margin = calculateMargin(product.listPrice, product.partnerPrice)
                                        Text(String(format: "%.1f%%", margin))
                                            .font(.system(size: 14))
                                            .frame(width: 70, alignment: .trailing)
                                            .padding(.horizontal, 5)
                                            .foregroundColor(margin >= 20 ? .green : (margin >= 10 ? .orange : .red))
                                        
                                        Divider().frame(height: 40)
                                        
                                        // Status indicator (active/inactive)
                                        Circle()
                                            .fill(product.partnerPrice > 0 ? Color.green : Color.gray)
                                            .frame(width: 12, height: 12)
                                            .frame(width: 80, alignment: .center)
                                    }
                                    .padding(.vertical, 8)
                                }
                                .frame(height: 44)
                                .background(colorScheme == .dark ? Color(UIColor.systemBackground) : Color.white)
                            }
                            .buttonStyle(PlainButtonStyle())
                            
                            Divider()
                        }
                    }
                }
            }
            .frame(minHeight: 300, maxHeight: .infinity)
        }
        .background(colorScheme == .dark ? Color(UIColor.systemBackground) : Color.white)
        .cornerRadius(10)
        .overlay(
            RoundedRectangle(cornerRadius: 10)
                .stroke(Color.gray.opacity(0.2), lineWidth: 1)
        )
    }
    
    private func formatPrice(_ value: Double) -> String {
        return String(format: "$%.2f", value)
    }
    
    private func calculateMargin(_ list: Double, _ partner: Double) -> Double {
        return list > 0 ? ((list - partner) / list) * 100 : 0
    }
}

struct CustomProductListView: View {
    @Environment(\.managedObjectContext) private var viewContext
    @FetchRequest(
        sortDescriptors: [NSSortDescriptor(keyPath: \Product.name, ascending: true)],
        animation: .default)
    private var products: FetchedResults<Product>
    
    @State private var searchText = ""
    @State private var showingAddProduct = false
    @State private var showingImportCSV = false
    @State private var selectedCategory: String? = nil
    @State private var isTableView = true // Toggle between list and table view
    @State private var sortOrder: SortOrder = .nameAsc
    
    enum SortOrder: String, CaseIterable {
        case nameAsc = "Name (A-Z)"
        case nameDesc = "Name (Z-A)"
        case priceAsc = "Price (Low-High)"
        case priceDesc = "Price (High-Low)"
        case codeAsc = "Code (A-Z)"
        case marginAsc = "Margin (Low-High)"
        case marginDesc = "Margin (High-Low)"
    }
    
    var categories: [String] {
        let categorySet = Set(products.compactMap { $0.category })
        return Array(categorySet).sorted()
    }
    
    var body: some View {
        VStack {
            // Top controls row
            HStack {
                // View type toggle
                Picker("View Type", selection: $isTableView) {
                    Text("List View").tag(false)
                    Text("Table View").tag(true)
                }
                .pickerStyle(SegmentedPickerStyle())
                .frame(maxWidth: 200)
                
                Spacer()
                
                // Sort order picker
                Picker("Sort by", selection: $sortOrder) {
                    ForEach(SortOrder.allCases, id: \.self) { order in
                        Text(order.rawValue).tag(order)
                    }
                }
                .pickerStyle(MenuPickerStyle())
                .frame(maxWidth: 180)
            }
            .padding(.horizontal)
            
            if products.isEmpty {
                VStack(spacing: 20) {
                    Text("No Products Available")
                        .font(.title)
                        .foregroundColor(.secondary)
                    
                    Text("Import products from CSV or add them manually")
                        .foregroundColor(.secondary)
                    
                    HStack(spacing: 20) {
                        Button(action: { showingImportCSV = true }) {
                            Label("Import CSV", systemImage: "square.and.arrow.down")
                                .padding()
                                .background(Color.blue)
                                .foregroundColor(.white)
                                .cornerRadius(10)
                        }
                        
                        Button(action: { showingAddProduct = true }) {
                            Label("Add Product", systemImage: "plus")
                                .padding()
                                .background(Color.green)
                                .foregroundColor(.white)
                                .cornerRadius(10)
                        }
                    }
                }
                .padding()
            } else {
                VStack {
                    // Category filter
                    ScrollView(.horizontal, showsIndicators: false) {
                        HStack {
                            Button(action: { selectedCategory = nil }) {
                                Text("All")
                                    .padding(.horizontal, 12)
                                    .padding(.vertical, 8)
                                    .background(selectedCategory == nil ? Color.blue : Color.gray.opacity(0.2))
                                    .foregroundColor(selectedCategory == nil ? .white : .primary)
                                    .cornerRadius(20)
                            }
                            
                            ForEach(categories, id: \.self) { category in
                                Button(action: { selectedCategory = category }) {
                                    Text(category)
                                        .padding(.horizontal, 12)
                                        .padding(.vertical, 8)
                                        .background(selectedCategory == category ? Color.blue : Color.gray.opacity(0.2))
                                        .foregroundColor(selectedCategory == category ? .white : .primary)
                                        .cornerRadius(20)
                                }
                            }
                        }
                        .padding(.horizontal)
                    }
                    .padding(.vertical, 8)
                    
                    if isTableView {
                        // TABLE VIEW (enhanced detailed view)
                        CustomProductTableView(products: sortedFilteredProducts)
                            .padding(.horizontal)
                    } else {
                        // STANDARD LIST VIEW
                        List {
                            ForEach(sortedFilteredProducts, id: \.self) { product in
                                NavigationLink(destination: ProductDetailView(product: product)) {
                                    VStack(alignment: .leading, spacing: 4) {
                                        HStack {
                                            Text(product.formattedCode)
                                                .font(.subheadline)
                                                .foregroundColor(.secondary)
                                            
                                            Spacer()
                                            
                                            Text(product.category ?? "Uncategorized")
                                                .font(.caption)
                                                .padding(4)
                                                .background(Color.gray.opacity(0.2))
                                                .cornerRadius(4)
                                        }
                                        
                                        Text(product.formattedName)
                                            .font(.headline)
                                        
                                        Text(product.desc ?? "")
                                            .font(.caption)
                                            .foregroundColor(.secondary)
                                            .lineLimit(2)
                                        
                                        HStack {
                                            Text("List: \(product.formattedPrice)")
                                                .font(.subheadline)
                                            
                                            Spacer()
                                            
                                            Text("Partner: \(String(format: "%.2f", product.partnerPrice))")
                                                .font(.subheadline)
                                                .foregroundColor(.blue)
                                        }
                                    }
                                    .padding(.vertical, 4)
                                }
                            }
                            .onDelete(perform: deleteProducts)
                        }
                    }
                }
            }
        }
        .searchable(text: $searchText, prompt: "Search Products")
        .navigationTitle("Products (\(products.count))")
        .toolbar {
            ToolbarItem(placement: .navigationBarTrailing) {
                Menu {
                    Button(action: { showingAddProduct = true }) {
                        Label("Add Product", systemImage: "plus")
                    }
                    
                    Button(action: { showingImportCSV = true }) {
                        Label("Import CSV", systemImage: "square.and.arrow.down")
                    }
                } label: {
                    Image(systemName: "ellipsis.circle")
                }
            }
        }
        .sheet(isPresented: $showingAddProduct) {
            AddProductView()
        }
        .sheet(isPresented: $showingImportCSV) {
            ProductImportView()
        }
    }
    
    private var filteredProducts: [Product] {
        var filtered = Array(products)
        
        // Apply category filter if selected
        if let category = selectedCategory {
            filtered = filtered.filter { $0.category == category }
        }
        
        // Apply search text filter
        if !searchText.isEmpty {
            filtered = filtered.filter { product in
                (product.code?.localizedCaseInsensitiveContains(searchText) ?? false) ||
                (product.name?.localizedCaseInsensitiveContains(searchText) ?? false) ||
                (product.desc?.localizedCaseInsensitiveContains(searchText) ?? false) ||
                (product.category?.localizedCaseInsensitiveContains(searchText) ?? false)
            }
        }
        
        return filtered
    }
    
    private var sortedFilteredProducts: [Product] {
        let filtered = filteredProducts
        
        // Apply sorting
        switch sortOrder {
        case .nameAsc:
            return filtered.sorted { ($0.name ?? "") < ($1.name ?? "") }
        case .nameDesc:
            return filtered.sorted { ($0.name ?? "") > ($1.name ?? "") }
        case .priceAsc:
            return filtered.sorted { $0.listPrice < $1.listPrice }
        case .priceDesc:
            return filtered.sorted { $0.listPrice > $1.listPrice }
        case .codeAsc:
            return filtered.sorted { ($0.code ?? "") < ($1.code ?? "") }
        case .marginAsc:
            return filtered.sorted { calculateMargin($0) < calculateMargin($1) }
        case .marginDesc:
            return filtered.sorted { calculateMargin($0) > calculateMargin($1) }
        }
    }
    
    private func calculateMargin(_ product: Product) -> Double {
        if product.listPrice <= 0 {
            return 0
        }
        return ((product.listPrice - product.partnerPrice) / product.listPrice) * 100
    }
    
    private func deleteProducts(offsets: IndexSet) {
        withAnimation {
            offsets.map { filteredProducts[$0] }.forEach(viewContext.delete)
            
            do {
                try viewContext.save()
            } catch {
                let nsError = error as NSError
                print("Error deleting product: \(nsError), \(nsError.userInfo)")
            }
        }
    }
}


/* ================================================== */
/* File: ./ProposalCRM/Views/Products/ProductDetailView.swift */
/* ================================================== */

// ProductDetailView.swift
// Detailed view of product with comprehensive information

import SwiftUI
import CoreData

struct ProductDetailView: View {
    @ObservedObject var product: Product
    @Environment(\.presentationMode) var presentationMode
    @Environment(\.colorScheme) var colorScheme
    @Environment(\.managedObjectContext) private var viewContext
    
    @State private var isEditing = false
    
    var body: some View {
        ScrollView {
            VStack(alignment: .leading, spacing: 20) {
                // Product header
                HStack {
                    VStack(alignment: .leading, spacing: 8) {
                        Text(product.name ?? "Unknown Product")
                            .font(.title)
                            .fontWeight(.bold)
                        
                        Text(product.code ?? "No Code")
                            .font(.subheadline)
                            .foregroundColor(.secondary)
                    }
                    
                    Spacer()
                    
                    Button(action: { isEditing = true }) {
                        Label("Edit", systemImage: "pencil")
                            .foregroundColor(.blue)
                    }
                }
                .padding()
                .background(Color(UIColor.secondarySystemBackground))
                .cornerRadius(10)
                
                // Financial summary card
                VStack(alignment: .leading, spacing: 15) {
                    Text("Financial Overview")
                        .font(.title2)
                        .fontWeight(.bold)
                    
                    Divider()
                    
                    HStack(spacing: 20) {
                        // Price card
                        VStack(alignment: .leading, spacing: 5) {
                            Text("Price")
                                .font(.headline)
                                .foregroundColor(.secondary)
                            
                            Text(formatPrice(product.listPrice))
                                .font(.title2)
                                .fontWeight(.bold)
                            
                            Text("List Price")
                                .font(.caption)
                                .foregroundColor(.secondary)
                        }
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color(UIColor.systemBackground))
                        .cornerRadius(10)
                        
                        // Partner Price card
                        VStack(alignment: .leading, spacing: 5) {
                            Text("Cost")
                                .font(.headline)
                                .foregroundColor(.secondary)
                            
                            Text(formatPrice(product.partnerPrice))
                                .font(.title2)
                                .fontWeight(.bold)
                                .foregroundColor(.blue)
                            
                            Text("Partner Price")
                                .font(.caption)
                                .foregroundColor(.secondary)
                        }
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color(UIColor.systemBackground))
                        .cornerRadius(10)
                        
                        // Margin card
                        let margin = calculateMargin(product.listPrice, product.partnerPrice)
                        VStack(alignment: .leading, spacing: 5) {
                            Text("Margin")
                                .font(.headline)
                                .foregroundColor(.secondary)
                            
                            Text(formatPercent(margin))
                                .font(.title2)
                                .fontWeight(.bold)
                                .foregroundColor(margin >= 20 ? .green : (margin >= 10 ? .orange : .red))
                            
                            Text("Profit Margin")
                                .font(.caption)
                                .foregroundColor(.secondary)
                        }
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color(UIColor.systemBackground))
                        .cornerRadius(10)
                    }
                }
                .padding()
                .background(Color(UIColor.secondarySystemBackground))
                .cornerRadius(10)
                
                // Product details table
                VStack(alignment: .leading, spacing: 15) {
                    Text("Product Details")
                        .font(.title2)
                        .fontWeight(.bold)
                    
                    Divider()
                    
                    // Enhanced table view for product details
                    ProductDetailsTable(product: product)
                }
                .padding()
                .background(Color(UIColor.secondarySystemBackground))
                .cornerRadius(10)
                
                // Description section
                VStack(alignment: .leading, spacing: 15) {
                    Text("Description")
                        .font(.title2)
                        .fontWeight(.bold)
                    
                    Divider()
                    
                    Text(product.desc ?? "No description available")
                        .padding()
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .background(Color(UIColor.systemBackground))
                        .cornerRadius(10)
                }
                .padding()
                .background(Color(UIColor.secondarySystemBackground))
                .cornerRadius(10)
                
                // Usage in proposals section
                VStack(alignment: .leading, spacing: 15) {
                    Text("Usage Statistics")
                        .font(.title2)
                        .fontWeight(.bold)
                    
                    Divider()
                    
                    // This would be populated with actual data in a real implementation
                    HStack {
                        UsageStatCard(title: "Proposals", value: "0", icon: "doc.text")
                        UsageStatCard(title: "Total Quantity", value: "0", icon: "number")
                        UsageStatCard(title: "Total Revenue", value: "$0.00", icon: "dollarsign.circle")
                    }
                }
                .padding()
                .background(Color(UIColor.secondarySystemBackground))
                .cornerRadius(10)
            }
            .padding()
        }
        .navigationTitle("Product Details")
        .sheet(isPresented: $isEditing) {
            EditProductView(product: product)
        }
    }
    
    private func formatPrice(_ value: Double) -> String {
        let formatter = NumberFormatter()
        formatter.numberStyle = .currency
        formatter.currencySymbol = "$"
        return formatter.string(from: NSNumber(value: value)) ?? "$\(String(format: "%.2f", value))"
    }
    
    private func formatPercent(_ value: Double) -> String {
        return String(format: "%.1f%%", value)
    }
    
    private func calculateMargin(_ list: Double, _ partner: Double) -> Double {
        if list <= 0 {
            return 0
        }
        return ((list - partner) / list) * 100
    }
}

struct ProductDetailsTable: View {
    @ObservedObject var product: Product
    @Environment(\.colorScheme) var colorScheme
    
    var body: some View {
        VStack(spacing: 0) {
            // Table header
            HStack(spacing: 0) {
                Text("Property")
                    .font(.subheadline)
                    .fontWeight(.bold)
                    .frame(width: 120, alignment: .leading)
                    .padding(.horizontal, 10)
                    .padding(.vertical, 8)
                
                Divider()
                    .frame(height: 36)
                
                Text("Value")
                    .font(.subheadline)
                    .fontWeight(.bold)
                    .frame(maxWidth: .infinity, alignment: .leading)
                    .padding(.horizontal, 10)
                    .padding(.vertical, 8)
            }
            .background(colorScheme == .dark ? Color(UIColor.systemGray6) : Color(UIColor.systemGray5))
            .cornerRadius(8, corners: [.topLeft, .topRight])
            
            Divider()
            
            // Table rows
            Group {
                DetailRow(property: "Product Code", value: product.code ?? "N/A")
                Divider()
                DetailRow(property: "Name", value: product.name ?? "N/A")
                Divider()
                DetailRow(property: "Category", value: product.category ?? "Uncategorized")
                Divider()
                DetailRow(property: "List Price", value: formatPrice(product.listPrice))
                Divider()
                DetailRow(property: "Partner Price", value: formatPrice(product.partnerPrice))
                Divider()
                let profit = product.listPrice - product.partnerPrice
                DetailRow(property: "Profit", value: formatPrice(profit))
                Divider()
                let margin = calculateMargin(product.listPrice, product.partnerPrice)
                DetailRow(property: "Margin", value: formatPercent(margin),
                          valueColor: margin >= 20 ? .green : (margin >= 10 ? .orange : .red))
            }
            .background(colorScheme == .dark ? Color(UIColor.systemGray6).opacity(0.3) : Color.white)
            .cornerRadius(8, corners: [.bottomLeft, .bottomRight])
        }
        .cornerRadius(8)
        .overlay(
            RoundedRectangle(cornerRadius: 8)
                .stroke(Color.gray.opacity(0.2), lineWidth: 1)
        )
    }
    
    private func formatPrice(_ value: Double) -> String {
        let formatter = NumberFormatter()
        formatter.numberStyle = .currency
        formatter.currencySymbol = "$"
        return formatter.string(from: NSNumber(value: value)) ?? "$\(String(format: "%.2f", value))"
    }
    
    private func formatPercent(_ value: Double) -> String {
        return String(format: "%.1f%%", value)
    }
    
    private func calculateMargin(_ list: Double, _ partner: Double) -> Double {
        if list <= 0 {
            return 0
        }
        return ((list - partner) / list) * 100
    }
}

struct DetailRow: View {
    let property: String
    let value: String
    var valueColor: Color = .primary
    
    var body: some View {
        HStack(spacing: 0) {
            Text(property)
                .font(.system(size: 14))
                .frame(width: 120, alignment: .leading)
                .padding(.horizontal, 10)
                .padding(.vertical, 12)
            
            Divider()
                .frame(height: 40)
            
            Text(value)
                .font(.system(size: 14))
                .foregroundColor(valueColor)
                .frame(maxWidth: .infinity, alignment: .leading)
                .padding(.horizontal, 10)
                .padding(.vertical, 12)
        }
    }
}

struct UsageStatCard: View {
    let title: String
    let value: String
    let icon: String
    
    var body: some View {
        VStack(spacing: 8) {
            Image(systemName: icon)
                .font(.system(size: 22))
                .foregroundColor(.blue)
            
            Text(value)
                .font(.title3)
                .fontWeight(.bold)
            
            Text(title)
                .font(.caption)
                .foregroundColor(.secondary)
        }
        .frame(maxWidth: .infinity)
        .padding()
        .background(Color(UIColor.systemBackground))
        .cornerRadius(10)
    }
}

struct EditProductView: View {
    @Environment(\.managedObjectContext) private var viewContext
    @Environment(\.presentationMode) var presentationMode
    @ObservedObject var product: Product
    
    @State private var code: String
    @State private var name: String
    @State private var productDescription: String
    @State private var category: String
    @State private var listPrice: String
    @State private var partnerPrice: String
    
    init(product: Product) {
        self.product = product
        _code = State(initialValue: product.code ?? "")
        _name = State(initialValue: product.name ?? "")
        _productDescription = State(initialValue: product.desc ?? "")
        _category = State(initialValue: product.category ?? "")
        _listPrice = State(initialValue: String(format: "%.2f", product.listPrice))
        _partnerPrice = State(initialValue: String(format: "%.2f", product.partnerPrice))
    }
    
    var body: some View {
        NavigationView {
            Form {
                Section(header: Text("Product Information")) {
                    TextField("Product Code", text: $code)
                        .autocapitalization(.none)
                    
                    TextField("Product Name", text: $name)
                        .autocapitalization(.words)
                    
                    TextField("Description", text: $productDescription)
                    
                    TextField("Category", text: $category)
                        .autocapitalization(.words)
                }
                
                Section(header: Text("Pricing")) {
                    TextField("List Price", text: $listPrice)
                        .keyboardType(.decimalPad)
                    
                    TextField("Partner Price", text: $partnerPrice)
                        .keyboardType(.decimalPad)
                    
                    // Display calculated values
                    HStack {
                        Text("Profit")
                        Spacer()
                        Text(calculateProfit())
                            .foregroundColor(.secondary)
                    }
                    
                    HStack {
                        Text("Margin")
                        Spacer()
                        Text(calculateMargin())
                            .foregroundColor(calculateMarginPercent() >= 20 ? .green :
                                            (calculateMarginPercent() >= 10 ? .orange : .red))
                    }
                }
            }
            .navigationTitle("Edit Product")
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("Cancel") {
                        presentationMode.wrappedValue.dismiss()
                    }
                }
                
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Save") {
                        saveProduct()
                    }
                    .disabled(code.isEmpty || name.isEmpty || listPrice.isEmpty)
                }
            }
        }
    }
    
    private func calculateProfit() -> String {
        let list = Double(listPrice) ?? 0
        let partner = Double(partnerPrice) ?? 0
        let profit = list - partner
        
        let formatter = NumberFormatter()
        formatter.numberStyle = .currency
        formatter.currencySymbol = "$"
        return formatter.string(from: NSNumber(value: profit)) ?? "$\(String(format: "%.2f", profit))"
    }
    
    private func calculateMargin() -> String {
        return String(format: "%.1f%%", calculateMarginPercent())
    }
    
    private func calculateMarginPercent() -> Double {
        let list = Double(listPrice) ?? 0
        let partner = Double(partnerPrice) ?? 0
        
        if list <= 0 {
            return 0
        }
        
        return ((list - partner) / list) * 100
    }
    
    private func saveProduct() {
        product.code = code
        product.name = name
        product.desc = productDescription
        product.category = category
        product.listPrice = Double(listPrice) ?? 0.0
        product.partnerPrice = Double(partnerPrice) ?? 0.0
        
        do {
            try viewContext.save()
            presentationMode.wrappedValue.dismiss()
        } catch {
            let nsError = error as NSError
            print("Error saving product: \(nsError), \(nsError.userInfo)")
        }
    }
}

// Helper extension for rounded corners
extension View {
    func cornerRadius(_ radius: CGFloat, corners: UIRectCorner) -> some View {
        clipShape(RoundedCorner(radius: radius, corners: corners))
    }
}

struct RoundedCorner: Shape {
    var radius: CGFloat = .infinity
    var corners: UIRectCorner = .allCorners

    func path(in rect: CGRect) -> Path {
        let path = UIBezierPath(roundedRect: rect, byRoundingCorners: corners, cornerRadii: CGSize(width: radius, height: radius))
        return Path(path.cgPath)
    }
}



/* ================================================== */
/* File: ./ProposalCRM/Views/Products/ProductImportView.swift */
/* ================================================== */

// ProductImportView.swift
// Enhanced version for reliable CSV import with support for large files

import SwiftUI
import UniformTypeIdentifiers
import CoreData

struct ProductImportView: View {
    @Environment(\.managedObjectContext) private var viewContext
    @Environment(\.presentationMode) var presentationMode
    
    @State private var isImporting = false
    @State private var importedCSVString: String? = nil
    @State private var isImportingData = false
    @State private var progress: Float = 0.0
    @State private var status = "Ready to import"
    @State private var debugText = ""
    @State private var showDebug = false
    @State private var errorMessage: String? = nil
    @State private var showError = false
    @State private var showDeleteConfirmation = false
    @State private var parsedProducts: [ImportProduct] = []
    @State private var showParsedProducts = false
    @State private var totalRowsInFile: Int = 0
    @State private var currentBatchNumber: Int = 0
    @State private var totalBatches: Int = 0
    
    // Model for imported products
    struct ImportProduct: Identifiable {
        let id = UUID()
        let code: String
        let name: String
        let description: String
        let category: String
        let listPrice: Double
        let partnerPrice: Double
    }
    
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: 20) {
                    // Header section
                    if importedCSVString == nil && !isImportingData {
                        initialView
                    } else if isImportingData {
                        importProgressView
                    } else if showParsedProducts {
                        productPreviewView
                    }
                }
                .padding()
            }
            .navigationTitle("Import Products")
            .sheet(isPresented: $isImporting) {
                DocumentPicker(csvString: $importedCSVString, errorMessage: $errorMessage, totalRowsInFile: $totalRowsInFile)
                    .onDisappear {
                        if let csvString = importedCSVString {
                            parseCSV(csvString)
                        }
                    }
            }
            .alert("Error", isPresented: $showError) {
                Button("OK", role: .cancel) { }
            } message: {
                Text(errorMessage ?? "An error occurred")
            }
            .alert("Delete All Products", isPresented: $showDeleteConfirmation) {
                Button("Delete All", role: .destructive) {
                    deleteAllProducts()
                }
                Button("Cancel", role: .cancel) { }
            } message: {
                Text("Are you sure you want to delete all products from the database? This action cannot be undone.")
            }
        }
    }
    
    // Initial view with import and delete buttons
    private var initialView: some View {
        VStack(spacing: 20) {
            Image(systemName: "doc.text")
                .font(.system(size: 60))
                .foregroundColor(.blue)
            
            Text("Import Products from CSV")
                .font(.title2)
                .fontWeight(.bold)
            
            Text("Use a CSV file with columns for Code, Name, Description, Category, List Price, and Partner Price")
                .font(.subheadline)
                .foregroundColor(.secondary)
                .multilineTextAlignment(.center)
                .padding()
            
            Button(action: {
                isImporting = true
            }) {
                HStack {
                    Image(systemName: "square.and.arrow.down")
                    Text("Select CSV File")
                }
                .frame(minWidth: 200)
                .padding()
                .background(Color.blue)
                .foregroundColor(.white)
                .cornerRadius(10)
            }
            
            // Delete All Products Button
            Button(action: {
                showDeleteConfirmation = true
            }) {
                HStack {
                    Image(systemName: "trash")
                    Text("Delete All Products")
                }
                .frame(minWidth: 200)
                .padding()
                .background(Color.red)
                .foregroundColor(.white)
                .cornerRadius(10)
            }
            .padding(.top, 20)
        }
    }
    
    // Import progress view
    private var importProgressView: some View {
        VStack(spacing: 20) {
            ProgressView(value: progress)
                .progressViewStyle(LinearProgressViewStyle())
                .padding()
            
            if totalBatches > 0 {
                Text("\(status) - Batch \(currentBatchNumber) of \(totalBatches)")
                    .font(.headline)
            } else {
                Text(status)
                    .font(.headline)
            }
            
            // Debug toggle button
            Button(action: { showDebug.toggle() }) {
                Text(showDebug ? "Hide Debug Info" : "Show Debug Info")
                    .foregroundColor(.blue)
                    .padding(.vertical, 8)
            }
            
            // Debug info box
            if showDebug {
                ScrollView {
                    Text(debugText)
                        .font(.system(size: 12, design: .monospaced))
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .padding()
                }
                .frame(height: 200)
                .background(Color.black.opacity(0.1))
                .cornerRadius(8)
            }
            
            Button(action: {
                // Cancel import
                importedCSVString = nil
                isImportingData = false
                progress = 0.0
                status = "Ready to import"
                debugText = ""
                parsedProducts = []
                totalRowsInFile = 0
                currentBatchNumber = 0
                totalBatches = 0
            }) {
                Text("Cancel")
                    .foregroundColor(.red)
                    .padding()
            }
        }
    }
    
    // Product preview view
    private var productPreviewView: some View {
        VStack {
            // Preview header
            HStack {
                Text("Products to Import: \(parsedProducts.count) of \(totalRowsInFile)")
                    .font(.headline)
                
                Spacer()
                
                Button(action: { showDebug.toggle() }) {
                    Text(showDebug ? "Hide Debug" : "Show Debug")
                        .foregroundColor(.blue)
                }
                
                Spacer()
                
                Button(action: {
                    importedCSVString = nil
                    isImportingData = false
                    progress = 0.0
                    status = "Ready to import"
                    debugText = ""
                    parsedProducts = []
                    showParsedProducts = false
                    totalRowsInFile = 0
                }) {
                    Text("Cancel")
                        .foregroundColor(.red)
                }
            }
            .padding(.horizontal)
            
            if showDebug {
                ScrollView {
                    Text(debugText)
                        .font(.system(size: 12, design: .monospaced))
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .padding()
                }
                .frame(height: 200)
                .background(Color.black.opacity(0.1))
                .cornerRadius(8)
                .padding(.horizontal)
            }
            
            // Summary stats
            VStack(spacing: 5) {
                HStack {
                    Text("List: \(formatCurrency(parsedProducts.reduce(0.0) { $0 + $1.listPrice }))")
                        .foregroundColor(.primary)
                    Spacer()
                    Text("Partner: \(formatCurrency(parsedProducts.reduce(0.0) { $0 + $1.partnerPrice }))")
                        .foregroundColor(.blue)
                }
                
                HStack {
                    let avgDiscount = calculateAvgDiscount()
                    Text("Avg Discount: \(String(format: "%.1f%%", avgDiscount))")
                        .foregroundColor(.green)
                    Spacer()
                    
                    let categories = Set(parsedProducts.map { $0.category }).filter { !$0.isEmpty }
                    Text("\(categories.count) Categories")
                        .foregroundColor(.orange)
                }
            }
            .padding()
            .background(Color.gray.opacity(0.2))
            .cornerRadius(8)
            .padding(.horizontal)
            
            // Product table preview
            productTableView
            
            // Import button
            Button(action: {
                isImportingData = true
                saveProducts()
            }) {
                if isImportingData {
                    ProgressView()
                        .progressViewStyle(CircularProgressViewStyle())
                } else {
                    Text("Import \(parsedProducts.count) Products")
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(parsedProducts.isEmpty ? Color.gray : Color.green)
                        .foregroundColor(.white)
                        .cornerRadius(10)
                }
            }
            .disabled(parsedProducts.isEmpty || isImportingData)
            .padding()
        }
    }
    
    private var productTableView: some View {
        VStack(alignment: .leading, spacing: 0) {
            // Table header
            ScrollView(.horizontal, showsIndicators: true) {
                HStack(spacing: 0) {
                    Text("Code")
                        .font(.caption)
                        .fontWeight(.bold)
                        .frame(width: 100, alignment: .leading)
                        .padding(.horizontal, 5)
                    
                    Divider().frame(height: 30)
                    
                    Text("Name")
                        .font(.caption)
                        .fontWeight(.bold)
                        .frame(width: 150, alignment: .leading)
                        .padding(.horizontal, 5)
                    
                    Divider().frame(height: 30)
                    
                    Text("Category")
                        .font(.caption)
                        .fontWeight(.bold)
                        .frame(width: 100, alignment: .leading)
                        .padding(.horizontal, 5)
                    
                    Divider().frame(height: 30)
                    
                    Text("List Price")
                        .font(.caption)
                        .fontWeight(.bold)
                        .frame(width: 90, alignment: .trailing)
                        .padding(.horizontal, 5)
                    
                    Divider().frame(height: 30)
                    
                    Text("Partner")
                        .font(.caption)
                        .fontWeight(.bold)
                        .frame(width: 90, alignment: .trailing)
                        .padding(.horizontal, 5)
                    
                    Divider().frame(height: 30)
                    
                    Text("Discount")
                        .font(.caption)
                        .fontWeight(.bold)
                        .frame(width: 80, alignment: .trailing)
                        .padding(.horizontal, 5)
                }
                .padding(.vertical, 10)
                .background(Color(UIColor.systemGray5))
            }
            
            Divider()
            
            // Product rows
            ScrollView {
                if parsedProducts.isEmpty {
                    Text("No products found")
                        .foregroundColor(.secondary)
                        .padding()
                } else {
                    LazyVStack(spacing: 0) {
                        ForEach(parsedProducts.prefix(50)) { product in
                            HStack(spacing: 0) {
                                Text(product.code)
                                    .font(.system(size: 14))
                                    .frame(width: 100, alignment: .leading)
                                    .padding(.horizontal, 5)
                                    .lineLimit(1)
                                
                                Divider().frame(height: 40)
                                
                                Text(product.name)
                                    .font(.system(size: 14))
                                    .frame(width: 150, alignment: .leading)
                                    .padding(.horizontal, 5)
                                    .lineLimit(1)
                                
                                Divider().frame(height: 40)
                                
                                Text(product.category)
                                    .font(.system(size: 14))
                                    .frame(width: 100, alignment: .leading)
                                    .padding(.horizontal, 5)
                                    .lineLimit(1)
                                
                                Divider().frame(height: 40)
                                
                                Text(formatCurrency(product.listPrice))
                                    .font(.system(size: 14))
                                    .frame(width: 90, alignment: .trailing)
                                    .padding(.horizontal, 5)
                                
                                Divider().frame(height: 40)
                                
                                Text(formatCurrency(product.partnerPrice))
                                    .font(.system(size: 14))
                                    .frame(width: 90, alignment: .trailing)
                                    .padding(.horizontal, 5)
                                
                                Divider().frame(height: 40)
                                
                                let discount = calculateDiscount(list: product.listPrice, partner: product.partnerPrice)
                                Text(String(format: "%.1f%%", discount))
                                    .font(.system(size: 14))
                                    .frame(width: 80, alignment: .trailing)
                                    .padding(.horizontal, 5)
                                    .foregroundColor(discount >= 20 ? .green : (discount >= 10 ? .orange : .red))
                            }
                            .padding(.vertical, 8)
                            .background(Color(UIColor.systemBackground))
                            
                            Divider()
                        }
                        
                        if parsedProducts.count > 50 {
                            Text("... and \(parsedProducts.count - 50) more items")
                                .font(.caption)
                                .foregroundColor(.secondary)
                                .padding()
                        }
                    }
                }
            }
            .frame(height: 300)
        }
        .background(Color(UIColor.systemBackground))
        .cornerRadius(10)
        .padding(.horizontal)
    }
    
    // MARK: - Helper Functions
    
    private func log(_ message: String) {
        debugText += message + "\n"
        print(message)
    }
    
    private func formatCurrency(_ value: Double) -> String {
        let formatter = NumberFormatter()
        formatter.numberStyle = .currency
        formatter.currencySymbol = "$"
        return formatter.string(from: NSNumber(value: value)) ?? "$\(String(format: "%.2f", value))"
    }
    
    private func calculateDiscount(list: Double, partner: Double) -> Double {
        if list <= 0 {
            return 0
        }
        return ((list - partner) / list) * 100
    }
    
    private func calculateAvgDiscount() -> Double {
        if parsedProducts.isEmpty {
            return 0
        }
        
        let totalDiscount = parsedProducts.reduce(0.0) { sum, product in
            return sum + calculateDiscount(list: product.listPrice, partner: product.partnerPrice)
        }
        
        return totalDiscount / Double(parsedProducts.count)
    }
    
    // MARK: - CSV Parsing
    
    private func parseCSV(_ csvString: String) {
        isImportingData = true
        progress = 0.1
        status = "Analyzing CSV file..."
        debugText = ""
        parsedProducts = []
        
        log("Starting CSV parsing of \(csvString.count) characters")
        
        // Process in background
        DispatchQueue.global(qos: .userInitiated).async {
            // Detect line endings
            var lineEnding = "\n"
            if csvString.contains("\r\n") {
                lineEnding = "\r\n"
                log("Using Windows line endings (CRLF)")
            } else if csvString.contains("\r") {
                lineEnding = "\r"
                log("Using Mac line endings (CR)")
            } else {
                log("Using Unix line endings (LF)")
            }
            
            // Split into lines
            let lines = csvString.components(separatedBy: lineEnding)
                               .filter { !$0.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty }
            
            log("Found \(lines.count) non-empty lines")
            
            if lines.isEmpty {
                DispatchQueue.main.async {
                    errorMessage = "CSV file is empty or contains no valid data"
                    showError = true
                    isImportingData = false
                }
                return
            }
            
            // Determine separator and analyze header
            let firstLine = lines[0]
            var separator = ","
            
            // Try to detect separator
            if firstLine.contains("\t") {
                separator = "\t"
                log("Detected tab separator")
            } else if firstLine.contains(";") {
                separator = ";"
                log("Detected semicolon separator")
            } else {
                log("Using comma separator")
            }
            
            // Process in chunks to handle large files
            DispatchQueue.main.async {
                status = "Processing CSV data..."
                progress = 0.2
            }
            
            // Increased chunk size for better performance with large files
            let chunkSize = 5000
            let chunks = stride(from: 0, to: lines.count, by: chunkSize).map {
                Array(lines[$0..<min($0 + chunkSize, lines.count)])
            }
            
            log("Split into \(chunks.count) chunks of up to \(chunkSize) lines each")
            
            var allProducts: [ImportProduct] = []
            if lines.isEmpty {
                DispatchQueue.main.async {
                    errorMessage = "No data found in CSV file"
                    showError = true
                    isImportingData = false
                }
                return
            }
            
            let headerFields = parseLine(lines[0], separator: separator)
            
            // Map column indices with more comprehensive guesses
            let codeIdx = findColumnIndex(headerFields, possibleNames: ["code", "id", "sku", "product id", "product code", "product_id", "item code", "item id", "item_id", "product_code"])
            let nameIdx = findColumnIndex(headerFields, possibleNames: ["name", "product name", "title", "product_name", "item name", "item_name", "description", "product", "item"])
            let descIdx = findColumnIndex(headerFields, possibleNames: ["desc", "description", "details", "specs", "specification", "product description", "product_description", "desc.", "long description", "long_description"])
            let catIdx = findColumnIndex(headerFields, possibleNames: ["category", "type", "group", "cat", "product category", "product_category", "product type", "product_type", "department"])
            let listPriceIdx = findColumnIndex(headerFields, possibleNames: ["list price", "price", "msrp", "retail", "list_price", "retail price", "selling price", "sell price", "public price", "sales price", "customer price", "price usd"])
            let partnerPriceIdx = findColumnIndex(headerFields, possibleNames: ["partner price", "cost", "wholesale", "partner", "partner_price", "dealer price", "dealer_price", "wholesale price", "wholesale_price", "buy price", "buying price", "cost price", "supplier price"])
            
            log("Column mapping: code=\(codeIdx), name=\(nameIdx), desc=\(descIdx), cat=\(catIdx), list=\(listPriceIdx), partner=\(partnerPriceIdx)")
            
            if codeIdx < 0 || nameIdx < 0 || listPriceIdx < 0 {
                DispatchQueue.main.async {
                    errorMessage = "Could not identify required columns. Make sure your CSV has Code, Name, and List Price columns."
                    showError = true
                    isImportingData = false
                }
                return
            }
            
            // Process each chunk
            for (i, chunk) in chunks.enumerated() {
                if i == 0 && isLikelyHeader(chunk[0]) {
                    // Skip header row
                    if chunk.count > 1 {
                        processChunk(Array(chunk.dropFirst()), separator: separator, codeIdx: codeIdx, nameIdx: nameIdx,
                                    descIdx: descIdx, catIdx: catIdx, listPriceIdx: listPriceIdx,
                                    partnerPriceIdx: partnerPriceIdx, products: &allProducts)
                    }
                } else {
                    processChunk(Array(chunk), separator: separator, codeIdx: codeIdx, nameIdx: nameIdx,
                                descIdx: descIdx, catIdx: catIdx, listPriceIdx: listPriceIdx,
                                partnerPriceIdx: partnerPriceIdx, products: &allProducts)
                }
                
                DispatchQueue.main.async {
                    progress = 0.2 + (0.7 * Float(i + 1) / Float(chunks.count))
                    status = "Processed \(min((i + 1) * chunkSize, lines.count)) of \(lines.count) lines..."
                }
            }
            
            DispatchQueue.main.async {
                parsedProducts = allProducts
                log("Successfully parsed \(allProducts.count) products")
                status = "Ready to import \(allProducts.count) products"
                progress = 1.0
                isImportingData = false
                showParsedProducts = true
                
                // Update total rows for reference
                totalRowsInFile = lines.count - (isLikelyHeader(lines[0]) ? 1 : 0)
            }
        }
    }
    
    private func processChunk(_ lines: [String], separator: String, codeIdx: Int, nameIdx: Int,
                             descIdx: Int, catIdx: Int, listPriceIdx: Int, partnerPriceIdx: Int,
                             products: inout [ImportProduct]) {
        for line in lines {
            let fields = parseLine(line, separator: separator)
            
            // Skip rows without enough fields for required columns
            let requiredIdx = max(codeIdx, nameIdx, listPriceIdx)
            if fields.count <= requiredIdx {
                continue
            }
            
            // Extract fields with safe access
            let code = (codeIdx >= 0 && codeIdx < fields.count) ? fields[codeIdx].trimmingCharacters(in: .whitespacesAndNewlines) : ""
            let name = (nameIdx >= 0 && nameIdx < fields.count) ? fields[nameIdx].trimmingCharacters(in: .whitespacesAndNewlines) : ""
            let description = (descIdx >= 0 && descIdx < fields.count) ? fields[descIdx].trimmingCharacters(in: .whitespacesAndNewlines) : ""
            let category = (catIdx >= 0 && catIdx < fields.count) ? fields[catIdx].trimmingCharacters(in: .whitespacesAndNewlines) : ""
            
            let listPriceStr = (listPriceIdx >= 0 && listPriceIdx < fields.count) ? fields[listPriceIdx].trimmingCharacters(in: .whitespacesAndNewlines) : "0"
            let partnerPriceStr = (partnerPriceIdx >= 0 && partnerPriceIdx < fields.count) ? fields[partnerPriceIdx].trimmingCharacters(in: .whitespacesAndNewlines) : "0"
            
            // Parse prices safely
            let listPrice = parsePrice(listPriceStr)
            let partnerPrice = parsePrice(partnerPriceStr)
            
            // Only add valid products
            if !code.isEmpty && !name.isEmpty && listPrice > 0 {
                let product = ImportProduct(
                    code: code,
                    name: name,
                    description: description,
                    category: category,
                    listPrice: listPrice,
                    partnerPrice: partnerPrice > 0 ? partnerPrice : (listPrice * 0.75)
                )
                products.append(product)
            }
        }
    }
    
    private func parseLine(_ line: String, separator: String) -> [String] {
        // More robust CSV parsing that handles quotes correctly
        var fields: [String] = []
        var currentField = ""
        var inQuotes = false
        var previousChar: Character? = nil
        
        for char in line {
            if char == "\"" {
                if inQuotes && previousChar == "\"" {
                    // Double quote inside quotes - add a single quote
                    currentField += String(char)
                    previousChar = nil // Reset so we don't handle this twice
                } else {
                    // Toggle quote state
                    inQuotes = !inQuotes
                }
            } else if String(char) == separator && !inQuotes {
                fields.append(currentField.trimmingCharacters(in: .whitespacesAndNewlines))
                currentField = ""
            } else {
                currentField.append(char)
            }
            
            previousChar = char
        }
        
        // Add the last field
        fields.append(currentField.trimmingCharacters(in: .whitespacesAndNewlines))
        
        return fields
    }
    
    private func findColumnIndex(_ headers: [String], possibleNames: [String]) -> Int {
        // Convert headers to lowercase for case-insensitive matching
        let lowercaseHeaders = headers.map { $0.lowercased().trimmingCharacters(in: .whitespacesAndNewlines) }
        
        // First try exact matches
        for name in possibleNames {
            if let index = lowercaseHeaders.firstIndex(of: name.lowercased()) {
                return index
            }
        }
        
        // Then try partial matches
        for name in possibleNames {
            for (index, header) in lowercaseHeaders.enumerated() {
                if header.contains(name.lowercased()) {
                    return index
                }
            }
        }
        
        return -1
    }
    
    private func isLikelyHeader(_ line: String) -> Bool {
        let lowercased = line.lowercased()
        let headerTerms = ["product", "code", "name", "description", "price", "category", "id", "sku", "cost", "partner"]
        
        var termCount = 0
        for term in headerTerms {
            if lowercased.contains(term) {
                termCount += 1
            }
        }
        
        return termCount >= 2
    }
    
    private func parsePrice(_ str: String) -> Double {
        // Remove currency symbols
        var cleaned = str
        for symbol in ["$", "€", "£", "¥", "₹", "₽", "¢", "₩", "₴", "₦"] {
            cleaned = cleaned.replacingOccurrences(of: symbol, with: "")
        }
        
        // Remove spaces and non-breaking spaces
        cleaned = cleaned.replacingOccurrences(of: " ", with: "")
        cleaned = cleaned.replacingOccurrences(of: "\u{00A0}", with: "")
        
        // Replace comma with period for decimal
        cleaned = cleaned.replacingOccurrences(of: ",", with: ".")
        
        // Remove thousands separators (periods in numbers like 1.000.000)
        let components = cleaned.components(separatedBy: ".")
        if components.count > 2 {
            // Has multiple periods - could be thousands separators
            var result = components[0]
            for i in 1..<components.count {
                if i == components.count - 1 {
                    // Last component is decimal part
                    result += "." + components[i]
                } else {
                    // Intermediate components are thousands separators
                    result += components[i]
                }
            }
            cleaned = result
        }
        
        // Remove any remaining non-numeric characters except decimal point
        cleaned = cleaned.trimmingCharacters(in: CharacterSet.decimalDigits.inverted.subtracting(CharacterSet(charactersIn: ".")))
        
        return Double(cleaned) ?? 0.0
    }
    
    // MARK: - Database Operations
    
    private func saveProducts() {
        status = "Saving products to database..."
        progress = 0.0
        log("Starting to save \(parsedProducts.count) products")
        
        // Use a background context
        let backgroundContext = PersistenceController.shared.container.newBackgroundContext()
        backgroundContext.mergePolicy = NSMergeByPropertyObjectTrumpMergePolicy
        
        // Process in batches - increased batch size for better performance
        let batchSize = 1000
        let batches = stride(from: 0, to: parsedProducts.count, by: batchSize).map {
            Array(parsedProducts[$0..<min($0 + batchSize, parsedProducts.count)])
        }
        
        log("Split into \(batches.count) batches for saving")
        
        DispatchQueue.main.async {
            totalBatches = batches.count
        }
        
        var savedCount = 0
        
        // Save first batch and continue with others
        saveBatch(0, batches, backgroundContext, savedCount)
    }
    
    private func saveBatch(_ index: Int, _ batches: [[ImportProduct]], _ context: NSManagedObjectContext, _ savedSoFar: Int) {
        // Check if we're done
        if index >= batches.count {
            DispatchQueue.main.async {
                log("All products saved successfully!")
                errorMessage = "Successfully imported \(savedSoFar) products!"
                showError = true
                isImportingData = false
                
                // Return to initial state
                importedCSVString = nil
                parsedProducts = []
                progress = 0.0
                status = "Ready to import"
                showParsedProducts = false
                totalBatches = 0
                currentBatchNumber = 0
                
                // Dismiss the sheet
                presentationMode.wrappedValue.dismiss()
            }
            return
        }
        
        let batch = batches[index]
        let batchSize = 1000 // Define the same batchSize here
        let startIndex = index * batchSize
        
        DispatchQueue.main.async {
            status = "Saving batch \(index+1) of \(batches.count) (\(startIndex+1) to \(startIndex+batch.count))"
            progress = Float(index) / Float(batches.count)
            currentBatchNumber = index + 1
        }
        
        // Save this batch
        context.perform {
            autoreleasepool {
                // Prepare a dictionary for quick lookup of existing products
                var existingProductsByCode: [String: Product] = [:]
                
                // Collect all product codes in this batch
                let productCodes = batch.map { $0.code }
                
                // Fetch all products with these codes
                let fetchRequest = NSFetchRequest<Product>(entityName: "Product")
                fetchRequest.predicate = NSPredicate(format: "code IN %@", productCodes)
                
                do {
                    let existingProducts = try context.fetch(fetchRequest)
                    for product in existingProducts {
                        if let code = product.code {
                            existingProductsByCode[code] = product
                        }
                    }
                    
                    log("Found \(existingProducts.count) existing products to update")
                } catch {
                    log("Error fetching existing products: \(error.localizedDescription)")
                }
                
                // Process batch
                var updatedCount = 0
                var createdCount = 0
                
                for productData in batch {
                    if let existingProduct = existingProductsByCode[productData.code] {
                        // Update existing product
                        existingProduct.name = productData.name
                        existingProduct.setValue(productData.description, forKey: "desc")
                        existingProduct.category = productData.category
                        existingProduct.listPrice = productData.listPrice
                        existingProduct.partnerPrice = productData.partnerPrice
                        updatedCount += 1
                    } else {
                        // Create new product
                        let newProduct = NSEntityDescription.insertNewObject(forEntityName: "Product", into: context) as! Product
                        newProduct.id = UUID()
                        newProduct.code = productData.code
                        newProduct.name = productData.name
                        newProduct.setValue(productData.description, forKey: "desc")
                        newProduct.category = productData.category
                        newProduct.listPrice = productData.listPrice
                        newProduct.partnerPrice = productData.partnerPrice
                        createdCount += 1
                    }
                }
                
                // Save the context
                do {
                    try context.save()
                    
                    // Update count and continue with next batch
                    let newSavedCount = savedSoFar + batch.count
                    log("Saved batch \(index+1): Updated \(updatedCount), Created \(createdCount). Total saved so far: \(newSavedCount)")
                    
                    // Process next batch with a short delay to allow UI updates
                    DispatchQueue.main.asyncAfter(deadline: .now() + 0.01) {
                        saveBatch(index + 1, batches, context, newSavedCount)
                    }
                } catch {
                    DispatchQueue.main.async {
                        errorMessage = "Failed to save products: \(error.localizedDescription)"
                        log("Error saving batch \(index+1): \(error.localizedDescription)")
                        showError = true
                        isImportingData = false
                    }
                }
            }
        }
    }
    
    private func deleteAllProducts() {
        log("Starting to delete all products...")
        isImportingData = true
        status = "Deleting all products..."
        progress = 0.0
        
        // Use a background context
        let backgroundContext = PersistenceController.shared.container.newBackgroundContext()
        
        backgroundContext.perform {
            do {
                // Count products
                let countRequest = NSFetchRequest<Product>(entityName: "Product")
                let count = try backgroundContext.count(for: countRequest)
                
                log("Found \(count) products to delete")
                
                // Delete in batches of 1000
                let batchSize = 1000
                var deleted = 0
                var totalBatches = Int(ceil(Double(count) / Double(batchSize)))
                
                DispatchQueue.main.async {
                    self.totalBatches = totalBatches
                }
                
                while deleted < count {
                    autoreleasepool {
                        do {  // Add a new do-catch block here
                            let fetchRequest = NSFetchRequest<NSFetchRequestResult>(entityName: "Product")
                            fetchRequest.fetchLimit = batchSize
                            
                            // Use batch delete request for better performance
                            let batchDeleteRequest = NSBatchDeleteRequest(fetchRequest: fetchRequest)
                            batchDeleteRequest.resultType = .resultTypeObjectIDs
                            
                            // HERE'S THE FIX: Add 'try' keyword
                            let result = try backgroundContext.execute(batchDeleteRequest) as! NSBatchDeleteResult
                            let objectIDs = result.result as! [NSManagedObjectID]
                            
                            // Update the view context with changes
                            let changes = [NSDeletedObjectsKey: objectIDs]
                            NSManagedObjectContext.mergeChanges(fromRemoteContextSave: changes, into: [viewContext])
                            
                            deleted += objectIDs.count
                            
                            DispatchQueue.main.async {
                                self.progress = Float(deleted) / Float(count)
                                self.status = "Deleted \(deleted) of \(count) products"
                                self.currentBatchNumber = Int(ceil(Double(deleted) / Double(batchSize)))
                                log("Deleted batch - total deleted: \(deleted) of \(count)")
                            }
                        } catch {
                            // Handle any errors during batch deletion
                            DispatchQueue.main.async {
                                log("Error during batch deletion: \(error.localizedDescription)")
                            }
                        }
                    }
                }
                
                DispatchQueue.main.async {
                    log("Successfully deleted \(count) products")
                    errorMessage = "Successfully deleted \(count) products"
                    showError = true
                    isImportingData = false
                    totalBatches = 0
                    currentBatchNumber = 0
                }
            } catch {
                DispatchQueue.main.async {
                    log("Error deleting products: \(error.localizedDescription)")
                    errorMessage = "Error deleting products: \(error.localizedDescription)"
                    showError = true
                    isImportingData = false
                }
            }
        }
    
    }
}

// Document picker for CSV files with optimizations for large files
struct DocumentPicker: UIViewControllerRepresentable {
    @Binding var csvString: String?
    @Binding var errorMessage: String?
    @Binding var totalRowsInFile: Int
    
    func makeUIViewController(context: Context) -> UIDocumentPickerViewController {
        let supportedTypes: [UTType] = [UTType.commaSeparatedText, UTType.text, UTType.plainText, UTType.data]
        
        let picker = UIDocumentPickerViewController(forOpeningContentTypes: supportedTypes)
        picker.delegate = context.coordinator
        picker.allowsMultipleSelection = false
        return picker
    }
    
    func updateUIViewController(_ uiViewController: UIDocumentPickerViewController, context: Context) {}
    
    func makeCoordinator() -> Coordinator {
        Coordinator(self)
    }
    
    class Coordinator: NSObject, UIDocumentPickerDelegate {
        let parent: DocumentPicker
        
        init(_ parent: DocumentPicker) {
            self.parent = parent
        }
        
        func documentPicker(_ controller: UIDocumentPickerViewController, didPickDocumentsAt urls: [URL]) {
            guard let url = urls.first else {
                parent.errorMessage = "No file selected"
                return
            }
            
            guard url.startAccessingSecurityScopedResource() else {
                parent.errorMessage = "Cannot access the file"
                return
            }
            
            defer { url.stopAccessingSecurityScopedResource() }
            
            // Get file size
            do {
                let attributes = try FileManager.default.attributesOfItem(atPath: url.path)
                let fileSize = attributes[.size] as? Int64 ?? 0
                
                // For large files, use a different approach
                if fileSize > 10_000_000 { // 10MB
                    // Count lines in the file
                    if let lineCount = countLinesInFile(at: url) {
                        parent.totalRowsInFile = lineCount
                    }
                    
                    // Process file in chunks
                    if let string = readLargeFile(at: url) {
                        parent.csvString = string
                    } else {
                        parent.errorMessage = "Failed to read large file - insufficient memory"
                    }
                    return
                }
                
                // For smaller files, read the entire file at once
                do {
                    let data = try Data(contentsOf: url)
                    
                    // Count lines
                    if let string = String(data: data, encoding: .utf8) {
                        parent.totalRowsInFile = string.components(separatedBy: .newlines).count
                    }
                    
                    // Try UTF-8 first
                    if let string = String(data: data, encoding: .utf8) {
                        parent.csvString = string
                        return
                    }
                    
                    // Try ISO Latin 1
                    if let string = String(data: data, encoding: .isoLatin1) {
                        parent.csvString = string
                        return
                    }
                    
                    // Try Windows CP1252
                    if let string = String(data: data, encoding: .windowsCP1252) {
                        parent.csvString = string
                        return
                    }
                    
                    // Fallback
                    let fallbackString = String(decoding: data, as: UTF8.self)
                    if !fallbackString.isEmpty {
                        parent.csvString = fallbackString
                    } else {
                        parent.errorMessage = "Failed to convert file to text - unsupported encoding"
                    }
                } catch {
                    parent.errorMessage = "Failed to read file: \(error.localizedDescription)"
                }
            } catch {
                parent.errorMessage = "Failed to get file attributes: \(error.localizedDescription)"
            }
        }
        
        // Count lines in a large file
        private func countLinesInFile(at url: URL) -> Int? {
            do {
                let fileHandle = try FileHandle(forReadingFrom: url)
                defer { fileHandle.closeFile() }
                
                var lineCount = 0
                let chunkSize = 8192 // Read in chunks of 8KB
                var buffer = Data(capacity: chunkSize)
                
                while let chunk = try fileHandle.read(upToCount: chunkSize) {
                    if chunk.isEmpty { break }
                    
                    buffer.append(chunk)
                    
                    // Count newlines in buffer
                    if let string = String(data: buffer, encoding: .utf8) {
                        lineCount += string.components(separatedBy: .newlines).count - 1
                        
                        // Keep only the last line to handle potential partial lines
                        if let lastNewlineRange = string.range(of: "\n", options: .backwards) {
                            let lastLine = string[lastNewlineRange.upperBound...]
                            buffer = Data(lastLine.utf8)
                        } else {
                            buffer = Data()
                        }
                    }
                }
                
                // Count final line if buffer isn't empty
                if !buffer.isEmpty {
                    lineCount += 1
                }
                
                return lineCount
            } catch {
                print("Error counting lines: \(error)")
                return nil
            }
        }
        
        private func readLargeFile(at url: URL) -> String? {
            do {
                // Create a temporary file to store the processed output
                let tempDirectory = FileManager.default.temporaryDirectory
                let tempFileURL = tempDirectory.appendingPathComponent(UUID().uuidString)
                
                // Create file handle for reading
                let fileHandle = try FileHandle(forReadingFrom: url)
                defer { fileHandle.closeFile() }
                
                // Create file handle for writing
                FileManager.default.createFile(atPath: tempFileURL.path, contents: nil)
                let outputFileHandle = try FileHandle(forWritingTo: tempFileURL)
                defer {
                    outputFileHandle.closeFile()
                    try? FileManager.default.removeItem(at: tempFileURL)
                }
                
                // Process file in chunks
                let chunkSize = 1_000_000 // 1MB chunks
                while let chunk = try fileHandle.read(upToCount: chunkSize) {
                    if chunk.isEmpty { break }
                    
                    // Process chunk
                    outputFileHandle.write(chunk)
                }
                
                // Read the processed file - THIS IS THE FIX: adding "try" here
                return try String(contentsOf: tempFileURL)
                
            } catch {
                print("Error reading large file: \(error)")
                return nil
            }
        
        }
    }
}



/* ================================================== */
/* File: ./ProposalCRM/Views/Products/ProductTableView.swift */
/* ================================================== */

//
//  ProductTableView.swift
//  ProposalCRM
//
//  Created by Ali Sami Gözükırmızı on 19.04.2025.
//


import SwiftUI
import CoreData

struct ProductTableView: View {
    @ObservedObject var proposal: Proposal
    let onDelete: (ProposalItem) -> Void
    let onEdit: (ProposalItem) -> Void
    @Environment(\.colorScheme) var colorScheme
    
    var body: some View {
        VStack(spacing: 0) {
            // Table header with scrollable view for all columns
            ScrollView(.horizontal, showsIndicators: true) {
                HStack(spacing: 0) {
                    // Product Name
                    Text("Product Name")
                        .font(.caption)
                        .fontWeight(.bold)
                        .frame(width: 180, alignment: .leading)
                        .padding(.horizontal, 5)
                    
                    Divider().frame(height: 36)
                    
                    // Qty
                    Text("Qty")
                        .font(.caption)
                        .fontWeight(.bold)
                        .frame(width: 50, alignment: .center)
                        .padding(.horizontal, 5)
                    
                    Divider().frame(height: 36)
                    
                    // Unit Partner Price
                    Text("Unit Partner Price")
                        .font(.caption)
                        .fontWeight(.bold)
                        .frame(width: 120, alignment: .trailing)
                        .padding(.horizontal, 5)
                    
                    Divider().frame(height: 36)
                    
                    // Unit List Price
                    Text("Unit List Price")
                        .font(.caption)
                        .fontWeight(.bold)
                        .frame(width: 120, alignment: .trailing)
                        .padding(.horizontal, 5)
                    
                    Divider().frame(height: 36)
                    
                    // Multiplier
                    Text("Multiplier")
                        .font(.caption)
                        .fontWeight(.bold)
                        .frame(width: 80, alignment: .center)
                        .padding(.horizontal, 5)
                    
                    Divider().frame(height: 36)
                    
                    // Discount
                    Text("Discount")
                        .font(.caption)
                        .fontWeight(.bold)
                        .frame(width: 80, alignment: .center)
                        .padding(.horizontal, 5)
                    
                    Divider().frame(height: 36)
                    
                    // Ext Partner Price
                    Text("Ext Partner Price")
                        .font(.caption)
                        .fontWeight(.bold)
                        .frame(width: 120, alignment: .trailing)
                        .padding(.horizontal, 5)
                    
                    Divider().frame(height: 36)
                    
                    // Ext List Price
                    Text("Ext List Price")
                        .font(.caption)
                        .fontWeight(.bold)
                        .frame(width: 120, alignment: .trailing)
                        .padding(.horizontal, 5)
                    
                    Divider().frame(height: 36)
                    
                    // Ext Customer Price
                    Text("Ext Customer Price")
                        .font(.caption)
                        .fontWeight(.bold)
                        .frame(width: 120, alignment: .trailing)
                        .padding(.horizontal, 5)
                    
                    Divider().frame(height: 36)
                    
                    // Total Profit
                    Text("Total Profit")
                        .font(.caption)
                        .fontWeight(.bold)
                        .frame(width: 100, alignment: .trailing)
                        .padding(.horizontal, 5)
                    
                    Divider().frame(height: 36)
                    
                    // Custom Tax?
                    Text("Custom Tax?")
                        .font(.caption)
                        .fontWeight(.bold)
                        .frame(width: 90, alignment: .center)
                        .padding(.horizontal, 5)
                    
                    Divider().frame(height: 36)
                    
                    // Actions
                    Text("Act")
                        .font(.caption)
                        .fontWeight(.bold)
                        .frame(width: 60, alignment: .center)
                        .padding(.horizontal, 5)
                }
                .padding(.vertical, 10)
                .background(Color.black.opacity(0.3))
            }
            
            Divider().background(Color.gray)
            
            // Main table content with rows
            if proposal.itemsArray.isEmpty {
                Text("No products added yet")
                    .foregroundColor(.gray)
                    .padding()
                    .frame(maxWidth: .infinity)
                    .background(Color.black.opacity(0.2))
            } else {
                ScrollView {
                    VStack(spacing: 0) {
                        ForEach(proposal.itemsArray, id: \.self) { item in
                            ScrollView(.horizontal, showsIndicators: true) {
                                HStack(spacing: 0) {
                                    // Product Name with code
                                    VStack(alignment: .leading, spacing: 2) {
                                        Text(item.productName)
                                            .font(.system(size: 14))
                                            .foregroundColor(.white)
                                        Text(item.productCode)
                                            .font(.system(size: 12))
                                            .foregroundColor(.gray)
                                    }
                                    .frame(width: 180, alignment: .leading)
                                    .padding(.horizontal, 5)
                                    
                                    Divider().frame(height: 40)
                                    
                                    // Quantity
                                    Text("\(Int(item.quantity))")
                                        .font(.system(size: 14))
                                        .frame(width: 50, alignment: .center)
                                        .padding(.horizontal, 5)
                                    
                                    Divider().frame(height: 40)
                                    
                                    // Unit Partner Price
                                    let partnerPrice = item.product?.partnerPrice ?? 0
                                    Text(String(format: "%.2f", partnerPrice))
                                        .font(.system(size: 14))
                                        .frame(width: 120, alignment: .trailing)
                                        .padding(.horizontal, 5)
                                    
                                    Divider().frame(height: 40)
                                    
                                    // Unit List Price
                                    let listPrice = item.product?.listPrice ?? 0
                                    Text(String(format: "%.2f", listPrice))
                                        .font(.system(size: 14))
                                        .frame(width: 120, alignment: .trailing)
                                        .padding(.horizontal, 5)
                                    
                                    Divider().frame(height: 40)
                                    
                                    // Multiplier (default to 1.00)
                                    Text("1.00")
                                        .font(.system(size: 14))
                                        .frame(width: 80, alignment: .center)
                                        .padding(.horizontal, 5)
                                    
                                    Divider().frame(height: 40)
                                    
                                    // Discount
                                    Text(String(format: "%.1f%%", item.discount))
                                        .font(.system(size: 14))
                                        .frame(width: 80, alignment: .center)
                                        .padding(.horizontal, 5)
                                    
                                    Divider().frame(height: 40)
                                    
                                    // Ext Partner Price
                                    let extPartnerPrice = partnerPrice * item.quantity
                                    Text(String(format: "%.2f", extPartnerPrice))
                                        .font(.system(size: 14))
                                        .frame(width: 120, alignment: .trailing)
                                        .padding(.horizontal, 5)
                                    
                                    Divider().frame(height: 40)
                                    
                                    // Ext List Price
                                    let extListPrice = listPrice * item.quantity
                                    Text(String(format: "%.2f", extListPrice))
                                        .font(.system(size: 14))
                                        .frame(width: 120, alignment: .trailing)
                                        .padding(.horizontal, 5)
                                    
                                    Divider().frame(height: 40)
                                    
                                    // Ext Customer Price (amount)
                                    Text(String(format: "%.2f", item.amount))
                                        .font(.system(size: 14))
                                        .frame(width: 120, alignment: .trailing)
                                        .padding(.horizontal, 5)
                                    
                                    Divider().frame(height: 40)
                                    
                                    // Total Profit
                                    let profit = item.amount - extPartnerPrice
                                    Text(String(format: "%.2f", profit))
                                        .font(.system(size: 14))
                                        .foregroundColor(profit > 0 ? .green : .red)
                                        .frame(width: 100, alignment: .trailing)
                                        .padding(.horizontal, 5)
                                    
                                    Divider().frame(height: 40)
                                    
                                    // Custom Tax?
                                    Text("No")
                                        .font(.system(size: 14))
                                        .frame(width: 90, alignment: .center)
                                        .padding(.horizontal, 5)
                                    
                                    Divider().frame(height: 40)
                                    
                                    // Action buttons
                                    HStack(spacing: 15) {
                                        Button(action: {
                                            onEdit(item)
                                        }) {
                                            Image(systemName: "pencil")
                                                .foregroundColor(.blue)
                                        }
                                        
                                        Button(action: {
                                            onDelete(item)
                                        }) {
                                            Image(systemName: "trash")
                                                .foregroundColor(.red)
                                        }
                                    }
                                    .frame(width: 60, alignment: .center)
                                }
                                .padding(.vertical, 8)
                            }
                            .background(Color.black.opacity(0.2))
                            
                            Divider().background(Color.gray.opacity(0.5))
                        }
                    }
                }
            }
        }
        .background(Color.black.opacity(0.1))
        .cornerRadius(10)
        .overlay(
            RoundedRectangle(cornerRadius: 10)
                .stroke(Color.gray.opacity(0.3), lineWidth: 1)
        )
    }
}

// Usage in ProposalDetailView:
struct ProductsSection: View {
    @ObservedObject var proposal: Proposal
    
    var body: some View {
        VStack(alignment: .leading, spacing: 10) {
            HStack {
                Text("Products")
                    .font(.title2)
                    .fontWeight(.bold)
                    .foregroundColor(.white)
                
                Spacer()
                
                Button(action: { /* show item selection */ }) {
                    Label("Add Products", systemImage: "plus")
                        .foregroundColor(.blue)
                }
            }
            
            ProductTableView(
                proposal: proposal,
                onDelete: { item in
                    // Delete item implementation
                },
                onEdit: { item in
                    // Edit item implementation
                }
            )
        }
        .padding(.horizontal)
    }
}


/* ================================================== */
/* File: ./ProposalCRM/Views/Proposals/AttachmentsView.swift */
/* ================================================== */

//
//  AttachmentsView.swift
//  ProposalCRM
//
//  Created by Ali Sami Gözükırmızı on 17.04.2025.
//

// AttachmentsView.swift
// Manage file attachments for proposals

import SwiftUI
import UniformTypeIdentifiers

struct ProposalAttachment: Identifiable {
    let id = UUID()
    let name: String
    let fileType: String
    let date: Date
    var fileSize: Int64
    var url: URL?
    
    var formattedSize: String {
        let formatter = ByteCountFormatter()
        formatter.allowedUnits = [.useKB, .useMB]
        formatter.countStyle = .file
        return formatter.string(fromByteCount: fileSize)
    }
    
    var formattedDate: String {
        let formatter = DateFormatter()
        formatter.dateStyle = .short
        formatter.timeStyle = .short
        return formatter.string(from: date)
    }
    
    var iconName: String {
        switch fileType.lowercased() {
        case "pdf":
            return "doc.fill"
        case "jpg", "jpeg", "png", "heic":
            return "photo.fill"
        case "doc", "docx":
            return "doc.text.fill"
        case "xls", "xlsx":
            return "tablecells.fill"
        case "ppt", "pptx":
            return "chart.bar.doc.horizontal.fill"
        default:
            return "doc.fill"
        }
    }
    
    var color: Color {
        switch fileType.lowercased() {
        case "pdf":
            return .red
        case "jpg", "jpeg", "png", "heic":
            return .blue
        case "doc", "docx":
            return .indigo
        case "xls", "xlsx":
            return .green
        case "ppt", "pptx":
            return .orange
        default:
            return .gray
        }
    }
}

struct AttachmentsView: View {
    @ObservedObject var proposal: Proposal
    @Binding var attachments: [ProposalAttachment]
    @State private var isShowingDocumentPicker = false
    @State private var selectedAttachment: ProposalAttachment?
    @State private var showingAttachmentOptions = false
    
    var body: some View {
        VStack(alignment: .leading, spacing: 10) {
            HStack {
                Text("Attachments")
                    .font(.title2)
                    .fontWeight(.bold)
                
                Spacer()
                
                Button(action: {
                    isShowingDocumentPicker = true
                }) {
                    Label("Add", systemImage: "paperclip")
                }
            }
            
            Divider()
            
            if attachments.isEmpty {
                HStack {
                    Spacer()
                    VStack(spacing: 12) {
                        Image(systemName: "paperclip")
                            .font(.system(size: 40))
                            .foregroundColor(.gray)
                        Text("No attachments yet")
                            .foregroundColor(.gray)
                    }
                    .padding(.vertical, 40)
                    Spacer()
                }
                .background(Color.gray.opacity(0.1))
                .cornerRadius(8)
            } else {
                ScrollView {
                    VStack(spacing: 0) {
                        ForEach(attachments) { attachment in
                            Button(action: {
                                selectedAttachment = attachment
                                showingAttachmentOptions = true
                            }) {
                                HStack {
                                    Image(systemName: attachment.iconName)
                                        .font(.title2)
                                        .foregroundColor(attachment.color)
                                        .frame(width: 40)
                                    
                                    VStack(alignment: .leading, spacing: 4) {
                                        Text(attachment.name)
                                            .font(.headline)
                                            .foregroundColor(.primary)
                                        
                                        HStack {
                                            Text(attachment.formattedSize)
                                                .font(.caption)
                                                .foregroundColor(.secondary)
                                            
                                            Text("•")
                                                .foregroundColor(.secondary)
                                            
                                            Text(attachment.formattedDate)
                                                .font(.caption)
                                                .foregroundColor(.secondary)
                                        }
                                    }
                                    
                                    Spacer()
                                    
                                    Image(systemName: "chevron.right")
                                        .foregroundColor(.gray)
                                }
                                .padding(12)
                            }
                            .buttonStyle(PlainButtonStyle())
                            
                            Divider()
                        }
                    }
                }
                .background(Color(UIColor.secondarySystemBackground).opacity(0.5))
                .cornerRadius(8)
            }
        }
        .sheet(isPresented: $isShowingDocumentPicker) {
            DocumentPickerView(attachments: $attachments)
        }
        .actionSheet(isPresented: $showingAttachmentOptions, content: {
            ActionSheet(
                title: Text(selectedAttachment?.name ?? "Attachment"),
                message: Text("Choose an action"),
                buttons: [
                    .default(Text("View")) {
                        // View attachment action
                    },
                    .default(Text("Share")) {
                        // Share attachment action
                    },
                    .destructive(Text("Delete")) {
                        if let selected = selectedAttachment,
                           let index = attachments.firstIndex(where: { $0.id == selected.id }) {
                            attachments.remove(at: index)
                        }
                    },
                    .cancel()
                ]
            )
        })
    }
}

struct DocumentPickerView: UIViewControllerRepresentable {
    @Binding var attachments: [ProposalAttachment]
    @Environment(\.presentationMode) var presentationMode
    
    func makeUIViewController(context: Context) -> UIDocumentPickerViewController {
        let supportedTypes: [UTType] = [
            .pdf,
            .jpeg,
            .png,
            .text,
            .plainText,
            .image,
            .spreadsheet,
            .presentation
        ]
        
        let picker = UIDocumentPickerViewController(forOpeningContentTypes: supportedTypes)
        picker.allowsMultipleSelection = true
        picker.delegate = context.coordinator
        return picker
    }
    
    func updateUIViewController(_ uiViewController: UIDocumentPickerViewController, context: Context) {}
    
    func makeCoordinator() -> Coordinator {
        Coordinator(self)
    }
    
    class Coordinator: NSObject, UIDocumentPickerDelegate {
        let parent: DocumentPickerView
        
        init(_ parent: DocumentPickerView) {
            self.parent = parent
        }
        
        func documentPicker(_ controller: UIDocumentPickerViewController, didPickDocumentsAt urls: [URL]) {
            for url in urls {
                // Ensure we can access the URL
                guard url.startAccessingSecurityScopedResource() else {
                    continue
                }
                
                defer { url.stopAccessingSecurityScopedResource() }
                
                // Get file attributes
                do {
                    let resourceValues = try url.resourceValues(forKeys: [.fileSizeKey, .contentModificationDateKey])
                    let fileSize = resourceValues.fileSize ?? 0
                    let modificationDate = resourceValues.contentModificationDate ?? Date()
                    
                    // Create attachment
                    let fileName = url.lastPathComponent
                    let fileExtension = url.pathExtension
                    
                    // Copy file to app document directory for persistence
                    let documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
                    let destinationURL = documentsDirectory.appendingPathComponent("Attachments/\(UUID().uuidString)-\(fileName)")
                    
                    // Create directory if needed
                    let attachmentsDir = documentsDirectory.appendingPathComponent("Attachments")
                    if !FileManager.default.fileExists(atPath: attachmentsDir.path) {
                        try FileManager.default.createDirectory(at: attachmentsDir, withIntermediateDirectories: true)
                    }
                    
                    // Copy the file
                    try FileManager.default.copyItem(at: url, to: destinationURL)
                    
                    // Add to attachments
                    let attachment = ProposalAttachment(
                        name: fileName,
                        fileType: fileExtension,
                        date: modificationDate,
                        fileSize: Int64(fileSize),
                        url: destinationURL
                    )
                    
                    parent.attachments.append(attachment)
                } catch {
                    print("Error processing attachment: \(error)")
                }
            }
            
            parent.presentationMode.wrappedValue.dismiss()
        }
    }
}



/* ================================================== */
/* File: ./ProposalCRM/Views/Proposals/CreateProposalView.swift */
/* ================================================== */

// CreateProposalView.swift
// Create a new proposal for a selected customer

import SwiftUI

struct CreateProposalView: View {
    @Environment(\.managedObjectContext) private var viewContext
    @Environment(\.presentationMode) var presentationMode
    
    var customer: Customer?
    
    @State private var proposalNumber = ""
    @State private var status = "Draft"
    @State private var notes = ""
    @State private var creationDate = Date()
    
    @State private var showingItemSelection = false
    @State private var showingEngineeringForm = false
    @State private var showingExpensesForm = false
    @State private var showingCustomTaxForm = false
    
    @State private var proposal: Proposal?
    
    let statusOptions = ["Draft", "Pending", "Sent", "Won", "Lost", "Expired"]
    
    var body: some View {
        Form {
            Section(header: Text("Proposal Information")) {
                TextField("Proposal Number", text: $proposalNumber)
                
                Picker("Status", selection: $status) {
                    ForEach(statusOptions, id: \.self) { status in
                        Text(status).tag(status)
                    }
                }
                
                DatePicker("Date", selection: $creationDate, displayedComponents: .date)
            }
            
            Section(header: Text("Notes")) {
                TextEditor(text: $notes)
                    .frame(minHeight: 100)
            }
        }
        .onAppear {
            // Generate a proposal number if empty
            if proposalNumber.isEmpty {
                let dateFormatter = DateFormatter()
                dateFormatter.dateFormat = "yyyyMMdd"
                let dateString = dateFormatter.string(from: Date())
                proposalNumber = "PROP-\(dateString)-001"
            }
            
            // Create the proposal object
            createProposal()
        }
        .navigationTitle("Create Proposal")
        .toolbar {
            ToolbarItem(placement: .navigationBarTrailing) {
                Button("Save") {
                    saveProposal()
                }
                .disabled(proposalNumber.isEmpty)
            }
        }
    }
    
    private func createProposal() {
        let newProposal = Proposal(context: viewContext)
        newProposal.id = UUID()
        newProposal.number = proposalNumber
        newProposal.creationDate = creationDate
        newProposal.status = status
        newProposal.customer = customer
        newProposal.totalAmount = 0
        newProposal.notes = notes
        
        do {
            try viewContext.save()
            proposal = newProposal
        } catch {
            let nsError = error as NSError
            print("Error creating proposal: \(nsError), \(nsError.userInfo)")
        }
    }
    
    private func saveProposal() {
        if let createdProposal = proposal {
            createdProposal.number = proposalNumber
            createdProposal.creationDate = creationDate
            createdProposal.status = status
            createdProposal.notes = notes
            
            do {
                try viewContext.save()
                presentationMode.wrappedValue.dismiss()
            } catch {
                let nsError = error as NSError
                print("Error saving proposal: \(nsError), \(nsError.userInfo)")
            }
        }
    }
}



/* ================================================== */
/* File: ./ProposalCRM/Views/Proposals/CustomerSelectionForProposalView.swift */
/* ================================================== */

// CustomerSelectionForProposalView.swift
// Select a customer for a new proposal

import SwiftUI
import CoreData

struct CustomerSelectionForProposalView: View {
    @Environment(\.managedObjectContext) private var viewContext
    @Environment(\.presentationMode) var presentationMode
    
    @FetchRequest(
        sortDescriptors: [NSSortDescriptor(keyPath: \Customer.name, ascending: true)],
        animation: .default)
    private var customers: FetchedResults<Customer>
    
    @State private var searchText = ""
    @State private var showingAddCustomer = false
    @State private var selectedCustomer: Customer?
    @State private var navigateToProposalForm = false
    
    var body: some View {
        NavigationView {
            VStack {
                if customers.isEmpty {
                    VStack(spacing: 20) {
                        Text("No Customers Available")
                            .font(.title)
                            .foregroundColor(.secondary)
                        
                        Text("Add a customer first to create a proposal")
                            .foregroundColor(.secondary)
                        
                        Button(action: { showingAddCustomer = true }) {
                            Label("Add Customer", systemImage: "plus")
                                .padding()
                                .background(Color.blue)
                                .foregroundColor(.white)
                                .cornerRadius(10)
                        }
                    }
                    .padding()
                } else {
                    List {
                        ForEach(filteredCustomers, id: \.self) { customer in
                            Button(action: {
                                selectedCustomer = customer
                                navigateToProposalForm = true
                            }) {
                                HStack {
                                    VStack(alignment: .leading) {
                                        Text(customer.formattedName)
                                            .font(.headline)
                                        Text(customer.email ?? "")
                                            .font(.subheadline)
                                            .foregroundColor(.secondary)
                                    }
                                    
                                    Spacer()
                                    
                                    Image(systemName: "chevron.right")
                                        .foregroundColor(.gray)
                                }
                            }
                            .buttonStyle(PlainButtonStyle())
                        }
                    }
                    .searchable(text: $searchText, prompt: "Search Customers")
                }
            }
            .navigationTitle("Select Customer")
            .navigationBarItems(leading: Button("Cancel") {
                presentationMode.wrappedValue.dismiss()
            })
            .sheet(isPresented: $showingAddCustomer) {
                AddCustomerView()
            }
            .background(
                NavigationLink(
                    destination: CreateProposalView(customer: selectedCustomer),
                    isActive: $navigateToProposalForm,
                    label: { EmptyView() }
                )
            )
        }
    }
    
    private var filteredCustomers: [Customer] {
        if searchText.isEmpty {
            return Array(customers)
        } else {
            return customers.filter { customer in
                customer.name?.localizedCaseInsensitiveContains(searchText) ?? false ||
                customer.email?.localizedCaseInsensitiveContains(searchText) ?? false
            }
        }
    }
}



/* ================================================== */
/* File: ./ProposalCRM/Views/Proposals/EditProposalItemMenu.swift */
/* ================================================== */

//
//  EditProposalItemMenu.swift
//  ProposalCRM
//
//  Created by Ali Sami Gözükırmızı on 19.04.2025.
//


// EditProposalItemMenu.swift
// Popup menu for editing proposal items inline

import SwiftUI
import CoreData

struct EditProposalItemMenu: View {
    @Environment(\.managedObjectContext) private var viewContext
    @ObservedObject var item: ProposalItem
    @Binding var isPresented: Bool
    var onSave: () -> Void
    
    @State private var quantity: Double
    @State private var discount: Double
    @State private var unitPrice: Double
    
    // Initialize with the current values
    init(item: ProposalItem, isPresented: Binding<Bool>, onSave: @escaping () -> Void) {
        self.item = item
        self._isPresented = isPresented
        self.onSave = onSave
        
        _quantity = State(initialValue: item.quantity)
        _discount = State(initialValue: item.discount)
        _unitPrice = State(initialValue: item.unitPrice)
    }
    
    var body: some View {
        VStack(spacing: 0) {
            // Header
            HStack {
                Text("Edit Item")
                    .font(.headline)
                    .foregroundColor(.white)
                
                Spacer()
                
                Button(action: {
                    isPresented = false
                }) {
                    Image(systemName: "xmark.circle.fill")
                        .foregroundColor(.gray)
                }
            }
            .padding()
            .background(Color.black.opacity(0.8))
            
            // Product info
            VStack(alignment: .leading, spacing: 8) {
                Text(item.productName)
                    .font(.headline)
                    .foregroundColor(.white)
                
                Text(item.productCode)
                    .font(.subheadline)
                    .foregroundColor(.gray)
            }
            .frame(maxWidth: .infinity, alignment: .leading)
            .padding()
            .background(Color.black.opacity(0.5))
            
            // Quantity control
            HStack {
                Text("Quantity:")
                    .foregroundColor(.white)
                
                Spacer()
                
                HStack(spacing: 15) {
                    Button(action: {
                        if quantity > 1 {
                            quantity -= 1
                        }
                    }) {
                        Image(systemName: "minus.circle")
                            .foregroundColor(.white)
                            .font(.title3)
                    }
                    
                    Text("\(Int(quantity))")
                        .foregroundColor(.white)
                        .font(.title3)
                        .frame(minWidth: 30)
                    
                    Button(action: {
                        quantity += 1
                    }) {
                        Image(systemName: "plus.circle")
                            .foregroundColor(.white)
                            .font(.title3)
                    }
                }
            }
            .padding()
            
            // Discount slider
            VStack(spacing: 5) {
                HStack {
                    Text("Discount:")
                        .foregroundColor(.white)
                    
                    Spacer()
                    
                    Text("\(Int(discount))%")
                        .foregroundColor(.white)
                }
                
                Slider(value: $discount, in: 0...50, step: 1)
                    .accentColor(.blue)
            }
            .padding()
            
            // Unit price
            HStack {
                Text("Unit Price:")
                    .foregroundColor(.white)
                
                Spacer()
                
                TextField("", value: $unitPrice, formatter: NumberFormatter())
                    .keyboardType(.decimalPad)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
                    .frame(width: 100)
            }
            .padding()
            
            // Amount (calculated)
            HStack {
                Text("Total Amount:")
                    .foregroundColor(.white)
                    .fontWeight(.bold)
                
                Spacer()
                
                Text(String(format: "%.2f", calculateAmount()))
                    .foregroundColor(.white)
                    .fontWeight(.bold)
            }
            .padding()
            
            // Profit information
            if let product = item.product {
                VStack(spacing: 8) {
                    HStack {
                        Text("Partner Price:")
                            .foregroundColor(.gray)
                        
                        Spacer()
                        
                        Text(String(format: "%.2f", product.partnerPrice * quantity))
                            .foregroundColor(.gray)
                    }
                    
                    HStack {
                        Text("Profit:")
                            .foregroundColor(.white)
                        
                        Spacer()
                        
                        let profit = calculateAmount() - (product.partnerPrice * quantity)
                        Text(String(format: "%.2f", profit))
                            .foregroundColor(profit > 0 ? .green : .red)
                    }
                    
                    HStack {
                        Text("Margin:")
                            .foregroundColor(.white)
                        
                        Spacer()
                        
                        let amount = calculateAmount()
                        let cost = product.partnerPrice * quantity
                        let margin = amount > 0 ? ((amount - cost) / amount) * 100 : 0
                        Text(String(format: "%.1f%%", margin))
                            .foregroundColor(margin > 20 ? .green : (margin > 10 ? .orange : .red))
                    }
                }
                .padding()
                .background(Color.black.opacity(0.3))
            }
            
            // Action buttons
            HStack {
                Button(action: {
                    isPresented = false
                }) {
                    Text("Cancel")
                        .foregroundColor(.white)
                        .padding(.vertical, 10)
                        .padding(.horizontal, 20)
                        .background(Color.gray.opacity(0.5))
                        .cornerRadius(8)
                }
                
                Spacer()
                
                Button(action: {
                    saveChanges()
                }) {
                    Text("Save")
                        .foregroundColor(.white)
                        .padding(.vertical, 10)
                        .padding(.horizontal, 20)
                        .background(Color.blue)
                        .cornerRadius(8)
                }
            }
            .padding()
        }
        .frame(width: 350)
        .background(Color.black.opacity(0.8))
        .cornerRadius(16)
        .shadow(radius: 10)
    }
    
    private func calculateAmount() -> Double {
        return unitPrice * quantity
    }
    
    private func saveChanges() {
        item.quantity = quantity
        item.discount = discount
        item.unitPrice = unitPrice
        item.amount = calculateAmount()
        
        do {
            try viewContext.save()
            onSave()
            isPresented = false
        } catch {
            print("Error saving changes: \(error)")
        }
    }
}


/* ================================================== */
/* File: ./ProposalCRM/Views/Proposals/EditProposalItemView.swift */
/* ================================================== */

//
//  EditProposalItemView.swift
//  ProposalCRM
//
//  Created by Ali Sami Gözükırmızı on 19.04.2025.
//


// Fixed EditProposalItemView.swift
// Corrected implementation without userInfo errors

import SwiftUI
import CoreData

struct EditProposalItemView: View {
    @Environment(\.managedObjectContext) private var viewContext
    @Environment(\.presentationMode) var presentationMode
    @ObservedObject var item: ProposalItem
    @Binding var didSave: Bool  // Added binding to signal changes were saved
    
    // Editable properties
    @State private var customName: String
    @State private var quantity: Double
    @State private var discount: Double
    @State private var unitPrice: Double
    @State private var listPrice: Double  // For display/calculation - won't modify product directly
    @State private var multiplier: Double
    
    // Custom formatter for decimal values
    private let numberFormatter: NumberFormatter = {
        let formatter = NumberFormatter()
        formatter.numberStyle = .decimal
        formatter.minimumFractionDigits = 2
        formatter.maximumFractionDigits = 2
        return formatter
    }()
    
    init(item: ProposalItem, didSave: Binding<Bool>) {
        self.item = item
        self._didSave = didSave
        
        // Initialize state with current values
        _customName = State(initialValue: item.product?.name ?? "")
        _quantity = State(initialValue: item.quantity)
        _discount = State(initialValue: item.discount)
        _unitPrice = State(initialValue: item.unitPrice)
        _listPrice = State(initialValue: item.product?.listPrice ?? 0)
        _multiplier = State(initialValue: 1.0) // Default multiplier
    }
    
    // Calculated values
    var amount: Double {
        return unitPrice * quantity
    }
    
    var partnerPrice: Double {
        return item.product?.partnerPrice ?? 0
    }
    
    var calculatedUnitPrice: Double {
        // Unit price can be affected by multiplier and list price
        return listPrice * multiplier * (1 - discount/100)
    }
    
    var profit: Double {
        let cost = partnerPrice * quantity
        return amount - cost
    }
    
    var margin: Double {
        if amount <= 0 {
            return 0
        }
        return (profit / amount) * 100
    }
    
    var body: some View {
        NavigationView {
            Form {
                // PRODUCT DETAILS section
                Section(header: Text("PRODUCT DETAILS")) {
                    // Product name (editable for display only)
                    HStack {
                        Text("Product:")
                        Spacer()
                        TextField("Product Name", text: $customName)
                            .multilineTextAlignment(.trailing)
                    }
                    
                    // Product code (non-editable)
                    HStack {
                        Text("Code:")
                        Spacer()
                        Text(item.product?.code ?? "")
                            .foregroundColor(.secondary)
                    }
                    
                    // Quantity with stepper
                    HStack {
                        Text("Quantity:")
                        Spacer()
                        
                        Button(action: {
                            if quantity > 1 {
                                quantity -= 1
                            }
                        }) {
                            Image(systemName: "minus")
                                .padding(8)
                                .background(Color.gray.opacity(0.2))
                                .clipShape(Circle())
                        }
                        
                        Text("\(Int(quantity))")
                            .frame(width: 30, alignment: .center)
                        
                        Button(action: {
                            quantity += 1
                        }) {
                            Image(systemName: "plus")
                                .padding(8)
                                .background(Color.gray.opacity(0.2))
                                .clipShape(Circle())
                        }
                    }
                    
                    // Discount with slider
                    VStack(alignment: .leading) {
                        HStack {
                            Text("Discount (%)")
                            Spacer()
                            Text("\(Int(discount))%")
                        }
                        
                        HStack {
                            Circle()
                                .frame(width: 20, height: 20)
                                .foregroundColor(.white)
                            
                            Slider(value: $discount, in: 0...50)
                                .accentColor(.blue)
                        }
                    }
                }
                
                // PRICING section
                Section(header: Text("PRICING")) {
                    // List price (editable)
                    HStack {
                        Text("List Price")
                        Spacer()
                        TextField("List Price", value: $listPrice, formatter: NumberFormatter())
                            .keyboardType(.decimalPad)
                            .multilineTextAlignment(.trailing)
                    }
                    
                    // Partner price (non-editable)
                    HStack {
                        Text("Partner Price")
                        Spacer()
                        Text(String(format: "%.2f", partnerPrice))
                            .foregroundColor(.blue)
                    }
                    
                    // Multiplier (editable with better UI)
                    VStack(alignment: .leading, spacing: 8) {
                        Text("Multiplier")
                        
                        HStack {
                            // Decrease button
                            Button(action: {
                                // Decrease by 0.05 but not below 0.5
                                multiplier = max(0.5, multiplier - 0.05)
                                // Update unit price when multiplier changes
                                unitPrice = listPrice * multiplier * (1 - discount/100)
                            }) {
                                Image(systemName: "minus")
                                    .padding(8)
                                    .background(Color.gray.opacity(0.2))
                                    .clipShape(Circle())
                            }
                            
                            // Direct text entry
                            TextField("", value: $multiplier, formatter: numberFormatter)
                                .keyboardType(.decimalPad)
                                .multilineTextAlignment(.center)
                                .frame(width: 60)
                                .padding(.vertical, 5)
                                .background(Color.gray.opacity(0.1))
                                .cornerRadius(8)
                                .onChange(of: multiplier) { newValue in
                                    // Update unit price when multiplier changes
                                    unitPrice = listPrice * multiplier * (1 - discount/100)
                                }
                            
                            Text("×")
                                .font(.system(size: 16, weight: .bold))
                                .foregroundColor(.secondary)
                            
                            // Increase button
                            Button(action: {
                                // Increase by 0.05 but not above 2.0
                                multiplier = min(2.0, multiplier + 0.05)
                                // Update unit price when multiplier changes
                                unitPrice = listPrice * multiplier * (1 - discount/100)
                            }) {
                                Image(systemName: "plus")
                                    .padding(8)
                                    .background(Color.gray.opacity(0.2))
                                    .clipShape(Circle())
                            }
                            
                            Spacer()
                        }
                        
                        // Quick preset values
                        ScrollView(.horizontal, showsIndicators: false) {
                            HStack(spacing: 8) {
                                ForEach([0.8, 0.9, 1.0, 1.1, 1.2, 1.5], id: \.self) { value in
                                    Button(action: {
                                        multiplier = value
                                        // Update unit price when multiplier changes
                                        unitPrice = listPrice * multiplier * (1 - discount/100)
                                    }) {
                                        Text(String(format: "%.2f×", value))
                                            .padding(.horizontal, 8)
                                            .padding(.vertical, 4)
                                            .background(multiplier == value ? Color.blue : Color.gray.opacity(0.2))
                                            .foregroundColor(multiplier == value ? .white : .primary)
                                            .cornerRadius(8)
                                    }
                                }
                            }
                        }
                    }
                    
                    // Unit price (editable)
                    HStack {
                        Text("Unit Price")
                        Spacer()
                        TextField("Unit Price", value: $unitPrice, formatter: NumberFormatter())
                            .keyboardType(.decimalPad)
                            .multilineTextAlignment(.trailing)
                            .onChange(of: multiplier) { newValue in
                                // Update unit price when multiplier changes
                                unitPrice = listPrice * multiplier * (1 - discount/100)
                            }
                            .onChange(of: listPrice) { newValue in
                                // Update unit price when list price changes
                                unitPrice = listPrice * multiplier * (1 - discount/100)
                            }
                    }
                    
                    // Amount (calculated)
                    HStack {
                        Text("Amount")
                        Spacer()
                        Text(String(format: "%.2f", amount))
                            .bold()
                    }
                    
                    // Profit (calculated)
                    HStack {
                        Text("Profit")
                        Spacer()
                        Text(String(format: "%.2f", profit))
                            .foregroundColor(profit > 0 ? .green : .red)
                            .bold()
                    }
                    
                    // Margin (calculated)
                    HStack {
                        Text("Margin")
                        Spacer()
                        Text(String(format: "%.1f%%", margin))
                            .foregroundColor(margin >= 20 ? .green : (margin >= 10 ? .orange : .red))
                            .bold()
                    }
                }
            }
            .navigationTitle("Edit Product")
            .navigationBarItems(
                leading: Button("Cancel") {
                    presentationMode.wrappedValue.dismiss()
                },
                trailing: Button("Save") {
                    saveChanges()
                }
            )
        }
    }
    
    private func saveChanges() {
        // Update fields in the proposal item
        item.quantity = quantity
        item.discount = discount
        
        // Calculate the final unit price based on list price, multiplier, and discount
        unitPrice = listPrice * multiplier * (1 - discount/100)
        item.unitPrice = unitPrice  // This already reflects the multiplier effect
        
        // Calculate and set the final amount
        item.amount = amount
        
        // Don't try to save multiplier directly since it's not in Core Data
        // item.multiplier = multiplier  <-- REMOVE THIS LINE
        
        do {
            try viewContext.save()
            
            // Update proposal total if available
            if let proposal = item.proposal {
                let productsTotal = proposal.subtotalProducts
                let engineeringTotal = proposal.subtotalEngineering
                let expensesTotal = proposal.subtotalExpenses
                let taxesTotal = proposal.subtotalTaxes
                
                proposal.totalAmount = productsTotal + engineeringTotal + expensesTotal + taxesTotal
                
                try viewContext.save()
            }
            
            // Set the didSave flag to true to signal to parent view that changes were made
            didSave = true
            
            presentationMode.wrappedValue.dismiss()
        } catch {
            let nsError = error as NSError
            print("Error saving changes: \(nsError), \(nsError.userInfo)")
        }
    }
}



/* ================================================== */
/* File: ./ProposalCRM/Views/Proposals/EditProposalView.swift */
/* ================================================== */

// EditProposalView.swift
// Form for editing an existing proposal

import SwiftUI

struct EditProposalView: View {
    @Environment(\.managedObjectContext) private var viewContext
    @Environment(\.presentationMode) var presentationMode
    @ObservedObject var proposal: Proposal
    
    @State private var proposalNumber: String
    @State private var status: String
    @State private var notes: String
    @State private var creationDate: Date
    
    let statusOptions = ["Draft", "Pending", "Sent", "Won", "Lost", "Expired"]
    
    init(proposal: Proposal) {
        self.proposal = proposal
        _proposalNumber = State(initialValue: proposal.number ?? "")
        _status = State(initialValue: proposal.status ?? "Draft")
        _notes = State(initialValue: proposal.notes ?? "")
        _creationDate = State(initialValue: proposal.creationDate ?? Date())
    }
    
    var body: some View {
        NavigationView {
            Form {
                Section(header: Text("Proposal Information")) {
                    TextField("Proposal Number", text: $proposalNumber)
                    
                    Picker("Status", selection: $status) {
                        ForEach(statusOptions, id: \.self) { status in
                            Text(status).tag(status)
                        }
                    }
                    
                    DatePicker("Date", selection: $creationDate, displayedComponents: .date)
                    
                    HStack {
                        Text("Customer")
                        Spacer()
                        Text(proposal.customerName)
                            .foregroundColor(.secondary)
                    }
                }
                
                Section(header: Text("Notes")) {
                    TextEditor(text: $notes)
                        .frame(minHeight: 100)
                }
            }
            .navigationTitle("Edit Proposal")
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("Cancel") {
                        presentationMode.wrappedValue.dismiss()
                    }
                }
                
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Save") {
                        saveProposal()
                    }
                    .disabled(proposalNumber.isEmpty)
                }
            }
        }
    }
    
    private func saveProposal() {
        proposal.number = proposalNumber
        proposal.status = status
        proposal.creationDate = creationDate
        proposal.notes = notes
        
        do {
            try viewContext.save()
            presentationMode.wrappedValue.dismiss()
        } catch {
            let nsError = error as NSError
            print("Error updating proposal: \(nsError), \(nsError.userInfo)")
        }
    }
}



/* ================================================== */
/* File: ./ProposalCRM/Views/Proposals/FinancialSummaryDetailView.swift */
/* ================================================== */

// FinancialSummaryDetailView.swift
// Detailed financial analysis of a proposal

import SwiftUI

struct FinancialSummaryDetailView: View {
    @ObservedObject var proposal: Proposal
    @Environment(\.presentationMode) var presentationMode
    
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(alignment: .leading, spacing: 20) {
                    // Revenue Breakdown
                    VStack(alignment: .leading, spacing: 10) {
                        Text("Revenue Breakdown")
                            .font(.title2)
                            .fontWeight(.bold)
                        
                        Divider()
                        
                        // Placeholder for pie chart
                        Text("Revenue breakdown chart would go here")
                            .frame(height: 200)
                            .frame(maxWidth: .infinity)
                            .background(Color.gray.opacity(0.2))
                            .cornerRadius(10)
                        
                        Group {
                            HStack {
                                Text("Products")
                                Spacer()
                                Text(String(format: "%.2f", proposal.subtotalProducts))
                            }
                            
                            HStack {
                                Text("Engineering")
                                Spacer()
                                Text(String(format: "%.2f", proposal.subtotalEngineering))
                            }
                            
                            HStack {
                                Text("Expenses")
                                Spacer()
                                Text(String(format: "%.2f", proposal.subtotalExpenses))
                            }
                            
                            HStack {
                                Text("Taxes")
                                Spacer()
                                Text(String(format: "%.2f", proposal.subtotalTaxes))
                            }
                        }
                    }
                    .padding()
                    .background(Color(UIColor.systemBackground))
                    .cornerRadius(10)
                    .shadow(color: Color.black.opacity(0.1), radius: 5, x: 0, y: 2)
                    
                    // Cost & Profit Analysis
                    VStack(alignment: .leading, spacing: 10) {
                        Text("Cost & Profit Analysis")
                            .font(.title2)
                            .fontWeight(.bold)
                        
                        Divider()
                        
                        Group {
                            HStack {
                                Text("Total Revenue")
                                Spacer()
                                Text(String(format: "%.2f", proposal.totalAmount))
                                    .fontWeight(.bold)
                            }
                            
                            HStack {
                                Text("Total Cost")
                                Spacer()
                                Text(String(format: "%.2f", proposal.totalCost))
                            }
                            
                            Divider()
                            
                            HStack {
                                Text("Gross Profit")
                                Spacer()
                                Text(String(format: "%.2f", proposal.grossProfit))
                                    .fontWeight(.bold)
                            }
                            
                            HStack {
                                Text("Profit Margin")
                                Spacer()
                                Text(String(format: "%.1f%%", proposal.profitMargin))
                                    .fontWeight(.bold)
                                    .foregroundColor(proposal.profitMargin < 20 ? .red : .green)
                            }
                        }
                    }
                    .padding()
                    .background(Color(UIColor.systemBackground))
                    .cornerRadius(10)
                    .shadow(color: Color.black.opacity(0.1), radius: 5, x: 0, y: 2)
                }
                .padding()
            }
            .navigationTitle("Financial Analysis")
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Done") {
                        presentationMode.wrappedValue.dismiss()
                    }
                }
            }
        }
    }
}



/* ================================================== */
/* File: ./ProposalCRM/Views/Proposals/PencilDrawingView.swift */
/* ================================================== */

//
//  PencilDrawingView.swift
//  ProposalCRM
//
//  Created by Ali Sami Gözükırmızı on 17.04.2025.
//


// PencilDrawingView.swift
// Canvas for Apple Pencil drawing in proposals

import SwiftUI
import PencilKit

struct PencilDrawingView: UIViewRepresentable {
    @Binding var canvasView: PKCanvasView
    @Binding var drawingData: Data?
    @Binding var toolPicker: PKToolPicker
    
    let onSave: () -> Void
    
    func makeUIView(context: Context) -> PKCanvasView {
        canvasView.tool = PKInkingTool(.pen, color: .black, width: 1)
        canvasView.drawingPolicy = .anyInput
        canvasView.delegate = context.coordinator
        
        // Load drawing if available
        if let drawingData = drawingData {
            do {
                let drawing = try PKDrawing(data: drawingData)
                canvasView.drawing = drawing
            } catch {
                print("Failed to load drawing: \(error)")
            }
        }
        
        // Show the tool picker
        toolPicker.setVisible(true, forFirstResponder: canvasView)
        toolPicker.addObserver(canvasView)
        canvasView.becomeFirstResponder()
        
        return canvasView
    }
    
    func updateUIView(_ uiView: PKCanvasView, context: Context) {
        // Any updates to the canvas view
    }
    
    func makeCoordinator() -> Coordinator {
        Coordinator(self)
    }
    
    class Coordinator: NSObject, PKCanvasViewDelegate {
        var parent: PencilDrawingView
        
        init(_ parent: PencilDrawingView) {
            self.parent = parent
        }
        
        func canvasViewDrawingDidChange(_ canvasView: PKCanvasView) {
            // Save the drawing when it changes
            parent.drawingData = canvasView.drawing.dataRepresentation()
            parent.onSave()
        }
    }
}

struct DrawingToolbar: View {
    @Binding var canvasView: PKCanvasView
    @Binding var toolPicker: PKToolPicker
    @Binding var isDrawing: Bool
    
    var body: some View {
        HStack {
            Button(action: {
                canvasView.drawing = PKDrawing()
            }) {
                Label("Clear", systemImage: "trash")
            }
            .buttonStyle(BorderedButtonStyle())
            
            Spacer()
            
            Button(action: {
                isDrawing.toggle()
                if isDrawing {
                    toolPicker.setVisible(true, forFirstResponder: canvasView)
                    canvasView.becomeFirstResponder()
                } else {
                    toolPicker.setVisible(false, forFirstResponder: canvasView)
                }
            }) {
                Label(isDrawing ? "Done" : "Edit", systemImage: isDrawing ? "checkmark" : "pencil")
            }
            .buttonStyle(BorderedButtonStyle())
        }
        .padding(.horizontal)
    }
}

struct PencilNotesView: View {
    @Binding var drawingData: Data?
    @State private var canvasView = PKCanvasView()
    @State private var toolPicker = PKToolPicker()
    @State private var isDrawing = false
    
    let onSave: () -> Void
    
    var body: some View {
        VStack(spacing: 10) {
            HStack {
                Text("Apple Pencil Notes")
                    .font(.title2)
                    .fontWeight(.bold)
                
                Spacer()
                
                Button(action: {
                    isDrawing.toggle()
                    if isDrawing {
                        toolPicker.setVisible(true, forFirstResponder: canvasView)
                        canvasView.becomeFirstResponder()
                    } else {
                        toolPicker.setVisible(false, forFirstResponder: canvasView)
                    }
                }) {
                    Label(isDrawing ? "Done" : "Edit", systemImage: isDrawing ? "checkmark" : "pencil.tip.crop.circle")
                        .foregroundColor(.blue)
                }
            }
            
            Divider()
            
            if drawingData == nil && !isDrawing {
                HStack {
                    Spacer()
                    VStack(spacing: 12) {
                        Image(systemName: "pencil.tip.crop.circle")
                            .font(.system(size: 40))
                            .foregroundColor(.gray)
                        Text("Tap Edit to start drawing with Apple Pencil")
                            .foregroundColor(.gray)
                    }
                    .padding(.vertical, 40)
                    Spacer()
                }
                .background(Color.gray.opacity(0.1))
                .cornerRadius(8)
            } else {
                ZStack {
                    // Drawing canvas
                    PencilDrawingView(
                        canvasView: $canvasView,
                        drawingData: $drawingData,
                        toolPicker: $toolPicker,
                        onSave: onSave
                    )
                    .frame(height: 300)
                    
                    // Toolbar overlay at the bottom when in drawing mode
                    if isDrawing {
                        VStack {
                            Spacer()
                            DrawingToolbar(
                                canvasView: $canvasView,
                                toolPicker: $toolPicker,
                                isDrawing: $isDrawing
                            )
                            .background(
                                Rectangle()
                                    .fill(Color(UIColor.systemBackground))
                                    .opacity(0.9)
                            )
                        }
                    }
                }
                .border(Color.gray.opacity(0.3), width: 1)
                .cornerRadius(8)
            }
        }
    }
}


/* ================================================== */
/* File: ./ProposalCRM/Views/Proposals/PieChartView.swift */
/* ================================================== */

// PieChartView.swift
// Simple pie chart for financial visualization

import SwiftUI

struct PieSlice {
    let value: Double
    let color: Color
    let title: String
}

struct PieChartView: View {
    let slices: [PieSlice]
    let total: Double
    
    var body: some View {
        GeometryReader { geometry in
            ZStack {
                // Placeholder for pie chart implementation
                Circle()
                    .stroke(Color.gray, lineWidth: 2)
                    .frame(width: geometry.size.width * 0.8, height: geometry.size.width * 0.8)
                    .position(x: geometry.size.width / 2, y: geometry.size.height / 2)
                
                Text("Pie Chart")
                    .font(.headline)
                    .position(x: geometry.size.width / 2, y: geometry.size.height / 2)
            }
        }
    }
}

struct PieSliceShape: Shape {
    var startAngle: Angle
    var endAngle: Angle
    
    func path(in rect: CGRect) -> Path {
        let center = CGPoint(x: rect.midX, y: rect.midY)
        let radius = min(rect.width, rect.height) / 2
        
        var path = Path()
        path.move(to: center)
        path.addArc(
            center: center,
            radius: radius,
            startAngle: startAngle,
            endAngle: endAngle,
            clockwise: false
        )
        path.closeSubpath()
        
        return path
    }
}



/* ================================================== */
/* File: ./ProposalCRM/Views/Proposals/ProposalDetailView.swift */
/* ================================================== */

//
//  ProposalDetailView.swift
//  ProposalCRM
//
//  Created by Ali Sami Gözükırmızı on 19.04.2025.
//


//
//  ProposalDetailView.swift
//  ProposalCRM
//
//  Created by Ali Sami Gözükırmızı on 19.04.2025.
//

import SwiftUI
import CoreData

struct ProposalDetailView: View {
    @Environment(\.managedObjectContext) private var viewContext
    @ObservedObject var proposal: Proposal
    @Environment(\.colorScheme) private var colorScheme
    
    // State variables for showing different sheets
    @State private var showingItemSelection = false
    @State private var showingEngineeringForm = false
    @State private var showingExpensesForm = false
    @State private var showingCustomTaxForm = false
    @State private var showingEditProposal = false
    @State private var showingFinancialDetails = false
    
    // State variables for deletion confirmation
    @State private var showDeleteConfirmation = false
    @State private var itemToDelete: ProposalItem?
    
    // State variables for product item editing
    @State private var itemToEdit: ProposalItem?
    @State private var showEditItemSheet = false
    @State private var didSaveItemChanges = false  // Track if changes were saved
    
    // State variables for engineering editing
    @State private var engineeringToEdit: Engineering?
    @State private var showEditEngineeringSheet = false
    
    // State variables for expense editing
    @State private var expenseToEdit: Expense?
    @State private var showEditExpenseSheet = false
    
    // State variables for custom tax editing
    @State private var taxToEdit: CustomTax?
    @State private var showEditTaxSheet = false
    
    var body: some View {
        ZStack {
            // Solid background to prevent drawing overlay issues
            Color.black.edgesIgnoringSafeArea(.all)
            
            ScrollView {
                VStack(alignment: .leading, spacing: 0) {
                    // Fixed header section using a separate component with action callback
                    ProposalHeaderSection(
                        proposal: proposal,
                        onEditTapped: {
                            showingEditProposal = true
                        }
                    )
                    
                    // Content sections with proper spacing
                    VStack(alignment: .leading, spacing: 20) {
                        // UPDATED Products Section with enhanced table
                        VStack(alignment: .leading, spacing: 10) {
                            HStack {
                                Text("Products")
                                    .font(.title2)
                                    .fontWeight(.bold)
                                    .foregroundColor(.white)
                                
                                Spacer()
                                
                                Button(action: { showingItemSelection = true }) {
                                    Label("Add Products", systemImage: "plus")
                                        .foregroundColor(.blue)
                                }
                            }
                            
                            ZStack {
                                // Solid background
                                RoundedRectangle(cornerRadius: 10)
                                    .fill(Color.black.opacity(0.2))
                                
                                VStack(spacing: 0) {
                                    // Table header with scrollable view for all columns
                                    ScrollView(.horizontal, showsIndicators: true) {
                                        HStack(spacing: 0) {
                                            // Product Name
                                            Text("Product Name")
                                                .font(.caption)
                                                .fontWeight(.bold)
                                                .frame(width: 180, alignment: .leading)
                                                .padding(.horizontal, 5)
                                            
                                            Divider().frame(height: 36)
                                            
                                            // Qty
                                            Text("Qty")
                                                .font(.caption)
                                                .fontWeight(.bold)
                                                .frame(width: 50, alignment: .center)
                                                .padding(.horizontal, 5)
                                            
                                            Divider().frame(height: 36)
                                            
                                            // Unit Partner Price
                                            Text("Unit Partner Price")
                                                .font(.caption)
                                                .fontWeight(.bold)
                                                .frame(width: 120, alignment: .trailing)
                                                .padding(.horizontal, 5)
                                            
                                            Divider().frame(height: 36)
                                            
                                            // Unit List Price
                                            Text("Unit List Price")
                                                .font(.caption)
                                                .fontWeight(.bold)
                                                .frame(width: 120, alignment: .trailing)
                                                .padding(.horizontal, 5)
                                            
                                            Divider().frame(height: 36)
                                            
                                            // Multiplier
                                            Text("Multiplier")
                                                .font(.caption)
                                                .fontWeight(.bold)
                                                .frame(width: 80, alignment: .center)
                                                .padding(.horizontal, 5)
                                            
                                            Divider().frame(height: 36)
                                            
                                            // Discount
                                            Text("Discount")
                                                .font(.caption)
                                                .fontWeight(.bold)
                                                .frame(width: 80, alignment: .center)
                                                .padding(.horizontal, 5)
                                            
                                            Divider().frame(height: 36)
                                            
                                            // Ext Partner Price
                                            Text("Ext Partner Price")
                                                .font(.caption)
                                                .fontWeight(.bold)
                                                .frame(width: 120, alignment: .trailing)
                                                .padding(.horizontal, 5)
                                            
                                            Divider().frame(height: 36)
                                            
                                            // Ext List Price
                                            Text("Ext List Price")
                                                .font(.caption)
                                                .fontWeight(.bold)
                                                .frame(width: 120, alignment: .trailing)
                                                .padding(.horizontal, 5)
                                            
                                            Divider().frame(height: 36)
                                            
                                            // Ext Customer Price
                                            Text("Ext Customer Price")
                                                .font(.caption)
                                                .fontWeight(.bold)
                                                .frame(width: 120, alignment: .trailing)
                                                .padding(.horizontal, 5)
                                            
                                            Divider().frame(height: 36)
                                            
                                            // Total Profit
                                            Text("Total Profit")
                                                .font(.caption)
                                                .fontWeight(.bold)
                                                .frame(width: 100, alignment: .trailing)
                                                .padding(.horizontal, 5)
                                            
                                            Divider().frame(height: 36)
                                            
                                            // Custom Tax?
                                            Text("Custom Tax?")
                                                .font(.caption)
                                                .fontWeight(.bold)
                                                .frame(width: 90, alignment: .center)
                                                .padding(.horizontal, 5)
                                            
                                            Divider().frame(height: 36)
                                            
                                            // Actions
                                            Text("Act")
                                                .font(.caption)
                                                .fontWeight(.bold)
                                                .frame(width: 60, alignment: .center)
                                                .padding(.horizontal, 5)
                                        }
                                        .padding(.vertical, 10)
                                        .background(Color.black.opacity(0.3))
                                    }
                                    
                                    Divider().background(Color.gray)
                                    
                                    // Main table content with rows
                                    if proposal.itemsArray.isEmpty {
                                        Text("No products added yet")
                                            .foregroundColor(.gray)
                                            .padding()
                                            .frame(maxWidth: .infinity)
                                    } else {
                                        ScrollView {
                                            VStack(spacing: 0) {
                                                ForEach(proposal.itemsArray, id: \.self) { item in
                                                    ScrollView(.horizontal, showsIndicators: true) {
                                                        HStack(spacing: 0) {
                                                            // Product Name with code
                                                            VStack(alignment: .leading, spacing: 2) {
                                                                Text(item.productName)
                                                                    .font(.system(size: 14))
                                                                    .foregroundColor(.white)
                                                                Text(item.productCode)
                                                                    .font(.system(size: 12))
                                                                    .foregroundColor(.gray)
                                                            }
                                                            .frame(width: 180, alignment: .leading)
                                                            .padding(.horizontal, 5)
                                                            
                                                            Divider().frame(height: 40)
                                                            
                                                            // Quantity
                                                            Text("\(Int(item.quantity))")
                                                                .font(.system(size: 14))
                                                                .frame(width: 50, alignment: .center)
                                                                .padding(.horizontal, 5)
                                                            
                                                            Divider().frame(height: 40)
                                                            
                                                            // Unit Partner Price
                                                            let partnerPrice = item.product?.partnerPrice ?? 0
                                                            Text(String(format: "%.2f", partnerPrice))
                                                                .font(.system(size: 14))
                                                                .frame(width: 120, alignment: .trailing)
                                                                .padding(.horizontal, 5)
                                                            
                                                            Divider().frame(height: 40)
                                                            
                                                            // Unit List Price
                                                            let listPrice = item.product?.listPrice ?? 0
                                                            Text(String(format: "%.2f", listPrice))
                                                                .font(.system(size: 14))
                                                                .frame(width: 120, alignment: .trailing)
                                                                .padding(.horizontal, 5)
                                                            
                                                            Divider().frame(height: 40)
                                                            
                                                            let multiplier = item.value(forKey: "multiplier") as? Double ?? 1.0
                                                            Text(String(format: "%.2f", item.safeMultiplier()))
                                                                .font(.system(size: 14))
                                                                .frame(width: 80, alignment: .center)
                                                                .padding(.horizontal, 5)
                                                            
                                                            Divider().frame(height: 40)
                                                            
                                                            // Discount
                                                            Text(String(format: "%.1f%%", item.discount))
                                                                .font(.system(size: 14))
                                                                .frame(width: 80, alignment: .center)
                                                                .padding(.horizontal, 5)
                                                            
                                                            Divider().frame(height: 40)
                                                            
                                                            // Ext Partner Price
                                                            let extPartnerPrice = partnerPrice * item.quantity
                                                            Text(String(format: "%.2f", extPartnerPrice))
                                                                .font(.system(size: 14))
                                                                .frame(width: 120, alignment: .trailing)
                                                                .padding(.horizontal, 5)
                                                            
                                                            Divider().frame(height: 40)
                                                            
                                                            // Ext List Price
                                                            let extListPrice = listPrice * item.quantity
                                                            Text(String(format: "%.2f", extListPrice))
                                                                .font(.system(size: 14))
                                                                .frame(width: 120, alignment: .trailing)
                                                                .padding(.horizontal, 5)
                                                            
                                                            Divider().frame(height: 40)
                                                            
                                                            // Ext Customer Price (amount)
                                                            Text(String(format: "%.2f", item.amount))
                                                                .font(.system(size: 14))
                                                                .frame(width: 120, alignment: .trailing)
                                                                .padding(.horizontal, 5)
                                                            
                                                            Divider().frame(height: 40)
                                                            
                                                            // Total Profit
                                                            let profit = item.amount - extPartnerPrice
                                                            Text(String(format: "%.2f", profit))
                                                                .font(.system(size: 14))
                                                                .foregroundColor(profit > 0 ? .green : .red)
                                                                .frame(width: 100, alignment: .trailing)
                                                                .padding(.horizontal, 5)
                                                            
                                                            Divider().frame(height: 40)
                                                            
                                                            // Custom Tax?
                                                            Text("No")
                                                                .font(.system(size: 14))
                                                                .frame(width: 90, alignment: .center)
                                                                .padding(.horizontal, 5)
                                                            
                                                            Divider().frame(height: 40)
                                                            
                                                            // Action buttons
                                                            HStack(spacing: 15) {
                                                                Button(action: {
                                                                    itemToEdit = item
                                                                    showEditItemSheet = true
                                                                }) {
                                                                    Image(systemName: "pencil")
                                                                        .foregroundColor(.blue)
                                                                }
                                                                
                                                                Button(action: {
                                                                    itemToDelete = item
                                                                    showDeleteConfirmation = true
                                                                }) {
                                                                    Image(systemName: "trash")
                                                                        .foregroundColor(.red)
                                                                }
                                                            }
                                                            .frame(width: 60, alignment: .center)
                                                        }
                                                        .padding(.vertical, 8)
                                                    }
                                                    .background(Color.black.opacity(0.2))
                                                    
                                                    Divider().background(Color.gray.opacity(0.5))
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        .padding(.horizontal)
                        
                        // Engineering Section - fixed rendering
                        VStack(alignment: .leading, spacing: 10) {
                            HStack {
                                Text("Engineering")
                                    .font(.title2)
                                    .fontWeight(.bold)
                                    .foregroundColor(.white)
                                
                                if proposal.engineeringArray.count > 0 {
                                    Text("(\(proposal.engineeringArray.count))")
                                        .font(.subheadline)
                                        .foregroundColor(.gray)
                                }
                                
                                Spacer()
                                
                                Button(action: { showingEngineeringForm = true }) {
                                    Label("Add", systemImage: "plus")
                                        .foregroundColor(.blue)
                                }
                            }
                            
                            ZStack {
                                // Solid background
                                RoundedRectangle(cornerRadius: 10)
                                    .fill(Color.black.opacity(0.2))
                                
                                // Table content
                                VStack(spacing: 0) {
                                    // Header
                                    HStack {
                                        Text("Description")
                                            .font(.caption)
                                            .fontWeight(.bold)
                                            .frame(maxWidth: .infinity, alignment: .leading)
                                        
                                        Text("Days")
                                            .font(.caption)
                                            .fontWeight(.bold)
                                            .frame(width: 60, alignment: .center)
                                        
                                        Text("Rate")
                                            .font(.caption)
                                            .fontWeight(.bold)
                                            .frame(width: 80, alignment: .trailing)
                                        
                                        Text("Amount")
                                            .font(.caption)
                                            .fontWeight(.bold)
                                            .frame(width: 100, alignment: .trailing)
                                        
                                        Text("Act")
                                            .font(.caption)
                                            .fontWeight(.bold)
                                            .frame(width: 60, alignment: .center)
                                    }
                                    .padding(.horizontal)
                                    .padding(.vertical, 8)
                                    .background(Color.black.opacity(0.3))
                                    
                                    Divider().background(Color.gray)
                                    
                                    // Engineering rows or empty state
                                    if proposal.engineeringArray.isEmpty {
                                        Text("No engineering services added yet")
                                            .foregroundColor(.gray)
                                            .padding()
                                            .frame(maxWidth: .infinity)
                                    } else {
                                        ForEach(proposal.engineeringArray, id: \.self) { engineering in
                                            HStack {
                                                Text(engineering.desc ?? "")
                                                    .font(.subheadline)
                                                    .foregroundColor(.white)
                                                    .frame(maxWidth: .infinity, alignment: .leading)
                                                
                                                Text(String(format: "%.1f", engineering.days))
                                                    .font(.subheadline)
                                                    .frame(width: 60, alignment: .center)
                                                
                                                Text(String(format: "%.2f", engineering.rate))
                                                    .font(.subheadline)
                                                    .frame(width: 80, alignment: .trailing)
                                                
                                                Text(String(format: "%.2f", engineering.amount))
                                                    .font(.subheadline)
                                                    .fontWeight(.semibold)
                                                    .foregroundColor(.white)
                                                    .frame(width: 100, alignment: .trailing)
                                                
                                                HStack(spacing: 15) {
                                                    Button(action: {
                                                        engineeringToEdit = engineering
                                                        showEditEngineeringSheet = true
                                                    }) {
                                                        Image(systemName: "pencil")
                                                            .foregroundColor(.blue)
                                                    }
                                                    
                                                    Button(action: {
                                                        deleteEngineering(engineering)
                                                    }) {
                                                        Image(systemName: "trash")
                                                            .foregroundColor(.red)
                                                    }
                                                }
                                                .frame(width: 60, alignment: .center)
                                            }
                                            .padding(.horizontal)
                                            .padding(.vertical, 8)
                                            .background(Color.black.opacity(0.1))
                                            
                                            Divider().background(Color.gray.opacity(0.3))
                                        }
                                    }
                                }
                            }
                        }
                        .padding(.horizontal)
                        
                        // Expenses Section - fixed rendering
                        VStack(alignment: .leading, spacing: 10) {
                            HStack {
                                Text("Expenses")
                                    .font(.title2)
                                    .fontWeight(.bold)
                                    .foregroundColor(.white)
                                
                                if proposal.expensesArray.count > 0 {
                                    Text("(\(proposal.expensesArray.count))")
                                        .font(.subheadline)
                                        .foregroundColor(.gray)
                                }
                                
                                Spacer()
                                
                                Button(action: { showingExpensesForm = true }) {
                                    Label("Add", systemImage: "plus")
                                        .foregroundColor(.blue)
                                }
                            }
                            
                            ZStack {
                                // Solid background
                                RoundedRectangle(cornerRadius: 10)
                                    .fill(Color.black.opacity(0.2))
                                
                                // Table content
                                VStack(spacing: 0) {
                                    // Header
                                    HStack {
                                        Text("Description")
                                            .font(.caption)
                                            .fontWeight(.bold)
                                            .frame(maxWidth: .infinity, alignment: .leading)
                                        
                                        Text("Amount")
                                            .font(.caption)
                                            .fontWeight(.bold)
                                            .frame(width: 100, alignment: .trailing)
                                        
                                        Text("Act")
                                            .font(.caption)
                                            .fontWeight(.bold)
                                            .frame(width: 60, alignment: .center)
                                    }
                                    .padding(.horizontal)
                                    .padding(.vertical, 8)
                                    .background(Color.black.opacity(0.3))
                                    
                                    Divider().background(Color.gray)
                                    
                                    // Expense rows or empty state
                                    if proposal.expensesArray.isEmpty {
                                        Text("No expenses added yet")
                                            .foregroundColor(.gray)
                                            .padding()
                                            .frame(maxWidth: .infinity)
                                    } else {
                                        ForEach(proposal.expensesArray, id: \.self) { expense in
                                            HStack {
                                                Text(expense.desc ?? "")
                                                    .font(.subheadline)
                                                    .foregroundColor(.white)
                                                    .frame(maxWidth: .infinity, alignment: .leading)
                                                
                                                Text(String(format: "%.2f", expense.amount))
                                                    .font(.subheadline)
                                                    .fontWeight(.semibold)
                                                    .foregroundColor(.white)
                                                    .frame(width: 100, alignment: .trailing)
                                                
                                                HStack(spacing: 15) {
                                                    Button(action: {
                                                        expenseToEdit = expense
                                                        showEditExpenseSheet = true
                                                    }) {
                                                        Image(systemName: "pencil")
                                                            .foregroundColor(.blue)
                                                    }
                                                    
                                                    Button(action: {
                                                        deleteExpense(expense)
                                                    }) {
                                                        Image(systemName: "trash")
                                                            .foregroundColor(.red)
                                                    }
                                                }
                                                .frame(width: 60, alignment: .center)
                                            }
                                            .padding(.horizontal)
                                            .padding(.vertical, 8)
                                            .background(Color.black.opacity(0.1))
                                            
                                            Divider().background(Color.gray.opacity(0.3))
                                        }
                                    }
                                }
                            }
                        }
                        .padding(.horizontal)
                        
                        // Custom Taxes Section - fixed rendering
                        VStack(alignment: .leading, spacing: 10) {
                            HStack {
                                Text("Custom Taxes")
                                    .font(.title2)
                                    .fontWeight(.bold)
                                    .foregroundColor(.white)
                                
                                Spacer()
                                
                                Button(action: { showingCustomTaxForm = true }) {
                                    Label("Add", systemImage: "plus")
                                        .foregroundColor(.blue)
                                }
                            }
                            
                            ZStack {
                                // Solid background
                                RoundedRectangle(cornerRadius: 10)
                                    .fill(Color.black.opacity(0.2))
                                
                                // Table content
                                VStack(spacing: 0) {
                                    // Header
                                    HStack {
                                        Text("Tax Name")
                                            .font(.caption)
                                            .fontWeight(.bold)
                                            .frame(maxWidth: .infinity, alignment: .leading)
                                        
                                        Text("Rate")
                                            .font(.caption)
                                            .fontWeight(.bold)
                                            .frame(width: 80, alignment: .trailing)
                                        
                                        Text("Amount")
                                            .font(.caption)
                                            .fontWeight(.bold)
                                            .frame(width: 100, alignment: .trailing)
                                        
                                        Text("Act")
                                            .font(.caption)
                                            .fontWeight(.bold)
                                            .frame(width: 60, alignment: .center)
                                    }
                                    .padding(.horizontal)
                                    .padding(.vertical, 8)
                                    .background(Color.black.opacity(0.3))
                                    
                                    Divider().background(Color.gray)
                                    
                                    // Custom tax rows or empty state
                                    if proposal.taxesArray.isEmpty {
                                        Text("No custom taxes added yet")
                                            .foregroundColor(.gray)
                                            .padding()
                                            .frame(maxWidth: .infinity)
                                    } else {
                                        ForEach(proposal.taxesArray, id: \.self) { tax in
                                            HStack {
                                                Text(tax.name ?? "")
                                                    .font(.subheadline)
                                                    .foregroundColor(.white)
                                                    .frame(maxWidth: .infinity, alignment: .leading)
                                                
                                                Text(String(format: "%.1f%%", tax.rate))
                                                    .font(.subheadline)
                                                    .frame(width: 80, alignment: .trailing)
                                                
                                                Text(String(format: "%.2f", tax.amount))
                                                    .font(.subheadline)
                                                    .fontWeight(.semibold)
                                                    .foregroundColor(.white)
                                                    .frame(width: 100, alignment: .trailing)
                                                
                                                HStack(spacing: 15) {
                                                    Button(action: {
                                                        taxToEdit = tax
                                                        showEditTaxSheet = true
                                                    }) {
                                                        Image(systemName: "pencil")
                                                            .foregroundColor(.blue)
                                                    }
                                                    
                                                    Button(action: {
                                                        deleteTax(tax)
                                                    }) {
                                                        Image(systemName: "trash")
                                                            .foregroundColor(.red)
                                                    }
                                                }
                                                .frame(width: 60, alignment: .center)
                                            }
                                            .padding(.horizontal)
                                            .padding(.vertical, 8)
                                            .background(Color.black.opacity(0.1))
                                            
                                            Divider().background(Color.gray.opacity(0.3))
                                        }
                                    }
                                }
                            }
                        }
                        .padding(.horizontal)
                        
                        // Financial Summary
                        financialSummarySection
                        
                        // Notes Section
                        if let notes = proposal.notes, !notes.isEmpty {
                            notesSection(notes: notes)
                        }
                    }
                    .padding(.vertical, 20)
                }
            }
        }
        .navigationBarHidden(true)
        // SHEET PRESENTATIONS
        .sheet(isPresented: $showingItemSelection) {
            ItemSelectionView(proposal: proposal)
        }
        .sheet(isPresented: $showingEngineeringForm) {
            EngineeringView(proposal: proposal)
        }
        .sheet(isPresented: $showingExpensesForm) {
            ExpensesView(proposal: proposal)
        }
        .sheet(isPresented: $showingCustomTaxForm) {
            CustomTaxView(proposal: proposal)
        }
        .sheet(isPresented: $showingEditProposal) {
            EditProposalView(proposal: proposal)
        }
        .sheet(isPresented: $showingFinancialDetails) {
            FinancialSummaryDetailView(proposal: proposal)
        }
        .sheet(isPresented: $showEditEngineeringSheet) {
            if let engineering = engineeringToEdit {
                NavigationView {
                    EditEngineeringView(engineering: engineering)
                        .navigationTitle("Edit Engineering")
                        .navigationBarItems(trailing: Button("Done") {
                            showEditEngineeringSheet = false
                            updateProposalTotal()
                        })
                }
            }
        }
        .sheet(isPresented: $showEditExpenseSheet) {
            if let expense = expenseToEdit {
                NavigationView {
                    EditExpenseView(expense: expense)
                        .navigationTitle("Edit Expense")
                        .navigationBarItems(trailing: Button("Done") {
                            showEditExpenseSheet = false
                            updateProposalTotal()
                        })
                }
            }
        }
        .sheet(isPresented: $showEditTaxSheet) {
            if let tax = taxToEdit {
                NavigationView {
                    EditCustomTaxView(customTax: tax, proposal: proposal)
                        .navigationTitle("Edit Custom Tax")
                        .navigationBarItems(trailing: Button("Done") {
                            showEditTaxSheet = false
                            updateProposalTotal()
                        })
                }
            }
        }
        .sheet(isPresented: $showEditItemSheet) {
            if let item = itemToEdit {
                EditProposalItemView(item: item, didSave: $didSaveItemChanges)
                    .environment(\.managedObjectContext, viewContext)
                    .onDisappear {
                        if didSaveItemChanges {
                            // Force refresh the view when changes were saved
                            updateProposalTotal()
                            
                            // Reset the flag
                            didSaveItemChanges = false
                            
                            // Force UI refresh by triggering state change
                            DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                                // Just update any state variable to trigger refresh
                                showEditItemSheet = false
                            }
                        }
                    }
            }
        }
        .alert("Delete Item?", isPresented: $showDeleteConfirmation) {
            Button("Delete", role: .destructive) {
                if let item = itemToDelete {
                    deleteItem(item)
                }
            }
            Button("Cancel", role: .cancel) {}
        } message: {
            Text("Are you sure you want to delete this item from the proposal?")
        }
    }
    
    // MARK: - Financial Summary Section
    
    private var financialSummarySection: some View {
        ZStack {
            // Solid background
            RoundedRectangle(cornerRadius: 10)
                .fill(Color.black.opacity(0.2))
            
            VStack(alignment: .leading, spacing: 15) {
                // Progress bar at the top
                Rectangle()
                    .frame(height: 4)
                    .foregroundColor(.gray.opacity(0.3))
                    .overlay(
                        GeometryReader { geometry in
                            Rectangle()
                                .frame(width: geometry.size.width * 0.65)
                                .foregroundColor(.white)
                        }
                    )
                    .cornerRadius(2)
                    .padding(.bottom, 20)
                
                HStack {
                    Text("Financial Summary")
                        .font(.title2)
                        .fontWeight(.bold)
                        .foregroundColor(.white)
                    
                    Spacer()
                    
                    Button(action: { showingFinancialDetails = true }) {
                        Label("Details", systemImage: "chart.bar")
                            .foregroundColor(.blue)
                    }
                }
                
                Group {
                    SummaryRow(title: "Products Subtotal", value: proposal.subtotalProducts)
                    SummaryRow(title: "Engineering Subtotal", value: proposal.subtotalEngineering)
                    SummaryRow(title: "Expenses Subtotal", value: proposal.subtotalExpenses)
                    SummaryRow(title: "Taxes", value: proposal.subtotalTaxes)
                    
                    // Total with more prominent styling
                    HStack {
                        Text("Total")
                            .font(.headline)
                            .foregroundColor(.white)
                        Spacer()
                        Text(String(format: "%.2f", proposal.totalAmount))
                            .font(.title3)
                            .fontWeight(.bold)
                            .foregroundColor(.white)
                    }
                    .padding(.vertical, 5)
                    
                    Divider().background(Color.gray.opacity(0.5))
                    
                    // Partner Cost Section
                    let partnerCost = calculatePartnerCost()
                    SummaryRow(title: "Partner Cost", value: partnerCost, titleColor: .gray, valueColor: .gray)
                    
                    // Total Profit
                    let totalProfit = proposal.totalAmount - partnerCost
                    HStack {
                        Text("Total Profit")
                            .font(.headline)
                            .foregroundColor(.white)
                        Spacer()
                        Text(String(format: "%.2f", totalProfit))
                            .font(.title3)
                            .fontWeight(.bold)
                            .foregroundColor(totalProfit >= 0 ? .green : .red)
                    }
                    .padding(.vertical, 5)
                    
                    // Profit Margin
                    HStack {
                        Text("Profit Margin")
                            .foregroundColor(.white)
                        Spacer()
                        Text(String(format: "%.1f%%", proposal.totalAmount > 0 ? (totalProfit / proposal.totalAmount) * 100 : 0))
                            .fontWeight(.semibold)
                            .foregroundColor(totalProfit >= 0 ? .green : .red)
                    }
                }
            }
            .padding()
        }
        .padding(.horizontal)
    }
    
    // Helper view for consistent financial summary rows
    private struct SummaryRow: View {
        let title: String
        let value: Double
        var titleColor: Color = .white
        var valueColor: Color = .white
        
        var body: some View {
            HStack {
                Text(title)
                    .foregroundColor(titleColor)
                Spacer()
                Text(String(format: "%.2f", value))
                    .foregroundColor(valueColor)
            }
            .padding(.vertical, 3)
        }
    }
    
    private func notesSection(notes: String) -> some View {
        ZStack {
            RoundedRectangle(cornerRadius: 10)
                .fill(Color.black.opacity(0.2))
            
            VStack(alignment: .leading, spacing: 10) {
                Text("Notes")
                    .font(.title2)
                    .fontWeight(.bold)
                    .foregroundColor(.white)
                
                Divider()
                    .background(Color.gray.opacity(0.5))
                
                Text(notes)
                    .foregroundColor(.white)
            }
            .padding()
        }
        .padding(.horizontal)
    }
    
    // MARK: - Helper Functions
    
    private func statusColor(for status: String) -> Color {
        switch status {
        case "Draft": return .gray
        case "Pending": return .orange
        case "Sent": return .blue
        case "Won": return .green
        case "Lost": return .red
        case "Expired": return .purple
        default: return .gray
        }
    }
    
    private func calculatePartnerCost() -> Double {
        var totalCost = 0.0
        
        // Sum partner cost for all products
        for item in proposal.itemsArray {
            if let product = item.product {
                totalCost += product.partnerPrice * item.quantity
            }
        }
        
        // Add expenses
        totalCost += proposal.subtotalExpenses
        
        return totalCost
    }
    
    private func deleteItem(_ item: ProposalItem) {
        withAnimation {
            viewContext.delete(item)
            
            do {
                try viewContext.save()
                updateProposalTotal()
            } catch {
                let nsError = error as NSError
                print("Error deleting item: \(nsError), \(nsError.userInfo)")
            }
        }
    }
    
    private func deleteEngineering(_ engineering: Engineering) {
        withAnimation {
            viewContext.delete(engineering)
            
            do {
                try viewContext.save()
                updateProposalTotal()
            } catch {
                let nsError = error as NSError
                print("Error deleting engineering: \(nsError), \(nsError.userInfo)")
            }
        }
    }
    
    private func deleteExpense(_ expense: Expense) {
        withAnimation {
            viewContext.delete(expense)
            
            do {
                try viewContext.save()
                updateProposalTotal()
            } catch {
                let nsError = error as NSError
                print("Error deleting expense: \(nsError), \(nsError.userInfo)")
            }
        }
    }
    
    private func deleteTax(_ tax: CustomTax) {
        withAnimation {
            viewContext.delete(tax)
            
            do {
                try viewContext.save()
                updateProposalTotal()
            } catch {
                let nsError = error as NSError
                print("Error deleting tax: \(nsError), \(nsError.userInfo)")
            }
        }
    }
    
    // Function to update the proposal total after changes
    private func updateProposalTotal() {
        // Calculate total amount from all components
        let productsTotal = proposal.subtotalProducts
        let engineeringTotal = proposal.subtotalEngineering 
        let expensesTotal = proposal.subtotalExpenses
        let taxesTotal = proposal.subtotalTaxes
        
        proposal.totalAmount = productsTotal + engineeringTotal + expensesTotal + taxesTotal
        
        do {
            try viewContext.save()
        } catch {
            let nsError = error as NSError
            print("Error updating proposal total: \(nsError), \(nsError.userInfo)")
        }
    }
}
extension ProposalItem {
    // Safe method to get the multiplier without KVC
    func safeMultiplier() -> Double {
        // If we're using the unitPrice based on listPrice and discount, we can calculate it
        if let product = self.product {
            let listPrice = product.listPrice
            // If listPrice is 0, default to 1.0 to avoid division by zero
            if listPrice == 0 || self.discount == 100 {
                return 1.0
            }
            
            // Calculate: unitPrice = listPrice * multiplier * (1 - discount/100)
            // So: multiplier = unitPrice / (listPrice * (1 - discount/100))
            let discountFactor = 1.0 - (self.discount / 100.0)
            if discountFactor > 0 {
                return self.unitPrice / (listPrice * discountFactor)
            }
        }
        
        // Default fallback
        return 1.0
    }
}
private func calculateMultiplier(_ item: ProposalItem) -> Double {
    // If we have product data, calculate the implied multiplier from price data
    if let product = item.product, product.listPrice > 0 {
        let discountFactor = 1.0 - (item.discount / 100.0)
        if discountFactor > 0 {
            return item.unitPrice / (product.listPrice * discountFactor)
        }
    }
    return 1.0 // Default value
}



/* ================================================== */
/* File: ./ProposalCRM/Views/Proposals/ProposalHeaderView.swift */
/* ================================================== */

//
//  ProposalHeaderView.swift
//  ProposalCRM
//
//  Created by Ali Sami Gözükırmızı on 19.04.2025.
//


// ProposalHeaderView.swift
// Fixed header view for the proposal detail screen with solid background

import SwiftUI

struct ProposalHeaderView: View {
    @ObservedObject var proposal: Proposal
    var onEditTapped: () -> Void
    
    var body: some View {
        ZStack {
            // Solid background to prevent any drawing from showing through
            Rectangle()
                .fill(Color.black)
                .cornerRadius(10)
                .shadow(color: Color.black.opacity(0.2), radius: 5, x: 0, y: 2)
            
            // Content layer
            VStack(alignment: .leading, spacing: 15) {
                HStack {
                    Text(proposal.formattedNumber)
                        .font(.title2)
                        .fontWeight(.bold)
                        .foregroundColor(.white)
                    
                    Spacer()
                    
                    Text(proposal.formattedStatus)
                        .font(.subheadline)
                        .padding(6)
                        .background(statusColor(for: proposal.formattedStatus))
                        .foregroundColor(.white)
                        .cornerRadius(4)
                }
                
                Divider().background(Color.gray.opacity(0.5))
                
                HStack {
                    VStack(alignment: .leading) {
                        Text("Customer")
                            .font(.caption)
                            .foregroundColor(.gray)
                        Text(proposal.customerName)
                            .font(.headline)
                            .foregroundColor(.white)
                    }
                    
                    Spacer()
                    
                    VStack(alignment: .trailing) {
                        Text("Date")
                            .font(.caption)
                            .foregroundColor(.gray)
                        Text(proposal.formattedDate)
                            .font(.headline)
                            .foregroundColor(.white)
                    }
                }
                
                HStack {
                    Text("Total Amount")
                        .font(.caption)
                        .foregroundColor(.gray)
                    
                    Spacer()
                    
                    Text(proposal.formattedTotal)
                        .font(.title2)
                        .fontWeight(.bold)
                        .foregroundColor(.white)
                }
            }
            .padding()
        }
    }
    
    private func statusColor(for status: String) -> Color {
        switch status {
        case "Draft":
            return .gray
        case "Pending":
            return .orange
        case "Sent":
            return .blue
        case "Won":
            return .green
        case "Lost":
            return .red
        case "Expired":
            return .purple
        default:
            return .gray
        }
    }
}

// Fixed proposal title section
struct ProposalTitleSection: View {
    let title: String
    let customer: String
    let date: String
    let amount: String
    let status: String
    let onEditTapped: () -> Void
    
    var body: some View {
        ZStack {
            // Solid black background
            Rectangle()
                .fill(Color.black)
                .edgesIgnoringSafeArea(.top)
            
            VStack(alignment: .leading, spacing: 10) {
                // Proposal number and status
                HStack {
                    Text(title)
                        .font(.title)
                        .fontWeight(.bold)
                        .foregroundColor(.white)
                    
                    Spacer()
                    
                    Text(status)
                        .font(.headline)
                        .padding(.horizontal, 12)
                        .padding(.vertical, 6)
                        .background(statusBackgroundColor)
                        .foregroundColor(.white)
                        .cornerRadius(8)
                }
                
                // Customer name
                Text(customer)
                    .font(.headline)
                    .foregroundColor(.gray)
                
                Divider()
                    .background(Color.gray.opacity(0.5))
                
                // Date and amount on the same row
                HStack {
                    HStack {
                        Text("Date:")
                            .font(.subheadline)
                            .foregroundColor(.gray)
                        
                        Text(date)
                            .font(.subheadline)
                            .foregroundColor(.white)
                    }
                    
                    Spacer()
                    
                    HStack {
                        Text("Total Amount:")
                            .font(.subheadline)
                            .foregroundColor(.gray)
                        
                        Text(amount)
                            .font(.headline)
                            .fontWeight(.bold)
                            .foregroundColor(.white)
                    }
                }
            }
            .padding()
        }
    }
    
    private var statusBackgroundColor: Color {
        switch status.lowercased() {
        case "draft": return .gray
        case "pending": return .orange
        case "sent": return .blue
        case "won": return .green
        case "lost": return .red
        case "expired": return .purple
        default: return .gray
        }
    }
}

// Top section component with action callback
struct ProposalHeaderSection: View {
    var proposal: Proposal
    var onEditTapped: () -> Void
    
    var body: some View {
        VStack(spacing: 0) {
            // Solid black background for the navigation area
            ZStack {
                Rectangle()
                    .fill(Color.black)
                    .frame(height: 50)
                
                HStack {
                    NavigationLink(destination: EmptyView()) {
                        HStack {
                            Image(systemName: "chevron.left")
                            Text("Customer Details")
                        }
                        .foregroundColor(.blue)
                    }
                    
                    Spacer()
                    
                    Button(action: onEditTapped) {
                        Image(systemName: "square.and.pencil")
                            .foregroundColor(.blue)
                            .font(.title2)
                    }
                }
                .padding(.horizontal)
            }
            
            // Proposal title and information
            ProposalTitleSection(
                title: "Proposal Details",
                customer: proposal.customerName,
                date: proposal.formattedDate,
                amount: proposal.formattedTotal,
                status: proposal.formattedStatus,
                onEditTapped: onEditTapped
            )
            
            // This ensures content doesn't overlap
            Rectangle()
                .fill(Color.black)
                .frame(height: 20)
        }
        .background(Color.black)
    }
}


/* ================================================== */
/* File: ./ProposalCRM/Views/Proposals/ProposalItemTableView.swift */
/* ================================================== */

// EnhancedProductTableView.swift
// Comprehensive table view for displaying proposal items with all requested columns

import SwiftUI

struct EnhancedProductTableView: View {
    @Environment(\.colorScheme) var colorScheme
    @ObservedObject var proposal: Proposal
    
    // Whether the table should be scrollable horizontally
    @State private var scrollOffset: CGFloat = 0
    
    var body: some View {
        VStack(alignment: .leading, spacing: 0) {
            // Header with column titles - Scrollable header
            ScrollView(.horizontal, showsIndicators: true) {
                HStack(spacing: 0) {
                    // Fixed columns
                    Group {
                        Text("Product Name")
                            .font(.caption)
                            .fontWeight(.bold)
                            .frame(width: 150, alignment: .leading)
                            .padding(.horizontal, 5)
                        
                        Divider().frame(height: 30)
                        
                        Text("Qty")
                            .font(.caption)
                            .fontWeight(.bold)
                            .frame(width: 40, alignment: .center)
                        
                        Divider().frame(height: 30)
                    }
                    
                    // Scrollable columns
                    Group {
                        Text("Unit Partner Price")
                            .font(.caption)
                            .fontWeight(.bold)
                            .frame(width: 100, alignment: .trailing)
                            .padding(.horizontal, 5)
                        
                        Divider().frame(height: 30)
                        
                        Text("Unit List Price")
                            .font(.caption)
                            .fontWeight(.bold)
                            .frame(width: 100, alignment: .trailing)
                            .padding(.horizontal, 5)
                        
                        Divider().frame(height: 30)
                        
                        Text("Multiplier")
                            .font(.caption)
                            .fontWeight(.bold)
                            .frame(width: 80, alignment: .trailing)
                            .padding(.horizontal, 5)
                        
                        Divider().frame(height: 30)
                        
                        Text("Discount")
                            .font(.caption)
                            .fontWeight(.bold)
                            .frame(width: 80, alignment: .trailing)
                            .padding(.horizontal, 5)
                        
                        Divider().frame(height: 30)
                        
                        Text("Ext Partner Price")
                            .font(.caption)
                            .fontWeight(.bold)
                            .frame(width: 100, alignment: .trailing)
                            .padding(.horizontal, 5)
                        
                        Divider().frame(height: 30)
                        
                        Text("Ext List Price")
                            .font(.caption)
                            .fontWeight(.bold)
                            .frame(width: 100, alignment: .trailing)
                            .padding(.horizontal, 5)
                        
                        Divider().frame(height: 30)
                        
                        Text("Ext Customer Price")
                            .font(.caption)
                            .fontWeight(.bold)
                            .frame(width: 120, alignment: .trailing)
                            .padding(.horizontal, 5)
                        
                        Divider().frame(height: 30)
                        
                        Text("Total Profit")
                            .font(.caption)
                            .fontWeight(.bold)
                            .frame(width: 100, alignment: .trailing)
                            .padding(.horizontal, 5)
                        
                        Divider().frame(height: 30)
                        
                        Text("Custom Tax?")
                            .font(.caption)
                            .fontWeight(.bold)
                            .frame(width: 90, alignment: .center)
                            .padding(.horizontal, 5)
                    }
                }
                .padding(.vertical, 5)
                .background(colorScheme == .dark ? Color(UIColor.systemGray6) : Color(UIColor.systemGray5))
                .cornerRadius(6)
            }
            
            if proposal.itemsArray.isEmpty {
                HStack {
                    Spacer()
                    Text("No products added yet")
                        .foregroundColor(.secondary)
                        .padding()
                    Spacer()
                }
            } else {
                // Scrollable table rows
                ScrollView {
                    VStack(spacing: 0) {
                        ForEach(proposal.itemsArray, id: \.self) { item in
                            VStack(spacing: 0) {
                                // Row
                                ScrollView(.horizontal, showsIndicators: true) {
                                    HStack(spacing: 0) {
                                        // Fixed columns
                                        Group {
                                            Text(item.productName)
                                                .font(.system(size: 14))
                                                .frame(width: 150, alignment: .leading)
                                                .padding(.horizontal, 5)
                                                .lineLimit(1)
                                            
                                            Divider().frame(height: 30)
                                            
                                            Text("\(Int(item.quantity))")
                                                .font(.system(size: 14))
                                                .frame(width: 40, alignment: .center)
                                            
                                            Divider().frame(height: 30)
                                        }
                                        
                                        // Calculated columns
                                        Group {
                                            // Unit partner price
                                            let unitPartnerPrice = item.product?.partnerPrice ?? 0
                                            Text(formatPrice(unitPartnerPrice))
                                                .font(.system(size: 14))
                                                .frame(width: 100, alignment: .trailing)
                                                .padding(.horizontal, 5)
                                            
                                            Divider().frame(height: 30)
                                            
                                            // Unit list price
                                            let unitListPrice = item.product?.listPrice ?? 0
                                            Text(formatPrice(unitListPrice))
                                                .font(.system(size: 14))
                                                .frame(width: 100, alignment: .trailing)
                                                .padding(.horizontal, 5)
                                            
                                            Divider().frame(height: 30)
                                            
                                            // Multiplier (estimating from unit price and list price)
                                            let estimatedMultiplier = unitListPrice > 0 ?
                                                (item.unitPrice / unitListPrice) * (1 + item.discount/100) : 1.0
                                            Text(String(format: "%.2f", estimatedMultiplier))
                                                .font(.system(size: 14))
                                                .frame(width: 80, alignment: .trailing)
                                                .padding(.horizontal, 5)
                                            
                                            Divider().frame(height: 30)
                                            
                                            // Discount
                                            // For the formula discount = unit partner price / unit list price
                                            // (I think there might be a formula error - typically discount would be (1 - partner/list) * 100)
                                            // Using the formula provided
                                            let calculatedDiscount = unitListPrice > 0 ?
                                                (unitPartnerPrice / unitListPrice) * 100 : 0
                                            Text(String(format: "%.1f%%", calculatedDiscount))
                                                .font(.system(size: 14))
                                                .frame(width: 80, alignment: .trailing)
                                                .padding(.horizontal, 5)
                                            
                                            Divider().frame(height: 30)
                                            
                                            // Extended partner price
                                            let extPartnerPrice = unitPartnerPrice * item.quantity
                                            Text(formatPrice(extPartnerPrice))
                                                .font(.system(size: 14))
                                                .frame(width: 100, alignment: .trailing)
                                                .padding(.horizontal, 5)
                                            
                                            Divider().frame(height: 30)
                                            
                                            // Extended list price
                                            let extListPrice = unitListPrice * item.quantity
                                            Text(formatPrice(extListPrice))
                                                .font(.system(size: 14))
                                                .frame(width: 100, alignment: .trailing)
                                                .padding(.horizontal, 5)
                                            
                                            Divider().frame(height: 30)
                                            
                                            // Extended customer price
                                            let extCustomerPrice = item.amount
                                            Text(formatPrice(extCustomerPrice))
                                                .font(.system(size: 14))
                                                .frame(width: 120, alignment: .trailing)
                                                .padding(.horizontal, 5)
                                            
                                            Divider().frame(height: 30)
                                            
                                            // Total profit
                                            let totalProfit = extCustomerPrice - extPartnerPrice
                                            Text(formatPrice(totalProfit))
                                                .font(.system(size: 14))
                                                .frame(width: 100, alignment: .trailing)
                                                .padding(.horizontal, 5)
                                                .foregroundColor(totalProfit >= 0 ? .green : .red)
                                            
                                            Divider().frame(height: 30)
                                            
                                            // Custom tax (assuming not applied by default)
                                            Text("No")
                                                .font(.system(size: 14))
                                                .frame(width: 90, alignment: .center)
                                                .padding(.horizontal, 5)
                                        }
                                    }
                                    .padding(.vertical, 8)
                                    .background(colorScheme == .dark ? Color(UIColor.systemBackground) : Color.white)
                                }
                                
                                Divider()
                            }
                        }
                    }
                }
                .frame(height: min(CGFloat(proposal.itemsArray.count) * 50, 400))
            }
        }
    }
    
    private func formatPrice(_ value: Double) -> String {
        return String(format: "%.2f", value)
    }
}

struct EnhancedProductTableView_Previews: PreviewProvider {
    static var previews: some View {
        let context = PersistenceController.preview.container.viewContext
        let proposal = Proposal(context: context)
        proposal.id = UUID()
        proposal.number = "PROP-20250416-001"
        proposal.status = "Draft"
        
        return EnhancedProductTableView(proposal: proposal)
            .padding()
            .previewLayout(.sizeThatFits)
    }
}



/* ================================================== */
/* File: ./ProposalCRM/Views/Proposals/ProposalListView.swift */
/* ================================================== */

// ProposalListView.swift
// Displays a list of all proposals with filtering options

import SwiftUI
import CoreData

struct ProposalListView: View {
    @Environment(\.managedObjectContext) private var viewContext
    @FetchRequest(
        sortDescriptors: [NSSortDescriptor(keyPath: \Proposal.creationDate, ascending: false)],
        animation: .default)
    private var proposals: FetchedResults<Proposal>
    
    @State private var searchText = ""
    @State private var showingCreateProposal = false
    @State private var selectedStatus: String? = nil
    
    let statusOptions = ["Draft", "Pending", "Sent", "Won", "Lost", "Expired"]
    
    var body: some View {
        VStack {
            // Status filter
            ScrollView(.horizontal, showsIndicators: false) {
                HStack {
                    Button(action: { selectedStatus = nil }) {
                        Text("All")
                            .padding(.horizontal, 12)
                            .padding(.vertical, 8)
                            .background(selectedStatus == nil ? Color.blue : Color.gray.opacity(0.2))
                            .foregroundColor(selectedStatus == nil ? .white : .primary)
                            .cornerRadius(20)
                    }
                    
                    ForEach(statusOptions, id: \.self) { status in
                        Button(action: { selectedStatus = status }) {
                            Text(status)
                                .padding(.horizontal, 12)
                                .padding(.vertical, 8)
                                .background(selectedStatus == status ? statusColor(for: status) : Color.gray.opacity(0.2))
                                .foregroundColor(selectedStatus == status ? .white : .primary)
                                .cornerRadius(20)
                        }
                    }
                }
                .padding(.horizontal)
            }
            .padding(.vertical, 8)
            
            if filteredProposals.isEmpty {
                VStack(spacing: 20) {
                    if proposals.isEmpty {
                        Text("No Proposals Yet")
                            .font(.title)
                            .foregroundColor(.secondary)
                        
                        Text("Create your first proposal to get started")
                            .foregroundColor(.secondary)
                        
                        Button(action: { showingCreateProposal = true }) {
                            Label("Create Proposal", systemImage: "plus")
                                .padding()
                                .background(Color.blue)
                                .foregroundColor(.white)
                                .cornerRadius(10)
                        }
                    } else {
                        Text("No matching proposals")
                            .font(.title)
                            .foregroundColor(.secondary)
                        
                        Text("Try changing your search or filter")
                            .foregroundColor(.secondary)
                    }
                }
                .padding()
            } else {
                List {
                    // Fix: Use ForEach with filteredProposals directly
                    // Instead of trying to convert FetchedResults to Array
                    ForEach(filteredProposals, id: \.self) { proposal in
                        NavigationLink(destination: ProposalDetailView(proposal: proposal)) {
                            VStack(alignment: .leading, spacing: 8) {
                                HStack {
                                    Text(proposal.formattedNumber)
                                        .font(.headline)
                                    
                                    Spacer()
                                    
                                    Text(proposal.formattedStatus)
                                        .font(.caption)
                                        .padding(4)
                                        .background(statusColor(for: proposal.formattedStatus))
                                        .foregroundColor(.white)
                                        .cornerRadius(4)
                                }
                                
                                Text(proposal.customerName)
                                    .font(.subheadline)
                                
                                HStack {
                                    Text(proposal.formattedDate)
                                        .font(.caption)
                                        .foregroundColor(.secondary)
                                    
                                    Spacer()
                                    
                                    Text(proposal.formattedTotal)
                                        .font(.title3)
                                        .fontWeight(.bold)
                                }
                            }
                            .padding(.vertical, 4)
                        }
                    }
                    .onDelete(perform: deleteProposals)
                }
            }
        }
        .searchable(text: $searchText, prompt: "Search Proposals")
        .navigationTitle("Proposals")
        .toolbar {
            ToolbarItem(placement: .navigationBarTrailing) {
                Button(action: { showingCreateProposal = true }) {
                    Label("Create", systemImage: "plus")
                }
            }
        }
        .sheet(isPresented: $showingCreateProposal) {
            CustomerSelectionForProposalView()
        }
    }
    
    // Fix: Changed the return type to [Proposal] and made sure we don't assign back to FetchedResults
    private var filteredProposals: [Proposal] {
        // Filter the proposals based on search text and selected status
        let filtered = proposals.filter { proposal in
            // Apply status filter if selected
            if let status = selectedStatus, proposal.status != status {
                return false
            }
            
            // Apply search text filter if entered
            if !searchText.isEmpty {
                let matchesNumber = proposal.number?.localizedCaseInsensitiveContains(searchText) ?? false
                let matchesCustomer = proposal.customer?.name?.localizedCaseInsensitiveContains(searchText) ?? false
                
                if !matchesNumber && !matchesCustomer {
                    return false
                }
            }
            
            return true
        }
        
        // Return the filtered results as an array
        return Array(filtered)
    }
    
    private func deleteProposals(offsets: IndexSet) {
        withAnimation {
            // Convert IndexSet to indices in the filtered array
            offsets.map { filteredProposals[$0] }.forEach(viewContext.delete)
            
            do {
                try viewContext.save()
            } catch {
                let nsError = error as NSError
                print("Error deleting proposal: \(nsError), \(nsError.userInfo)")
            }
        }
    }
    
    private func statusColor(for status: String) -> Color {
        switch status {
        case "Draft":
            return .gray
        case "Pending":
            return .orange
        case "Sent":
            return .blue
        case "Won":
            return .green
        case "Lost":
            return .red
        case "Expired":
            return .purple
        default:
            return .gray
        }
    }
}



/* ================================================== */
/* File: ./ProposalCRM/Views/Proposals/SectionWithAddButton.swift */
/* ================================================== */

// SectionWithAddButton.swift
// Reusable section component with add button

import SwiftUI

struct SectionWithAddButton<Content: View>: View {
    let title: String
    let count: Int
    let onAdd: () -> Void
    let content: () -> Content
    
    var body: some View {
        VStack(alignment: .leading, spacing: 10) {
            HStack {
                Text(title)
                    .font(.title2)
                    .fontWeight(.bold)
                
                if count > 0 {
                    Text("(\(count))")
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                }
                
                Spacer()
                
                Button(action: onAdd) {
                    Label("Add", systemImage: "plus")
                }
            }
            
            Divider()
            
            if count == 0 {
                HStack {
                    Spacer()
                    Text("No \(title.lowercased()) added yet")
                        .foregroundColor(.secondary)
                    Spacer()
                }
                .padding(.vertical)
            } else {
                content()
            }
        }
        .padding()
        .background(Color(UIColor.systemBackground))
        .cornerRadius(10)
        .shadow(color: Color.black.opacity(0.1), radius: 5, x: 0, y: 2)
    }
}



/* ================================================== */
/* File: ./ProposalCRMTests/ProposalCRMTests.swift */
/* ================================================== */

//
//  ProposalCRMTests.swift
//  ProposalCRMTests
//
//  Created by Ali Sami Gözükırmızı on 16.04.2025.
//

import Testing
@testable import ProposalCRM

struct ProposalCRMTests {

    @Test func example() async throws {
        // Write your test here and use APIs like `#expect(...)` to check expected conditions.
    }

}



/* ================================================== */
/* File: ./ProposalCRMUITests/ProposalCRMUITests.swift */
/* ================================================== */

//
//  ProposalCRMUITests.swift
//  ProposalCRMUITests
//
//  Created by Ali Sami Gözükırmızı on 16.04.2025.
//

import XCTest

final class ProposalCRMUITests: XCTestCase {

    override func setUpWithError() throws {
        // Put setup code here. This method is called before the invocation of each test method in the class.

        // In UI tests it is usually best to stop immediately when a failure occurs.
        continueAfterFailure = false

        // In UI tests it’s important to set the initial state - such as interface orientation - required for your tests before they run. The setUp method is a good place to do this.
    }

    override func tearDownWithError() throws {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
    }

    @MainActor
    func testExample() throws {
        // UI tests must launch the application that they test.
        let app = XCUIApplication()
        app.launch()

        // Use XCTAssert and related functions to verify your tests produce the correct results.
    }

    @MainActor
    func testLaunchPerformance() throws {
        if #available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 7.0, *) {
            // This measures how long it takes to launch your application.
            measure(metrics: [XCTApplicationLaunchMetric()]) {
                XCUIApplication().launch()
            }
        }
    }
}



/* ================================================== */
/* File: ./ProposalCRMUITests/ProposalCRMUITestsLaunchTests.swift */
/* ================================================== */

//
//  ProposalCRMUITestsLaunchTests.swift
//  ProposalCRMUITests
//
//  Created by Ali Sami Gözükırmızı on 16.04.2025.
//

import XCTest

final class ProposalCRMUITestsLaunchTests: XCTestCase {

    override class var runsForEachTargetApplicationUIConfiguration: Bool {
        true
    }

    override func setUpWithError() throws {
        continueAfterFailure = false
    }

    @MainActor
    func testLaunch() throws {
        let app = XCUIApplication()
        app.launch()

        // Insert steps here to perform after app launch but before taking a screenshot,
        // such as logging into a test account or navigating somewhere in the app

        let attachment = XCTAttachment(screenshot: app.screenshot())
        attachment.name = "Launch Screen"
        attachment.lifetime = .keepAlways
        add(attachment)
    }
}


